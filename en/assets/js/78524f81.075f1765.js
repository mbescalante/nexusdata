"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8764],{5125:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"auth/roles-permisos","title":"Roles y Permisos","description":"NexusData proporciona un sistema completo de control de acceso basado en roles (RBAC) que te permite definir qui\xe9n puede acceder a qu\xe9 recursos en tu aplicaci\xf3n.","source":"@site/docs/auth/roles-permisos.md","sourceDirName":"auth","slug":"/auth/roles-permisos","permalink":"/nexusdata/en/docs/auth/roles-permisos","draft":false,"unlisted":false,"editUrl":"https://github.com/mbescalante/nexusdata/edit/main/docs/auth/roles-permisos.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"OAuth","permalink":"/nexusdata/en/docs/auth/oauth"},"next":{"title":"Procesos de Negocio","permalink":"/nexusdata/en/docs/business-logic/"}}');var i=n(4848),a=n(8453);const o={sidebar_position:3},t="Roles y Permisos",c={},l=[{value:"Conceptos b\xe1sicos",id:"conceptos-b\xe1sicos",level:2},{value:"Configuraci\xf3n de roles",id:"configuraci\xf3n-de-roles",level:2},{value:"Modelo de usuario con roles",id:"modelo-de-usuario-con-roles",level:2},{value:"Definici\xf3n de pol\xedticas",id:"definici\xf3n-de-pol\xedticas",level:2},{value:"Configuraci\xf3n de pol\xedticas",id:"configuraci\xf3n-de-pol\xedticas",level:2},{value:"Trae AI",id:"trae-ai",level:2},{value:"Consideraciones de seguridad",id:"consideraciones-de-seguridad",level:2},{value:"Proveedores soportados",id:"proveedores-soportados",level:2},{value:"Pr\xf3ximos pasos",id:"pr\xf3ximos-pasos",level:2},{value:"Definici\xf3n de pol\xedticas",id:"definici\xf3n-de-pol\xedticas-1",level:2},{value:"Uso en resolvers GraphQL",id:"uso-en-resolvers-graphql",level:2},{value:"Uso en REST API",id:"uso-en-rest-api",level:2},{value:"Verificaci\xf3n de permisos en el c\xf3digo",id:"verificaci\xf3n-de-permisos-en-el-c\xf3digo",level:2},{value:"Roles din\xe1micos",id:"roles-din\xe1micos",level:2},{value:"Jerarqu\xeda de roles",id:"jerarqu\xeda-de-roles",level:2},{value:"Permisos a nivel de campo",id:"permisos-a-nivel-de-campo",level:2},{value:"Implementaci\xf3n en el frontend",id:"implementaci\xf3n-en-el-frontend",level:2},{value:"React con Context API",id:"react-con-context-api",level:3},{value:"Componente de protecci\xf3n de rutas",id:"componente-de-protecci\xf3n-de-rutas",level:3},{value:"Pr\xf3ximos pasos",id:"pr\xf3ximos-pasos-1",level:2}];function d(r){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...r.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"roles-y-permisos",children:"Roles y Permisos"})}),"\n",(0,i.jsx)(e.p,{children:"NexusData proporciona un sistema completo de control de acceso basado en roles (RBAC) que te permite definir qui\xe9n puede acceder a qu\xe9 recursos en tu aplicaci\xf3n."}),"\n",(0,i.jsx)(e.h2,{id:"conceptos-b\xe1sicos",children:"Conceptos b\xe1sicos"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Rol"}),": Una funci\xf3n o posici\xf3n que un usuario puede tener (ej. Admin, Editor, Usuario)"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Permiso"}),": Una capacidad espec\xedfica para realizar una acci\xf3n (ej. crear",":art","\xedculo, leer",":usuario",")"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Pol\xedtica"}),": Reglas que determinan si una acci\xf3n est\xe1 permitida"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"configuraci\xf3n-de-roles",children:"Configuraci\xf3n de roles"}),"\n",(0,i.jsx)(e.p,{children:"Define los roles y sus permisos asociados en tu configuraci\xf3n:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  rbac: {\r\n    roles: {\r\n      ADMIN: {\r\n        description: 'Administrador del sistema',\r\n        permissions: ['*'] // Todos los permisos\r\n      },\r\n      EDITOR: {\r\n        description: 'Editor de contenido',\r\n        permissions: [\r\n          'article:create',\r\n          'article:read',\r\n          'article:update:own', // Solo propios\r\n          'article:delete:own', // Solo propios\r\n          'comment:create',\r\n          'comment:read',\r\n          'comment:update:own',\r\n          'comment:delete:own',\r\n          'category:read'\r\n        ]\r\n      },\r\n      USER: {\r\n        description: 'Usuario regular',\r\n        permissions: [\r\n          'article:read',\r\n          'comment:create',\r\n          'comment:read',\r\n          'comment:update:own',\r\n          'comment:delete:own',\r\n          'profile:read:own',\r\n          'profile:update:own'\r\n        ]\r\n      }\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.h2,{id:"modelo-de-usuario-con-roles",children:"Modelo de usuario con roles"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-yaml",children:"# models.yaml\r\nmodels:\r\n  User:\r\n    fields:\r\n      id:\r\n        type: uuid\r\n        primary: true\r\n      email:\r\n        type: string\r\n        unique: true\r\n      password:\r\n        type: string\r\n        private: true\r\n      firstName:\r\n        type: string\r\n        nullable: true\r\n      lastName:\r\n        type: string\r\n        nullable: true\r\n      role:\r\n        type: enum\r\n        values: [ADMIN, EDITOR, USER]\r\n        default: USER\r\n      isActive:\r\n        type: boolean\r\n        default: true\r\n    relations:\r\n      permissions:\r\n        type: hasMany\r\n        model: Permission\r\n        foreignKey: userId\r\n        \r\n  Permission:\r\n    fields:\r\n      id:\r\n        type: uuid\r\n        primary: true\r\n      action:\r\n        type: string\r\n      resource:\r\n        type: string\r\n      conditions:\r\n        type: json\r\n        nullable: true\r\n      createdAt:\r\n        type: datetime\r\n        default: now()\r\n    relations:\r\n      user:\r\n        type: belongsTo\r\n        model: User\r\n        foreignKey: userId\r\n    indexes:\r\n      - name: userId_action_resource\r\n        fields: [userId, action, resource]\r\n        unique: true\n"})}),"\n",(0,i.jsx)(e.h2,{id:"definici\xf3n-de-pol\xedticas",children:"Definici\xf3n de pol\xedticas"}),"\n",(0,i.jsx)(e.p,{children:"Las pol\xedticas definen reglas m\xe1s complejas para el acceso a recursos:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// src/policies/article.js\r\nmodule.exports = {\r\n  create: (user) => {\r\n    return user && (user.role === 'ADMIN' || user.role === 'EDITOR');\r\n  },\r\n  \r\n  update: async (user, context, resourceId) => {\r\n    if (!user) return false;\r\n    \r\n    // Administradores pueden actualizar cualquier art\xedculo\r\n    if (user.role === 'ADMIN') return true;\r\n    \r\n    // Editores solo pueden actualizar sus propios art\xedculos\r\n    if (user.role === 'EDITOR') {\r\n      const article = await context.models.Article.findUnique({\r\n        where: { id: resourceId }\r\n      });\r\n      return article && article.authorId === user.id;\r\n    }\r\n    \r\n    return false;\r\n  },\r\n  \r\n  delete: (user) => {\r\n    return user && user.role === 'ADMIN';\r\n  },\r\n  \r\n  read: () => {\r\n    // Cualquiera puede leer art\xedculos\r\n    return true;\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.h2,{id:"configuraci\xf3n-de-pol\xedticas",children:"Configuraci\xf3n de pol\xedticas"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  permissions: {\r\n    article: 'src/policies/article.js',\r\n    user: 'src/policies/user.js',\r\n    comment: 'src/policies/comment.js'\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.h2,{id:"trae-ai",children:"Trae AI"}),"\n",(0,i.jsx)(e.p,{children:"Used 1 Reference"}),"\n",(0,i.jsx)(e.p,{children:"Veo que necesitas arreglar la estructura de archivos para la documentaci\xf3n de autenticaci\xf3n. El problema es que tienes un archivo auth.md dentro de una carpeta auth , lo que puede causar confusi\xf3n en la navegaci\xf3n."}),"\n",(0,i.jsx)(e.p,{children:"Para arreglar esto, te recomiendo reorganizar la estructura de la siguiente manera:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Renombrar el archivo actual auth/auth.md a auth/index.md para que sea la p\xe1gina principal de la secci\xf3n de autenticaci\xf3n"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Actualizar las referencias en el sidebar\r\nAqu\xed est\xe1 el cambio que debes hacer:"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Primero, mueve el contenido del archivo actual a un nuevo archivo index.md:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-markdown",children:"---\r\nsidebar_position: 6\r\n---\r\n\r\n# Autenticaci\xf3n y Autorizaci\xf3n\r\n\r\nNexusData proporciona un sistema completo de autenticaci\xf3n y autorizaci\xf3n para proteger tus APIs y datos.\r\n\r\n## M\xe9todos de autenticaci\xf3n\r\n\r\nNexusData soporta varios m\xe9todos de autenticaci\xf3n:\r\n\r\n### JWT (JSON Web Tokens)\r\n\r\nEl m\xe9todo m\xe1s recomendado para aplicaciones modernas:\r\n\r\n```javascript\r\n// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  auth: {\r\n    jwt: {\r\n      secret: process.env.JWT_SECRET,\r\n      expiresIn: '1d', // 1 d\xeda\r\n      refreshToken: {\r\n        enabled: true,\r\n        expiresIn: '7d', // 7 d\xedas\r\n      }\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\r\n// ... resto del contenido sin cambios ...\r\n\r\n```plaintext\r\n\r\n2. Luego, actualiza el archivo sidebars.js para que apunte al nuevo archivo:\r\n\r\n```javascript:c%3A%5CUsers%5CShawm%5CDesktop%5Cdocux%5Cmy-website%5Csidebars.js\r\n// @ts-check\r\n\r\n/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */\r\nconst sidebars = {\r\n  tutorialSidebar: [\r\n    {\r\n      type: 'doc',\r\n      id: 'intro',\r\n      label: 'Introducci\xf3n'\r\n    },\r\n    {\r\n      type: 'doc',\r\n      id: 'quickstart',\r\n      label: 'Inicio R\xe1pido'\r\n    },\r\n    {\r\n      type: 'doc',\r\n      id: 'data-sources',\r\n      label: 'Fuentes de Datos'\r\n    },\r\n    {\r\n      type: 'doc',\r\n      id: 'data-modeling',\r\n      label: 'Modelado de Datos'\r\n    },\r\n    {\r\n      type: 'doc',\r\n      id: 'graphql-api',\r\n      label: 'API GraphQL'\r\n    },\r\n    {\r\n      type: 'doc',\r\n      id: 'servicios-http',\r\n      label: 'Servicios HTTP'\r\n    },\r\n    {\r\n      type: 'category',\r\n      label: 'Autenticaci\xf3n',\r\n      items: [\r\n        'auth/index',\r\n        // Aqu\xed puedes a\xf1adir m\xe1s documentos relacionados con autenticaci\xf3n\r\n        // Por ejemplo:\r\n        // 'auth/jwt',\r\n        // 'auth/oauth',\r\n        // 'auth/roles-permisos'\r\n      ]\r\n    },\r\n    {\r\n      type: 'doc',\r\n      id: 'business-logic',\r\n      label: 'L\xf3gica de Negocio'\r\n    },\r\n    // ... resto del sidebar sin cambios ...\r\n  ]\r\n};\r\n\r\nmodule.exports = sidebars;\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\r\n3. Despu\xe9s de hacer estos cambios, puedes eliminar el archivo original auth.md si ya has confirmado que el nuevo index.md funciona correctamente.\r\nEstos cambios permitir\xe1n que:\r\n\r\n- La documentaci\xf3n de autenticaci\xf3n sea la p\xe1gina principal de la secci\xf3n de autenticaci\xf3n\r\n- Puedas agregar m\xe1s archivos relacionados con autenticaci\xf3n en la misma carpeta\r\n- La estructura sea m\xe1s clara y organizada\r\n\r\n## mbescalante\r\nCopy\r\n\r\nDelete\r\n\r\n'auth/jwt',\r\n\r\n'auth/oauth',\r\n\r\n'auth/roles-permisos'\r\n\r\npuedes crearme esos 3 archivos\r\n\r\n## Trae AI\r\nUsed 1 Reference\r\n\r\nsidebars.js 39-39\r\n\r\nVoy a crear los tres archivos solicitados para la secci\xf3n de autenticaci\xf3n y luego actualizar\xe9 el sidebar para incluirlos.\r\n\r\nPrimero, vamos a actualizar el sidebar para incluir las referencias a estos archivos:\r\n\r\n```javascript\r\n// ... c\xf3digo existente ...\r\n    {\r\n      type: 'category',\r\n      label: 'Autenticaci\xf3n',\r\n      items: [\r\n        'auth/index',\r\n        'auth/jwt',\r\n        'auth/oauth',\r\n        'auth/roles-permisos'\r\n      ]\r\n    },\r\n// ... c\xf3digo existente ...\n"})}),"\n",(0,i.jsx)(e.p,{children:"Ahora, vamos a crear los tres archivos solicitados:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Archivo JWT:"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-markdown",children:"---\r\nsidebar_position: 1\r\n---\r\n\r\n# Autenticaci\xf3n con JWT\r\n\r\nJSON Web Tokens (JWT) es el m\xe9todo de autenticaci\xf3n recomendado para aplicaciones modernas en NexusData. Este enfoque sin estado permite una escalabilidad sencilla y es ideal para arquitecturas de microservicios.\r\n\r\n## Configuraci\xf3n b\xe1sica\r\n\r\nPara habilitar la autenticaci\xf3n JWT en tu aplicaci\xf3n NexusData:\r\n\r\n```javascript\r\n// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  auth: {\r\n    jwt: {\r\n      secret: process.env.JWT_SECRET,\r\n      expiresIn: '1d', // 1 d\xeda\r\n      refreshToken: {\r\n        enabled: true,\r\n        expiresIn: '7d', // 7 d\xedas\r\n      }\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:'\r\n## Estructura del token\r\nLos tokens JWT generados por NexusData contienen la siguiente informaci\xf3n:\r\n\r\n```json\r\n{\r\n  "sub": "1234567890", // ID del usuario\r\n  "name": "John Doe",\r\n  "role": "ADMIN",\r\n  "permissions": ["article:create", "article:read"],\r\n  "iat": 1516239022, // Fecha de emisi\xf3n\r\n  "exp": 1516325422  // Fecha de expiraci\xf3n\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\r\n## Flujo de autenticaci\xf3n\r\n1. Registro/Login : El usuario proporciona credenciales y recibe un token JWT y un refresh token\r\n2. Solicitudes autenticadas : El cliente incluye el token JWT en el header Authorization\r\n3. Verificaci\xf3n : NexusData verifica autom\xe1ticamente el token en cada solicitud\r\n4. Renovaci\xf3n : Cuando el token expira, el cliente usa el refresh token para obtener un nuevo JWT\r\n## Implementaci\xf3n del login\r\n```javascript\r\n// src/resolvers/auth/login.js\r\nmodule.exports = {\r\n  name: 'login',\r\n  type: 'AuthPayload',\r\n  args: {\r\n    email: 'String!',\r\n    password: 'String!'\r\n  },\r\n  resolve: async (parent, args, context) => {\r\n    const { email, password } = args;\r\n    const { services, models } = context;\r\n    \r\n    // Buscar usuario\r\n    const user = await models.User.findUnique({\r\n      where: { email }\r\n    });\r\n    \r\n    if (!user || !user.isActive) {\r\n      throw new Error('Credenciales inv\xe1lidas');\r\n    }\r\n    \r\n    // Verificar contrase\xf1a\r\n    const passwordValid = await services.auth.verifyPassword(\r\n      password, \r\n      user.password\r\n    );\r\n    \r\n    if (!passwordValid) {\r\n      throw new Error('Credenciales inv\xe1lidas');\r\n    }\r\n    \r\n    // Generar token JWT\r\n    const token = await services.auth.generateToken({\r\n      userId: user.id,\r\n      role: user.role\r\n    });\r\n    \r\n    // Generar refresh token\r\n    const refreshToken = await services.auth.generateRefreshToken(user.id);\r\n    \r\n    return {\r\n      token,\r\n      refreshToken,\r\n      user: {\r\n        id: user.id,\r\n        email: user.email,\r\n        firstName: user.firstName,\r\n        lastName: user.lastName,\r\n        role: user.role\r\n      }\r\n    };\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\r\n## Renovaci\xf3n de tokens\r\n```javascript\r\n// src/resolvers/auth/refreshToken.js\r\nmodule.exports = {\r\n  name: 'refreshToken',\r\n  type: 'RefreshTokenPayload',\r\n  args: {\r\n    refreshToken: 'String!'\r\n  },\r\n  resolve: async (parent, args, context) => {\r\n    const { refreshToken } = args;\r\n    const { services } = context;\r\n    \r\n    // Verificar refresh token\r\n    const payload = await services.auth.verifyRefreshToken(refreshToken);\r\n    \r\n    if (!payload || !payload.userId) {\r\n      throw new Error('Token inv\xe1lido o expirado');\r\n    }\r\n    \r\n    // Generar nuevo token JWT\r\n    const newToken = await services.auth.generateToken({\r\n      userId: payload.userId,\r\n      role: payload.role\r\n    });\r\n    \r\n    // Generar nuevo refresh token\r\n    const newRefreshToken = await services.auth.generateRefreshToken(payload.userId);\r\n    \r\n    return {\r\n      token: newToken,\r\n      refreshToken: newRefreshToken\r\n    };\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\r\n## Seguridad de los tokens\r\nPara garantizar la seguridad de tus tokens JWT:\r\n\r\n1. Usa un secreto fuerte : Genera un secreto aleatorio y seguro\r\n2. Configura tiempos de expiraci\xf3n cortos : Recomendamos entre 15 minutos y 1 d\xeda\r\n3. Implementa rotaci\xf3n de secretos : Cambia peri\xf3dicamente el secreto\r\n4. Usa HTTPS : Siempre transmite tokens a trav\xe9s de conexiones seguras\r\n5. Almacenamiento seguro : Guarda los tokens en localStorage o cookies HttpOnly\r\n## Revocaci\xf3n de tokens\r\nAunque los JWT son sin estado, NexusData proporciona un mecanismo de revocaci\xf3n:\r\n\r\n```javascript\r\n// Revocar token para un usuario espec\xedfico\r\nawait services.auth.revokeTokens(userId);\r\n\r\n// Revocar todos los tokens (\xfatil en caso de compromiso)\r\nawait services.auth.revokeAllTokens();\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\r\n## Uso en clientes\r\n### React\r\n```jsx\r\n// Ejemplo de uso en React con axios\r\nimport axios from 'axios';\r\n\r\n// Configurar interceptor para incluir token\r\naxios.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Funci\xf3n de login\r\nconst login = async (email, password) => {\r\n  try {\r\n    const response = await axios.post('/api/auth/login', {\r\n      email,\r\n      password\r\n    });\r\n    \r\n    const { token, refreshToken, user } = response.data;\r\n    \r\n    // Guardar tokens\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n    \r\n    return user;\r\n  } catch (error) {\r\n    console.error('Error de login:', error);\r\n    throw error;\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\r\n## Pr\xf3ximos pasos\r\n- Implementa autenticaci\xf3n multi-factor para mayor seguridad\r\n- Configura pol\xedticas de acceso basadas en roles\r\n- Explora la integraci\xf3n con OAuth para login social\r\n```plaintext\r\n\r\n2. Archivo OAuth:\r\n\r\n```markdown:c%3A%5CUsers%5CShawm%5CDesktop%5Cdocux%5Cmy-website%5Cdocs%5Cauth%5Coauth.md\r\n---\r\nsidebar_position: 2\r\n---\r\n\r\n# Autenticaci\xf3n con OAuth\r\n\r\nNexusData proporciona integraci\xf3n completa con proveedores OAuth 2.0, permitiendo a los usuarios iniciar sesi\xf3n con sus cuentas existentes de Google, GitHub, Facebook y otros servicios populares.\r\n\r\n## Configuraci\xf3n de proveedores\r\n\r\nPara habilitar la autenticaci\xf3n OAuth en tu aplicaci\xf3n NexusData:\r\n\r\n```javascript\r\n// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  auth: {\r\n    oauth: {\r\n      providers: {\r\n        google: {\r\n          clientId: process.env.GOOGLE_CLIENT_ID,\r\n          clientSecret: process.env.GOOGLE_CLIENT_SECRET,\r\n          callbackURL: '/auth/google/callback',\r\n          scope: ['profile', 'email']\r\n        },\r\n        github: {\r\n          clientId: process.env.GITHUB_CLIENT_ID,\r\n          clientSecret: process.env.GITHUB_CLIENT_SECRET,\r\n          callbackURL: '/auth/github/callback',\r\n          scope: ['user:email']\r\n        },\r\n        facebook: {\r\n          clientId: process.env.FACEBOOK_CLIENT_ID,\r\n          clientSecret: process.env.FACEBOOK_CLIENT_SECRET,\r\n          callbackURL: '/auth/facebook/callback',\r\n          scope: ['email', 'public_profile']\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\r\n## Flujo de autenticaci\xf3n OAuth\r\n1. Redirecci\xf3n al proveedor : El usuario hace clic en \"Iniciar sesi\xf3n con X\" y es redirigido al proveedor\r\n2. Autorizaci\xf3n : El usuario autoriza tu aplicaci\xf3n en el sitio del proveedor\r\n3. Callback : El proveedor redirige de vuelta a tu aplicaci\xf3n con un c\xf3digo de autorizaci\xf3n\r\n4. Intercambio de tokens : Tu aplicaci\xf3n intercambia el c\xf3digo por un token de acceso\r\n5. Obtenci\xf3n de perfil : Se obtiene la informaci\xf3n del perfil del usuario\r\n6. Creaci\xf3n/actualizaci\xf3n de usuario : Se crea o actualiza el usuario en tu base de datos\r\n7. Generaci\xf3n de JWT : Se genera un JWT para la sesi\xf3n del usuario\r\n## Endpoints generados\r\nNexusData genera autom\xe1ticamente los siguientes endpoints para cada proveedor configurado:\r\n\r\n- /auth/google - Inicia el flujo de autenticaci\xf3n con Google\r\n- /auth/google/callback - URL de callback para Google\r\n- /auth/github - Inicia el flujo de autenticaci\xf3n con GitHub\r\n- /auth/github/callback - URL de callback para GitHub\r\n- /auth/facebook - Inicia el flujo de autenticaci\xf3n con Facebook\r\n- /auth/facebook/callback - URL de callback para Facebook\r\n## Personalizaci\xf3n del proceso\r\nPuedes personalizar el comportamiento durante la autenticaci\xf3n OAuth:\r\n\r\n```javascript\r\n// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  auth: {\r\n    oauth: {\r\n      // ... configuraci\xf3n de proveedores\r\n      \r\n      // Funci\xf3n ejecutada despu\xe9s de obtener el perfil del usuario\r\n      onSuccess: async (profile, provider, context) => {\r\n        const { models, services } = context;\r\n        \r\n        // Buscar usuario existente por email o ID del proveedor\r\n        let user = await models.User.findFirst({\r\n          where: {\r\n            OR: [\r\n              { email: profile.email },\r\n              {\r\n                oauthConnections: {\r\n                  some: {\r\n                    provider,\r\n                    providerId: profile.id\r\n                  }\r\n                }\r\n              }\r\n            ]\r\n          },\r\n          include: {\r\n            oauthConnections: true\r\n          }\r\n        });\r\n        \r\n        if (!user) {\r\n          // Crear nuevo usuario\r\n          user = await models.User.create({\r\n            data: {\r\n              email: profile.email,\r\n              firstName: profile.firstName || profile.given_name,\r\n              lastName: profile.lastName || profile.family_name,\r\n              avatar: profile.picture || profile.avatar_url,\r\n              oauthConnections: {\r\n                create: {\r\n                  provider,\r\n                  providerId: profile.id,\r\n                  data: JSON.stringify(profile)\r\n                }\r\n              }\r\n            }\r\n          });\r\n          \r\n          // Enviar email de bienvenida\r\n          await services.email.send({\r\n            to: user.email,\r\n            subject: 'Bienvenido a nuestra aplicaci\xf3n',\r\n            template: 'welcome-oauth',\r\n            data: { user, provider }\r\n          });\r\n        } else if (!user.oauthConnections.some(conn => conn.provider === provider)) {\r\n          // Conectar cuenta existente con nuevo proveedor\r\n          await models.OAuthConnection.create({\r\n            data: {\r\n              userId: user.id,\r\n              provider,\r\n              providerId: profile.id,\r\n              data: JSON.stringify(profile)\r\n            }\r\n          });\r\n        }\r\n        \r\n        // Generar token JWT\r\n        const token = await services.auth.generateToken({\r\n          userId: user.id,\r\n          role: user.role\r\n        });\r\n        \r\n        // Generar refresh token\r\n        const refreshToken = await services.auth.generateRefreshToken(user.id);\r\n        \r\n        return {\r\n          token,\r\n          refreshToken,\r\n          user\r\n        };\r\n      },\r\n      \r\n      // Funci\xf3n ejecutada en caso de error\r\n      onError: async (error, provider, context) => {\r\n        console.error(`Error de autenticaci\xf3n OAuth con ${provider}:`, error);\r\n        \r\n        // Registrar error\r\n        await context.models.AuthError.create({\r\n          data: {\r\n            provider,\r\n            error: error.message,\r\n            stack: error.stack\r\n          }\r\n        });\r\n        \r\n        // Redirigir a p\xe1gina de error\r\n        return {\r\n          redirect: `/auth/error?provider=${provider}&message=${encodeURIComponent(error.message)}`\r\n        };\r\n      }\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\r\n## Implementaci\xf3n en el frontend\r\n### Botones de login social\r\n```jsx\r\n// Componente de botones de login social\r\nimport React from 'react';\r\n\r\nconst SocialLoginButtons = () => {\r\n  return (\r\n    <div className=\"social-buttons\">\r\n      <button \r\n        className=\"social-button google\"\r\n        onClick={() => window.location.href = '/auth/google'}\r\n      >\r\n        <svg>...</svg>\r\n        Continuar con Google\r\n      </button>\r\n      \r\n      <button \r\n        className=\"social-button github\"\r\n        onClick={() => window.location.href = '/auth/github'}\r\n      >\r\n        <svg>...</svg>\r\n        Continuar con GitHub\r\n      </button>\r\n      \r\n      <button \r\n        className=\"social-button facebook\"\r\n        onClick={() => window.location.href = '/auth/facebook'}\r\n      >\r\n        <svg>...</svg>\r\n        Continuar con Facebook\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SocialLoginButtons;\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\r\n## Modelo de datos para OAuth\r\n```yaml\r\n# models.yaml\r\nmodels:\r\n  User:\r\n    fields:\r\n      id:\r\n        type: uuid\r\n        primary: true\r\n      email:\r\n        type: string\r\n        unique: true\r\n      firstName:\r\n        type: string\r\n        nullable: true\r\n      lastName:\r\n        type: string\r\n        nullable: true\r\n      avatar:\r\n        type: string\r\n        nullable: true\r\n      role:\r\n        type: enum\r\n        values: [ADMIN, USER]\r\n        default: USER\r\n    relations:\r\n      oauthConnections:\r\n        type: hasMany\r\n        model: OAuthConnection\r\n        foreignKey: userId\r\n        \r\n  OAuthConnection:\r\n    fields:\r\n      id:\r\n        type: uuid\r\n        primary: true\r\n      provider:\r\n        type: string\r\n      providerId:\r\n        type: string\r\n      data:\r\n        type: json\r\n        nullable: true\r\n      createdAt:\r\n        type: datetime\r\n        default: now()\r\n      updatedAt:\r\n        type: datetime\r\n        default: now()\r\n        onUpdate: now()\r\n    relations:\r\n      user:\r\n        type: belongsTo\r\n        model: User\r\n        foreignKey: userId\r\n    indexes:\r\n      - name: provider_providerId\r\n        fields: [provider, providerId]\r\n        unique: true\r\n      - name: userId_provider\r\n        fields: [userId, provider]\r\n        unique: true\n"})}),"\n",(0,i.jsx)(e.h2,{id:"consideraciones-de-seguridad",children:"Consideraciones de seguridad"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Nunca expongas tus Client Secrets : Almac\xe9nalos en variables de entorno"}),"\n",(0,i.jsx)(e.li,{children:"Valida los emails : Algunos proveedores no verifican emails, considera marcarlos como no verificados"}),"\n",(0,i.jsx)(e.li,{children:"Configura correctamente los dominios : Registra solo dominios que controles en la consola del proveedor"}),"\n",(0,i.jsx)(e.li,{children:"Implementa CSRF protection : Usa el estado OAuth para prevenir ataques CSRF"}),"\n",(0,i.jsx)(e.li,{children:"Limita los permisos : Solicita solo los permisos m\xednimos necesarios"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"proveedores-soportados",children:"Proveedores soportados"}),"\n",(0,i.jsx)(e.p,{children:"NexusData soporta los siguientes proveedores OAuth:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Google"}),"\n",(0,i.jsx)(e.li,{children:"GitHub"}),"\n",(0,i.jsx)(e.li,{children:"Facebook"}),"\n",(0,i.jsx)(e.li,{children:"Twitter"}),"\n",(0,i.jsx)(e.li,{children:"LinkedIn"}),"\n",(0,i.jsx)(e.li,{children:"Microsoft"}),"\n",(0,i.jsx)(e.li,{children:"Apple"}),"\n",(0,i.jsx)(e.li,{children:"Discord"}),"\n",(0,i.jsx)(e.li,{children:"Slack"}),"\n",(0,i.jsx)(e.li,{children:"Spotify"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"pr\xf3ximos-pasos",children:"Pr\xf3ximos pasos"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Configura autenticaci\xf3n multi-factor para mayor seguridad"}),"\n",(0,i.jsx)(e.li,{children:"Implementa JWT personalizado para tus tokens"}),"\n",(0,i.jsx)(e.li,{children:"Explora el control de acceso basado en roles"}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-plaintext",children:"\r\n3. Archivo Roles y Permisos:\r\n\r\n```markdown:c%3A%5CUsers%5CShawm%5CDesktop%5Cdocux%5Cmy-website%5Cdocs%5Cauth%5Croles-permisos.md\r\n---\r\nsidebar_position: 3\r\n---\r\n\r\n# Roles y Permisos\r\n\r\nNexusData proporciona un sistema completo de control de acceso basado en roles (RBAC) que te permite definir qui\xe9n puede acceder a qu\xe9 recursos en tu aplicaci\xf3n.\r\n\r\n## Conceptos b\xe1sicos\r\n\r\n- **Rol**: Una funci\xf3n o posici\xf3n que un usuario puede tener (ej. Admin, Editor, Usuario)\r\n- **Permiso**: Una capacidad espec\xedfica para realizar una acci\xf3n (ej. crear:art\xedculo, leer:usuario)\r\n- **Pol\xedtica**: Reglas que determinan si una acci\xf3n est\xe1 permitida\r\n\r\n## Configuraci\xf3n de roles\r\n\r\nDefine los roles y sus permisos asociados en tu configuraci\xf3n:\r\n\r\n```javascript\r\n// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  rbac: {\r\n    roles: {\r\n      ADMIN: {\r\n        description: 'Administrador del sistema',\r\n        permissions: ['*'] // Todos los permisos\r\n      },\r\n      EDITOR: {\r\n        description: 'Editor de contenido',\r\n        permissions: [\r\n          'article:create',\r\n          'article:read',\r\n          'article:update:own', // Solo propios\r\n          'article:delete:own', // Solo propios\r\n          'comment:create',\r\n          'comment:read',\r\n          'comment:update:own',\r\n          'comment:delete:own',\r\n          'category:read'\r\n        ]\r\n      },\r\n      USER: {\r\n        description: 'Usuario regular',\r\n        permissions: [\r\n          'article:read',\r\n          'comment:create',\r\n          'comment:read',\r\n          'comment:update:own',\r\n          'comment:delete:own',\r\n          'profile:read:own',\r\n          'profile:update:own'\r\n        ]\r\n      }\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\r\n## Modelo de usuario con roles\r\n```yaml\r\n# models.yaml\r\nmodels:\r\n  User:\r\n    fields:\r\n      id:\r\n        type: uuid\r\n        primary: true\r\n      email:\r\n        type: string\r\n        unique: true\r\n      password:\r\n        type: string\r\n        private: true\r\n      firstName:\r\n        type: string\r\n        nullable: true\r\n      lastName:\r\n        type: string\r\n        nullable: true\r\n      role:\r\n        type: enum\r\n        values: [ADMIN, EDITOR, USER]\r\n        default: USER\r\n      isActive:\r\n        type: boolean\r\n        default: true\r\n    relations:\r\n      permissions:\r\n        type: hasMany\r\n        model: Permission\r\n        foreignKey: userId\r\n        \r\n  Permission:\r\n    fields:\r\n      id:\r\n        type: uuid\r\n        primary: true\r\n      action:\r\n        type: string\r\n      resource:\r\n        type: string\r\n      conditions:\r\n        type: json\r\n        nullable: true\r\n      createdAt:\r\n        type: datetime\r\n        default: now()\r\n    relations:\r\n      user:\r\n        type: belongsTo\r\n        model: User\r\n        foreignKey: userId\r\n    indexes:\r\n      - name: userId_action_resource\r\n        fields: [userId, action, resource]\r\n        unique: true\n"})}),"\n",(0,i.jsx)(e.h2,{id:"definici\xf3n-de-pol\xedticas-1",children:"Definici\xf3n de pol\xedticas"}),"\n",(0,i.jsx)(e.p,{children:"Las pol\xedticas definen reglas m\xe1s complejas para el acceso a recursos:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// src/policies/article.js\r\nmodule.exports = {\r\n  create: (user) => {\r\n    return user && (user.role === 'ADMIN' || user.role === 'EDITOR');\r\n  },\r\n  \r\n  update: async (user, context, resourceId) => {\r\n    if (!user) return false;\r\n    \r\n    // Administradores pueden actualizar cualquier art\xedculo\r\n    if (user.role === 'ADMIN') return true;\r\n    \r\n    // Editores solo pueden actualizar sus propios art\xedculos\r\n    if (user.role === 'EDITOR') {\r\n      const article = await context.models.Article.findUnique({\r\n        where: { id: resourceId }\r\n      });\r\n      return article && article.authorId === user.id;\r\n    }\r\n    \r\n    return false;\r\n  },\r\n  \r\n  delete: (user) => {\r\n    return user && user.role === 'ADMIN';\r\n  },\r\n  \r\n  read: () => {\r\n    // Cualquiera puede leer art\xedculos\r\n    return true;\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\r\n## Configuraci\xf3n de pol\xedticas\r\n```javascript\r\n// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  permissions: {\r\n    article: 'src/policies/article.js',\r\n    user: 'src/policies/user.js',\r\n    comment: 'src/policies/comment.js'\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.h2,{id:"uso-en-resolvers-graphql",children:"Uso en resolvers GraphQL"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// src/resolvers/article/updateArticle.js\r\nmodule.exports = {\r\n  name: 'updateArticle',\r\n  type: 'Article',\r\n  args: {\r\n    id: 'ID!',\r\n    title: 'String',\r\n    content: 'String',\r\n    published: 'Boolean'\r\n  },\r\n  authenticate: true, // Requiere autenticaci\xf3n\r\n  authorize: {\r\n    policy: 'article.update', // Usa la pol\xedtica definida\r\n    args: ['id'] // Pasa el ID como resourceId\r\n  },\r\n  resolve: async (parent, args, context) => {\r\n    const { id, ...data } = args;\r\n    \r\n    return context.models.Article.update({\r\n      where: { id },\r\n      data\r\n    });\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.h2,{id:"uso-en-rest-api",children:"Uso en REST API"}),"\n",(0,i.jsx)(e.p,{children:"NexusData tambi\xe9n aplica autom\xe1ticamente las pol\xedticas en los endpoints REST:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-plaintext",children:"POST /api/articles        // Verifica article.create\r\nGET /api/articles/:id     // Verifica article.read\r\nPUT /api/articles/:id     // Verifica article.update\r\nDELETE /api/articles/:id  // Verifica article.delete\n"})}),"\n",(0,i.jsx)(e.h2,{id:"verificaci\xf3n-de-permisos-en-el-c\xf3digo",children:"Verificaci\xf3n de permisos en el c\xf3digo"}),"\n",(0,i.jsx)(e.p,{children:"Puedes verificar permisos manualmente en cualquier parte de tu c\xf3digo:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// Verificar si el usuario tiene un permiso espec\xedfico\r\nconst canCreateArticle = await context.services.rbac.hasPermission(\r\n  user, \r\n  'article:create'\r\n);\r\n\r\n// Verificar si el usuario tiene acceso a un recurso espec\xedfico\r\nconst canUpdateArticle = await context.services.rbac.can(\r\n  user,\r\n  'update',\r\n  'article',\r\n  articleId\r\n);\r\n\r\n// Verificar m\xfaltiples permisos\r\nconst permissions = await context.services.rbac.checkPermissions(\r\n  user,\r\n  ['article:create', 'article:update:own', 'category:read']\r\n);\r\n// Resultado: { 'article:create': true, 'article:update:own': true, 'category:read': false }\n"})}),"\n",(0,i.jsx)(e.h2,{id:"roles-din\xe1micos",children:"Roles din\xe1micos"}),"\n",(0,i.jsx)(e.p,{children:"Adem\xe1s de los roles est\xe1ticos, puedes implementar roles din\xe1micos:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// src/services/rbac.js\r\nmodule.exports = {\r\n  // ... otros m\xe9todos\r\n  \r\n  getUserPermissions: async (userId) => {\r\n    const { models } = context;\r\n    \r\n    // Obtener usuario con su rol\r\n    const user = await models.User.findUnique({\r\n      where: { id: userId },\r\n      include: {\r\n        permissions: true\r\n      }\r\n    });\r\n    \r\n    if (!user) return [];\r\n    \r\n    // Obtener permisos base del rol\r\n    const rolePermissions = config.rbac.roles[user.role]?.permissions || [];\r\n    \r\n    // Obtener permisos personalizados del usuario\r\n    const customPermissions = user.permissions.map(p => \r\n      `${p.resource}:${p.action}${p.conditions ? ':own' : ''}`\r\n    );\r\n    \r\n    // Combinar permisos\r\n    return [...new Set([...rolePermissions, ...customPermissions])];\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.h2,{id:"jerarqu\xeda-de-roles",children:"Jerarqu\xeda de roles"}),"\n",(0,i.jsx)(e.p,{children:"Puedes implementar una jerarqu\xeda de roles donde los roles superiores heredan permisos de los inferiores:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  rbac: {\r\n    hierarchy: {\r\n      ADMIN: ['EDITOR', 'USER'],\r\n      EDITOR: ['USER']\r\n    },\r\n    roles: {\r\n      // ... definici\xf3n de roles\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,i.jsx)(e.h2,{id:"permisos-a-nivel-de-campo",children:"Permisos a nivel de campo"}),"\n",(0,i.jsx)(e.p,{children:"NexusData tambi\xe9n permite controlar el acceso a nivel de campo:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-javascript",children:"// models.yaml\r\nmodels:\r\n  Article:\r\n    fields:\r\n      id:\r\n        type: uuid\r\n        primary: true\r\n      title:\r\n        type: string\r\n      content:\r\n        type: text\r\n      status:\r\n        type: enum\r\n        values: [DRAFT, PUBLISHED, ARCHIVED]\r\n      secretNotes:\r\n        type: text\r\n        nullable: true\r\n        permissions: {\r\n          read: ['ADMIN', 'EDITOR'],\r\n          write: ['ADMIN']\r\n        }\r\n      authorId:\r\n        type: uuid\r\n    relations:\r\n      author:\r\n        type: belongsTo\r\n        model: User\r\n        foreignKey: authorId\n"})}),"\n",(0,i.jsx)(e.h2,{id:"implementaci\xf3n-en-el-frontend",children:"Implementaci\xf3n en el frontend"}),"\n",(0,i.jsx)(e.h3,{id:"react-con-context-api",children:"React con Context API"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"// src/context/AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport api from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [permissions, setPermissions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    // Cargar usuario al iniciar\r\n    const loadUser = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        \r\n        if (token) {\r\n          // Obtener datos del usuario\r\n          const { data } = await api.get('/api/auth/me');\r\n          setUser(data.user);\r\n          \r\n          // Obtener permisos del usuario\r\n          const { data: permsData } = await api.get('/api/auth/permissions');\r\n          setPermissions(permsData.permissions);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al cargar usuario:', error);\r\n        localStorage.removeItem('token');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadUser();\r\n  }, []);\r\n  \r\n  // Verificar si el usuario tiene un permiso espec\xedfico\r\n  const hasPermission = (permission) => {\r\n    if (!user) return false;\r\n    \r\n    // Administradores tienen todos los permisos\r\n    if (user.role === 'ADMIN') return true;\r\n    \r\n    // Verificar permiso espec\xedfico\r\n    return permissions.includes(permission);\r\n  };\r\n  \r\n  // Verificar si el usuario puede realizar una acci\xf3n en un recurso\r\n  const can = (action, resource, id = null) => {\r\n    if (!user) return false;\r\n    \r\n    // Administradores pueden hacer todo\r\n    if (user.role === 'ADMIN') return true;\r\n    \r\n    // Verificar permiso general\r\n    const generalPermission = `${resource}:${action}`;\r\n    if (permissions.includes(generalPermission)) return true;\r\n    \r\n    // Verificar permiso para recursos propios\r\n    const ownPermission = `${resource}:${action}:own`;\r\n    if (permissions.includes(ownPermission)) {\r\n      // Aqu\xed se podr\xeda implementar l\xf3gica para verificar si el recurso pertenece al usuario\r\n      // Por simplicidad, asumimos que si se pasa un ID, se debe verificar en el backend\r\n      return id ? null : true; // null significa \"verificar en el backend\"\r\n    }\r\n    \r\n    return false;\r\n  };\r\n  \r\n  return (\r\n    <AuthContext.Provider value={{ \r\n      user, \r\n      loading, \r\n      hasPermission, \r\n      can,\r\n      permissions\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\n"})}),"\n",(0,i.jsx)(e.h3,{id:"componente-de-protecci\xf3n-de-rutas",children:"Componente de protecci\xf3n de rutas"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-jsx",children:"// src/components/ProtectedRoute.js\r\nimport React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nconst ProtectedRoute = ({ \r\n  component: Component, \r\n  permission, \r\n  resource, \r\n  action,\r\n  ...rest \r\n}) => {\r\n  const { user, loading, hasPermission, can } = useAuth();\r\n  \r\n  if (loading) {\r\n    return <div>Cargando...</div>;\r\n  }\r\n  \r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n        // Verificar si el usuario est\xe1 autenticado\r\n        if (!user) {\r\n          return <Redirect to={{\r\n            pathname: '/login',\r\n            state: { from: props.location }\r\n          }} />;\r\n        }\r\n        \r\n        // Verificar permiso espec\xedfico si se proporciona\r\n        if (permission && !hasPermission(permission)) {\r\n          return <Redirect to=\"/forbidden\" />;\r\n        }\r\n        \r\n        // Verificar acci\xf3n en recurso si se proporciona\r\n        if (resource && action && !can(action, resource)) {\r\n          return <Redirect to=\"/forbidden\" />;\r\n        }\r\n        \r\n        // Si pasa todas las verificaciones, renderizar el componente\r\n        return <Component {...props} />;\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProtectedRoute;\n"})}),"\n",(0,i.jsx)(e.h2,{id:"pr\xf3ximos-pasos-1",children:"Pr\xf3ximos pasos"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Implementa autenticaci\xf3n JWT para tus tokens"}),"\n",(0,i.jsx)(e.li,{children:"Configura OAuth para login social"}),"\n",(0,i.jsx)(e.li,{children:"Explora la autenticaci\xf3n multi-factor para mayor seguridad"}),"\n"]})]})}function u(r={}){const{wrapper:e}={...(0,a.R)(),...r.components};return e?(0,i.jsx)(e,{...r,children:(0,i.jsx)(d,{...r})}):d(r)}},8453:(r,e,n)=>{n.d(e,{R:()=>o,x:()=>t});var s=n(6540);const i={},a=s.createContext(i);function o(r){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function t(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(i):r.components||i:o(r.components),s.createElement(a.Provider,{value:e},r.children)}}}]);