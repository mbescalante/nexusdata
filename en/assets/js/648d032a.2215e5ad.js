"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3749],{5903:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"data-sources/rest-api","title":"REST API","description":"Configuraci\xf3n y uso de APIs REST como fuentes de datos en NexusData","source":"@site/docs/data-sources/rest-api.md","sourceDirName":"data-sources","slug":"/data-sources/rest-api","permalink":"/nexusdata/en/docs/data-sources/rest-api","draft":false,"unlisted":false,"editUrl":"https://github.com/mbescalante/nexusdata/edit/main/docs/data-sources/rest-api.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"REST API","description":"Configuraci\xf3n y uso de APIs REST como fuentes de datos en NexusData"},"sidebar":"tutorialSidebar","previous":{"title":"NoSQL","permalink":"/nexusdata/en/docs/data-sources/nosql"},"next":{"title":"Estructura de Datos","permalink":"/nexusdata/en/docs/data-modeling/"}}');var s=n(4848),t=n(8453);const o={sidebar_position:4,title:"REST API",description:"Configuraci\xf3n y uso de APIs REST como fuentes de datos en NexusData"},i="REST API",c={},d=[{value:"Configuraci\xf3n B\xe1sica",id:"configuraci\xf3n-b\xe1sica",level:2},{value:"Tipos de Autenticaci\xf3n",id:"tipos-de-autenticaci\xf3n",level:2},{value:"API Key",id:"api-key",level:3},{value:"Bearer Token",id:"bearer-token",level:3},{value:"OAuth 2.0",id:"oauth-20",level:3},{value:"Autenticaci\xf3n B\xe1sica",id:"autenticaci\xf3n-b\xe1sica",level:3},{value:"Personalizada",id:"personalizada",level:3},{value:"Configuraci\xf3n Avanzada",id:"configuraci\xf3n-avanzada",level:2},{value:"Opciones de Solicitud",id:"opciones-de-solicitud",level:3},{value:"Interceptores",id:"interceptores",level:3},{value:"Definici\xf3n de Modelos",id:"definici\xf3n-de-modelos",level:2},{value:"Modelo B\xe1sico",id:"modelo-b\xe1sico",level:3},{value:"Operaciones Personalizadas",id:"operaciones-personalizadas",level:3},{value:"Uso de Modelos REST",id:"uso-de-modelos-rest",level:2},{value:"Operaciones B\xe1sicas",id:"operaciones-b\xe1sicas",level:3},{value:"Operaciones CRUD",id:"operaciones-crud",level:3},{value:"Cach\xe9 y Optimizaci\xf3n",id:"cach\xe9-y-optimizaci\xf3n",level:2},{value:"Configuraci\xf3n de Cach\xe9 con Redis",id:"configuraci\xf3n-de-cach\xe9-con-redis",level:3},{value:"Cach\xe9 Personalizado",id:"cach\xe9-personalizado",level:3},{value:"Sincronizaci\xf3n de Datos",id:"sincronizaci\xf3n-de-datos",level:2},{value:"Manejo de Errores",id:"manejo-de-errores",level:2},{value:"Monitoreo y Diagn\xf3stico",id:"monitoreo-y-diagn\xf3stico",level:2},{value:"Logging de Solicitudes",id:"logging-de-solicitudes",level:3},{value:"M\xe9tricas",id:"m\xe9tricas",level:3},{value:"Mejores Pr\xe1cticas",id:"mejores-pr\xe1cticas",level:2},{value:"Ejemplos de Integraci\xf3n",id:"ejemplos-de-integraci\xf3n",level:2},{value:"Integraci\xf3n con API de Pagos",id:"integraci\xf3n-con-api-de-pagos",level:3},{value:"Integraci\xf3n con API de Redes Sociales",id:"integraci\xf3n-con-api-de-redes-sociales",level:3},{value:"Ejemplo de uso",id:"ejemplo-de-uso",level:3},{value:"Consideraciones",id:"consideraciones",level:3}];function l(r){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...r.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"rest-api",children:"REST API"})}),"\n",(0,s.jsx)(e.p,{children:"NexusData permite integrar APIs REST externas como fuentes de datos, facilitando la conexi\xf3n con servicios de terceros y la incorporaci\xf3n de datos de m\xfaltiples or\xedgenes en tu aplicaci\xf3n."}),"\n",(0,s.jsx)(e.h2,{id:"configuraci\xf3n-b\xe1sica",children:"Configuraci\xf3n B\xe1sica"}),"\n",(0,s.jsx)(e.p,{children:"Para configurar una API REST como fuente de datos, debes definir los par\xe1metros de conexi\xf3n en tu archivo de configuraci\xf3n:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// config/datasources.js\r\nmodule.exports = {\r\n  datasources: {\r\n    weatherApi: {\r\n      type: 'rest',\r\n      baseURL: 'https://api.weatherapi.com/v1',\r\n      auth: {\r\n        type: 'apiKey',\r\n        name: 'key',\r\n        value: 'TU_API_KEY',\r\n        in: 'query' // 'query', 'header', o 'cookie'\r\n      },\r\n      defaultHeaders: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      timeout: 5000 // ms\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"tipos-de-autenticaci\xf3n",children:"Tipos de Autenticaci\xf3n"}),"\n",(0,s.jsx)(e.p,{children:"NexusData soporta varios m\xe9todos de autenticaci\xf3n para APIs REST:"}),"\n",(0,s.jsx)(e.h3,{id:"api-key",children:"API Key"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"auth: {\r\n  type: 'apiKey',\r\n  name: 'api-key', // Nombre del par\xe1metro\r\n  value: process.env.API_KEY,\r\n  in: 'header' // Ubicaci\xf3n: 'header', 'query', o 'cookie'\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"bearer-token",children:"Bearer Token"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"auth: {\r\n  type: 'bearer',\r\n  token: process.env.API_TOKEN\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"oauth-20",children:"OAuth 2.0"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"auth: {\r\n  type: 'oauth2',\r\n  tokenUrl: 'https://api.example.com/oauth/token',\r\n  clientId: process.env.OAUTH_CLIENT_ID,\r\n  clientSecret: process.env.OAUTH_CLIENT_SECRET,\r\n  scopes: ['read', 'write']\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"autenticaci\xf3n-b\xe1sica",children:"Autenticaci\xf3n B\xe1sica"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"auth: {\r\n  type: 'basic',\r\n  username: process.env.API_USERNAME,\r\n  password: process.env.API_PASSWORD\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"personalizada",children:"Personalizada"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"auth: {\r\n  type: 'custom',\r\n  prepare: async (request, context) => {\r\n    // Obtener token de alguna fuente (base de datos, servicio, etc.)\r\n    const token = await context.services.auth.getToken();\r\n    \r\n    // A\xf1adir token a la solicitud\r\n    request.headers['Authorization'] = `Custom ${token}`;\r\n    \r\n    return request;\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"configuraci\xf3n-avanzada",children:"Configuraci\xf3n Avanzada"}),"\n",(0,s.jsx)(e.h3,{id:"opciones-de-solicitud",children:"Opciones de Solicitud"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"githubApi: {\r\n  type: 'rest',\r\n  baseURL: 'https://api.github.com',\r\n  auth: {\r\n    type: 'bearer',\r\n    token: process.env.GITHUB_TOKEN\r\n  },\r\n  defaultHeaders: {\r\n    'Accept': 'application/vnd.github.v3+json',\r\n    'User-Agent': 'NexusData-App'\r\n  },\r\n  timeout: 10000,\r\n  retry: {\r\n    maxRetries: 3,\r\n    initialDelayMs: 1000,\r\n    maxDelayMs: 5000,\r\n    factor: 2,\r\n    statusCodes: [408, 429, 500, 502, 503, 504]\r\n  },\r\n  proxy: {\r\n    host: 'proxy.example.com',\r\n    port: 8080,\r\n    auth: {\r\n      username: 'proxyuser',\r\n      password: 'proxypass'\r\n    }\r\n  },\r\n  validateStatus: (status) => status >= 200 && status < 300,\r\n  decompress: true,\r\n  maxRedirects: 5\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"interceptores",children:"Interceptores"}),"\n",(0,s.jsx)(e.p,{children:"Los interceptores permiten modificar solicitudes y respuestas:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"salesforceApi: {\r\n  type: 'rest',\r\n  baseURL: 'https://yourinstance.salesforce.com/services/data/v52.0',\r\n  auth: {\r\n    type: 'bearer',\r\n    token: process.env.SF_TOKEN\r\n  },\r\n  interceptors: {\r\n    request: [\r\n      async (config, context) => {\r\n        // A\xf1adir timestamp a cada solicitud\r\n        config.headers['X-Request-Time'] = new Date().toISOString();\r\n        return config;\r\n      }\r\n    ],\r\n    response: [\r\n      async (response, context) => {\r\n        // Transformar datos de respuesta\r\n        if (response.data && response.data.records) {\r\n          response.data.items = response.data.records.map(record => ({\r\n            id: record.Id,\r\n            ...record\r\n          }));\r\n          delete response.data.records;\r\n        }\r\n        return response;\r\n      }\r\n    ],\r\n    error: [\r\n      async (error, context) => {\r\n        // Manejar errores espec\xedficos\r\n        if (error.response && error.response.status === 401) {\r\n          // Intentar renovar token\r\n          const newToken = await context.services.auth.refreshToken();\r\n          \r\n          // Actualizar configuraci\xf3n\r\n          context.datasources.salesforceApi.setAuthToken(newToken);\r\n          \r\n          // Reintentar solicitud original\r\n          return context.datasources.salesforceApi.request(error.config);\r\n        }\r\n        \r\n        throw error;\r\n      }\r\n    ]\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"definici\xf3n-de-modelos",children:"Definici\xf3n de Modelos"}),"\n",(0,s.jsx)(e.h3,{id:"modelo-b\xe1sico",children:"Modelo B\xe1sico"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// models/Clima.js\r\nmodule.exports = {\r\n  name: 'Clima',\r\n  datasource: 'weatherApi',\r\n  endpoint: '/current.json',\r\n  schema: {\r\n    id: {\r\n      type: 'string',\r\n      primaryKey: true,\r\n      generated: (data) => `${data.location.name}_${data.location.country}`\r\n    },\r\n    ciudad: {\r\n      type: 'string',\r\n      path: 'location.name'\r\n    },\r\n    pais: {\r\n      type: 'string',\r\n      path: 'location.country'\r\n    },\r\n    temperatura: {\r\n      type: 'number',\r\n      path: 'current.temp_c'\r\n    },\r\n    condicion: {\r\n      type: 'string',\r\n      path: 'current.condition.text'\r\n    },\r\n    icono: {\r\n      type: 'string',\r\n      path: 'current.condition.icon'\r\n    },\r\n    humedad: {\r\n      type: 'number',\r\n      path: 'current.humidity'\r\n    },\r\n    viento: {\r\n      type: 'number',\r\n      path: 'current.wind_kph'\r\n    },\r\n    actualizado: {\r\n      type: 'date',\r\n      path: 'current.last_updated',\r\n      transform: (value) => new Date(value)\r\n    }\r\n  },\r\n  operations: {\r\n    findByCity: {\r\n      method: 'GET',\r\n      endpoint: '/current.json',\r\n      params: {\r\n        q: '{city}'\r\n      },\r\n      transform: (response) => response.data\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(e.h3,{id:"operaciones-personalizadas",children:"Operaciones Personalizadas"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// models/Producto.js\r\nmodule.exports = {\r\n  name: 'Producto',\r\n  datasource: 'ecommerceApi',\r\n  endpoint: '/products',\r\n  schema: {\r\n    // Definici\xf3n del esquema...\r\n  },\r\n  operations: {\r\n    findAll: {\r\n      method: 'GET',\r\n      endpoint: '/products',\r\n      params: {\r\n        limit: '{limit:10}',\r\n        offset: '{offset:0}',\r\n        sort: '{sort:id}',\r\n        order: '{order:asc}'\r\n      },\r\n      transform: (response) => ({\r\n        items: response.data.products,\r\n        total: response.data.total,\r\n        limit: response.data.limit,\r\n        offset: response.data.offset\r\n      })\r\n    },\r\n    \r\n    findById: {\r\n      method: 'GET',\r\n      endpoint: '/products/{id}',\r\n      transform: (response) => response.data.product\r\n    },\r\n    \r\n    findByCategory: {\r\n      method: 'GET',\r\n      endpoint: '/products',\r\n      params: {\r\n        category: '{categoryId}',\r\n        limit: '{limit:10}',\r\n        offset: '{offset:0}'\r\n      },\r\n      transform: (response) => ({\r\n        items: response.data.products,\r\n        total: response.data.total\r\n      })\r\n    },\r\n    \r\n    search: {\r\n      method: 'GET',\r\n      endpoint: '/products/search',\r\n      params: {\r\n        q: '{query}',\r\n        limit: '{limit:10}',\r\n        offset: '{offset:0}'\r\n      },\r\n      transform: (response) => ({\r\n        items: response.data.products,\r\n        total: response.data.total\r\n      })\r\n    },\r\n    \r\n    create: {\r\n      method: 'POST',\r\n      endpoint: '/products',\r\n      body: '{data}',\r\n      transform: (response) => response.data.product\r\n    },\r\n    \r\n    update: {\r\n      method: 'PUT',\r\n      endpoint: '/products/{id}',\r\n      body: '{data}',\r\n      transform: (response) => response.data.product\r\n    },\r\n    \r\n    delete: {\r\n      method: 'DELETE',\r\n      endpoint: '/products/{id}',\r\n      transform: (response) => ({ success: response.status === 204 })\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"uso-de-modelos-rest",children:"Uso de Modelos REST"}),"\n",(0,s.jsx)(e.h3,{id:"operaciones-b\xe1sicas",children:"Operaciones B\xe1sicas"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// services/ClimaService.js\r\nmodule.exports = {\r\n  async obtenerClimaPorCiudad(ciudad) {\r\n    try {\r\n      return await this.app.models.Clima.findByCity({ city: ciudad });\r\n    } catch (error) {\r\n      this.app.logger.error('Error al obtener clima', { ciudad, error: error.message });\r\n      throw new Error(`No se pudo obtener el clima para ${ciudad}: ${error.message}`);\r\n    }\r\n  },\r\n  \r\n  async obtenerClimaMultiplesCiudades(ciudades) {\r\n    const resultados = [];\r\n    const errores = [];\r\n    \r\n    for (const ciudad of ciudades) {\r\n      try {\r\n        const clima = await this.app.models.Clima.findByCity({ city: ciudad });\r\n        resultados.push(clima);\r\n      } catch (error) {\r\n        errores.push({ ciudad, error: error.message });\r\n      }\r\n    }\r\n    \r\n    return {\r\n      resultados,\r\n      errores,\r\n      total: resultados.length,\r\n      totalErrores: errores.length\r\n    };\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(e.h3,{id:"operaciones-crud",children:"Operaciones CRUD"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// services/ProductoService.js\r\nmodule.exports = {\r\n  async listarProductos(opciones = {}) {\r\n    const { limite = 10, pagina = 1, ordenar = 'id', direccion = 'asc' } = opciones;\r\n    \r\n    return await this.app.models.Producto.findAll({\r\n      limit: limite,\r\n      offset: (pagina - 1) * limite,\r\n      sort: ordenar,\r\n      order: direccion\r\n    });\r\n  },\r\n  \r\n  async obtenerProducto(id) {\r\n    return await this.app.models.Producto.findById({ id });\r\n  },\r\n  \r\n  async buscarProductos(termino, opciones = {}) {\r\n    const { limite = 10, pagina = 1 } = opciones;\r\n    \r\n    return await this.app.models.Producto.search({\r\n      query: termino,\r\n      limit: limite,\r\n      offset: (pagina - 1) * limite\r\n    });\r\n  },\r\n  \r\n  async crearProducto(datos) {\r\n    return await this.app.models.Producto.create({ data: datos });\r\n  },\r\n  \r\n  async actualizarProducto(id, datos) {\r\n    return await this.app.models.Producto.update({ id, data: datos });\r\n  },\r\n  \r\n  async eliminarProducto(id) {\r\n    return await this.app.models.Producto.delete({ id });\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"cach\xe9-y-optimizaci\xf3n",children:"Cach\xe9 y Optimizaci\xf3n"}),"\n",(0,s.jsx)(e.p,{children:"NexusData permite implementar estrategias de cach\xe9 para optimizar el rendimiento y reducir las llamadas a APIs externas:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// config/datasources.js\r\nmodule.exports = {\r\n  datasources: {\r\n    weatherApi: {\r\n      type: 'rest',\r\n      baseURL: 'https://api.weatherapi.com/v1',\r\n      auth: {\r\n        type: 'apiKey',\r\n        name: 'key',\r\n        value: process.env.WEATHER_API_KEY,\r\n        in: 'query'\r\n      },\r\n      cache: {\r\n        enabled: true,\r\n        ttl: 3600, // Tiempo de vida en segundos (1 hora)\r\n        storage: 'memory', // 'memory', 'redis', o 'custom'\r\n        maxSize: 100, // N\xfamero m\xe1ximo de entradas en cach\xe9 (para 'memory')\r\n        keyGenerator: (config) => {\r\n          // Generar clave de cach\xe9 basada en URL y par\xe1metros\r\n          const url = config.url;\r\n          const params = new URLSearchParams(config.params).toString();\r\n          return `${url}?${params}`;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(e.h3,{id:"configuraci\xf3n-de-cach\xe9-con-redis",children:"Configuraci\xf3n de Cach\xe9 con Redis"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"weatherApi: {\r\n  // Configuraci\xf3n b\xe1sica...\r\n  cache: {\r\n    enabled: true,\r\n    ttl: 3600,\r\n    storage: 'redis',\r\n    redis: {\r\n      host: 'localhost',\r\n      port: 6379,\r\n      password: process.env.REDIS_PASSWORD,\r\n      db: 0,\r\n      keyPrefix: 'weather_api:'\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"cach\xe9-personalizado",children:"Cach\xe9 Personalizado"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"weatherApi: {\r\n  // Configuraci\xf3n b\xe1sica...\r\n  cache: {\r\n    enabled: true,\r\n    storage: 'custom',\r\n    get: async (key, context) => {\r\n      // Implementaci\xf3n personalizada para obtener de cach\xe9\r\n      return await context.services.cache.get(key);\r\n    },\r\n    set: async (key, value, ttl, context) => {\r\n      // Implementaci\xf3n personalizada para guardar en cach\xe9\r\n      await context.services.cache.set(key, value, ttl);\r\n    },\r\n    invalidate: async (key, context) => {\r\n      // Implementaci\xf3n personalizada para invalidar cach\xe9\r\n      await context.services.cache.delete(key);\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"sincronizaci\xf3n-de-datos",children:"Sincronizaci\xf3n de Datos"}),"\n",(0,s.jsx)(e.p,{children:"NexusData permite sincronizar datos de APIs externas con tu base de datos local:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// services/SincronizacionService.js\r\nmodule.exports = {\r\n  async sincronizarProductos() {\r\n    const db = this.app.datasources.postgres;\r\n    const api = this.app.models.Producto;\r\n    \r\n    let pagina = 1;\r\n    const limite = 100;\r\n    let totalSincronizados = 0;\r\n    let hayMasPaginas = true;\r\n    \r\n    this.app.logger.info('Iniciando sincronizaci\xf3n de productos');\r\n    \r\n    while (hayMasPaginas) {\r\n      // Obtener datos de la API\r\n      const { items, total } = await api.findAll({\r\n        limit: limite,\r\n        offset: (pagina - 1) * limite\r\n      });\r\n      \r\n      if (!items || items.length === 0) {\r\n        hayMasPaginas = false;\r\n        break;\r\n      }\r\n      \r\n      // Procesar en lotes usando transacci\xf3n\r\n      await db.transaction(async (tx) => {\r\n        for (const item of items) {\r\n          // Verificar si el producto ya existe\r\n          const existente = await tx.findOne('ProductoLocal', {\r\n            where: { externalId: item.id }\r\n          });\r\n          \r\n          if (existente) {\r\n            // Actualizar producto existente\r\n            await tx.update('ProductoLocal', {\r\n              id: existente.id,\r\n              nombre: item.nombre,\r\n              descripcion: item.descripcion,\r\n              precio: item.precio,\r\n              categoria: item.categoria,\r\n              imagen: item.imagen,\r\n              ultimaSincronizacion: new Date()\r\n            });\r\n          } else {\r\n            // Crear nuevo producto\r\n            await tx.create('ProductoLocal', {\r\n              externalId: item.id,\r\n              nombre: item.nombre,\r\n              descripcion: item.descripcion,\r\n              precio: item.precio,\r\n              categoria: item.categoria,\r\n              imagen: item.imagen,\r\n              creado: new Date(),\r\n              ultimaSincronizacion: new Date()\r\n            });\r\n          }\r\n        }\r\n      });\r\n      \r\n      totalSincronizados += items.length;\r\n      this.app.logger.info(`Sincronizados ${totalSincronizados} de ${total} productos`);\r\n      \r\n      // Verificar si hay m\xe1s p\xe1ginas\r\n      hayMasPaginas = totalSincronizados < total;\r\n      pagina++;\r\n    }\r\n    \r\n    this.app.logger.info(`Sincronizaci\xf3n completada. Total: ${totalSincronizados} productos`);\r\n    \r\n    return {\r\n      total: totalSincronizados,\r\n      fecha: new Date()\r\n    };\r\n  },\r\n  \r\n  async programarSincronizacion() {\r\n    // Programar tarea peri\xf3dica\r\n    this.app.scheduler.schedule('sincronizacion.productos', {\r\n      cron: '0 0 * * *', // Ejecutar diariamente a medianoche\r\n      handler: async () => {\r\n        await this.sincronizarProductos();\r\n      }\r\n    });\r\n    \r\n    return {\r\n      mensaje: 'Sincronizaci\xf3n programada correctamente',\r\n      proximaEjecucion: this.app.scheduler.getNextRun('sincronizacion.productos')\r\n    };\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"manejo-de-errores",children:"Manejo de Errores"}),"\n",(0,s.jsx)(e.p,{children:"Es importante implementar un manejo adecuado de errores al trabajar con APIs externas:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// services/ApiService.js\r\nmodule.exports = {\r\n  async ejecutarConReintentos(fn, opciones = {}) {\r\n    const {\r\n      maxIntentos = 3,\r\n      retrasoInicial = 1000,\r\n      factorRetraso = 2,\r\n      codigosReintentar = [429, 500, 502, 503, 504]\r\n    } = opciones;\r\n    \r\n    let intento = 0;\r\n    let retraso = retrasoInicial;\r\n    \r\n    while (intento < maxIntentos) {\r\n      try {\r\n        return await fn();\r\n      } catch (error) {\r\n        intento++;\r\n        \r\n        // Verificar si debemos reintentar\r\n        const codigoError = error.response?.status;\r\n        const debeReintentar = intento < maxIntentos && \r\n          codigosReintentar.includes(codigoError);\r\n        \r\n        if (!debeReintentar) {\r\n          throw error;\r\n        }\r\n        \r\n        // Registrar intento fallido\r\n        this.app.logger.warn(`Intento ${intento}/${maxIntentos} fallido. Reintentando en ${retraso}ms`, {\r\n          error: error.message,\r\n          codigo: codigoError\r\n        });\r\n        \r\n        // Esperar antes de reintentar\r\n        await new Promise(resolve => setTimeout(resolve, retraso));\r\n        \r\n        // Aumentar retraso para el pr\xf3ximo intento\r\n        retraso *= factorRetraso;\r\n      }\r\n    }\r\n  },\r\n  \r\n  async manejarErrorApi(error) {\r\n    if (!error.response) {\r\n      // Error de red o timeout\r\n      return {\r\n        tipo: 'red',\r\n        mensaje: 'Error de conexi\xf3n con el servidor',\r\n        detalles: error.message\r\n      };\r\n    }\r\n    \r\n    const { status, data } = error.response;\r\n    \r\n    switch (status) {\r\n      case 400:\r\n        return {\r\n          tipo: 'validacion',\r\n          mensaje: 'Datos de solicitud inv\xe1lidos',\r\n          detalles: data.errors || data.message || 'Verifica los datos enviados'\r\n        };\r\n      \r\n      case 401:\r\n        // Posiblemente token expirado\r\n        return {\r\n          tipo: 'autenticacion',\r\n          mensaje: 'Credenciales inv\xe1lidas o expiradas',\r\n          detalles: data.message || 'Es necesario volver a autenticarse'\r\n        };\r\n      \r\n      case 403:\r\n        return {\r\n          tipo: 'autorizacion',\r\n          mensaje: 'No tienes permisos para realizar esta acci\xf3n',\r\n          detalles: data.message || 'Contacta al administrador'\r\n        };\r\n      \r\n      case 404:\r\n        return {\r\n          tipo: 'notFound',\r\n          mensaje: 'Recurso no encontrado',\r\n          detalles: data.message || 'El recurso solicitado no existe'\r\n        };\r\n      \r\n      case 429:\r\n        return {\r\n          tipo: 'limitacion',\r\n          mensaje: 'Has excedido el l\xedmite de solicitudes',\r\n          detalles: data.message || 'Intenta nuevamente m\xe1s tarde',\r\n          esperarSegundos: parseInt(error.response.headers['retry-after'] || '60')\r\n        };\r\n      \r\n      case 500:\r\n      case 502:\r\n      case 503:\r\n      case 504:\r\n        return {\r\n          tipo: 'servidor',\r\n          mensaje: 'Error en el servidor',\r\n          detalles: data.message || 'Intenta nuevamente m\xe1s tarde'\r\n        };\r\n      \r\n      default:\r\n        return {\r\n          tipo: 'desconocido',\r\n          mensaje: `Error ${status}`,\r\n          detalles: data.message || 'Error desconocido'\r\n        };\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"monitoreo-y-diagn\xf3stico",children:"Monitoreo y Diagn\xf3stico"}),"\n",(0,s.jsx)(e.h3,{id:"logging-de-solicitudes",children:"Logging de Solicitudes"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// config/datasources.js\r\nmodule.exports = {\r\n  datasources: {\r\n    externalApi: {\r\n      type: 'rest',\r\n      baseURL: 'https://api.example.com',\r\n      // Configuraci\xf3n b\xe1sica...\r\n      logging: {\r\n        enabled: true,\r\n        level: 'debug', // 'debug', 'info', 'warn', 'error'\r\n        request: true,\r\n        response: true,\r\n        error: true,\r\n        // Funci\xf3n personalizada para formatear logs\r\n        formatter: (info) => {\r\n          const { config, response, error, duration } = info;\r\n          \r\n          if (error) {\r\n            return {\r\n              level: 'error',\r\n              message: `API Error: ${error.message}`,\r\n              method: config.method,\r\n              url: config.url,\r\n              status: error.response?.status,\r\n              duration: `${duration}ms`,\r\n              error: {\r\n                message: error.message,\r\n                stack: error.stack,\r\n                response: error.response?.data\r\n              }\r\n            };\r\n          }\r\n          \r\n          return {\r\n            level: 'info',\r\n            message: `API Request: ${config.method} ${config.url}`,\r\n            method: config.method,\r\n            url: config.url,\r\n            status: response?.status,\r\n            duration: `${duration}ms`,\r\n            requestSize: JSON.stringify(config.data || {}).length,\r\n            responseSize: JSON.stringify(response?.data || {}).length\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(e.h3,{id:"m\xe9tricas",children:"M\xe9tricas"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// plugins/api-metrics.js\r\nmodule.exports = function(context) {\r\n  // Registrar interceptor para todas las fuentes de datos REST\r\n  Object.values(context.datasources)\r\n    .filter(ds => ds.type === 'rest')\r\n    .forEach(datasource => {\r\n      // A\xf1adir interceptor para m\xe9tricas\r\n      datasource.interceptors.request.push(async (config) => {\r\n        // A\xf1adir timestamp para medir duraci\xf3n\r\n        config.metadata = {\r\n          startTime: Date.now()\r\n        };\r\n        return config;\r\n      });\r\n      \r\n      datasource.interceptors.response.push(async (response) => {\r\n        const duration = Date.now() - response.config.metadata.startTime;\r\n        \r\n        // Registrar m\xe9trica\r\n        context.metrics.record('api.request', {\r\n          value: duration,\r\n          tags: {\r\n            datasource: datasource.name,\r\n            method: response.config.method,\r\n            endpoint: response.config.url,\r\n            status: response.status\r\n          }\r\n        });\r\n        \r\n        // Histograma de duraci\xf3n\r\n        context.metrics.histogram('api.request.duration', duration, {\r\n          datasource: datasource.name\r\n        });\r\n        \r\n        // Contador de solicitudes\r\n        context.metrics.increment('api.request.count', {\r\n          datasource: datasource.name,\r\n          status: `${Math.floor(response.status / 100)}xx`\r\n        });\r\n        \r\n        return response;\r\n      });\r\n      \r\n      datasource.interceptors.error.push(async (error) => {\r\n        const duration = Date.now() - (error.config?.metadata?.startTime || Date.now());\r\n        \r\n        // Registrar error\r\n        context.metrics.increment('api.request.error', {\r\n          datasource: datasource.name,\r\n          method: error.config?.method,\r\n          endpoint: error.config?.url,\r\n          status: error.response?.status || 'network',\r\n          errorCode: error.code || 'unknown'\r\n        });\r\n        \r\n        // Histograma de duraci\xf3n de errores\r\n        context.metrics.histogram('api.request.error.duration', duration, {\r\n          datasource: datasource.name\r\n        });\r\n        \r\n        throw error;\r\n      });\r\n    });\r\n  \r\n  // Exponer endpoint para m\xe9tricas\r\n  context.http.get('/metrics/api', async (req, res) => {\r\n    const metrics = await context.metrics.getMetrics('api.*');\r\n    res.json(metrics);\r\n  });\r\n};\n"})}),"\n",(0,s.jsx)(e.h2,{id:"mejores-pr\xe1cticas",children:"Mejores Pr\xe1cticas"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Seguridad"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Nunca almacenes credenciales en el c\xf3digo fuente"}),"\n",(0,s.jsx)(e.li,{children:"Utiliza variables de entorno o servicios de gesti\xf3n de secretos"}),"\n",(0,s.jsx)(e.li,{children:"Implementa HTTPS para todas las comunicaciones"}),"\n",(0,s.jsx)(e.li,{children:"Valida y sanitiza todas las entradas y salidas"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Rendimiento"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Implementa cach\xe9 para reducir llamadas a APIs externas"}),"\n",(0,s.jsx)(e.li,{children:"Utiliza compresi\xf3n para reducir el tama\xf1o de las respuestas"}),"\n",(0,s.jsx)(e.li,{children:"Implementa solicitudes en paralelo cuando sea posible"}),"\n",(0,s.jsx)(e.li,{children:"Monitorea y optimiza el tiempo de respuesta"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Resiliencia"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Implementa reintentos con backoff exponencial"}),"\n",(0,s.jsx)(e.li,{children:"Utiliza circuit breakers para evitar sobrecarga de servicios"}),"\n",(0,s.jsx)(e.li,{children:"Implementa timeouts adecuados"}),"\n",(0,s.jsx)(e.li,{children:"Prep\xe1rate para manejar interrupciones de servicio"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Mantenimiento"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Documenta todas las integraciones con APIs externas"}),"\n",(0,s.jsx)(e.li,{children:"Mant\xe9n un registro de versiones de API utilizadas"}),"\n",(0,s.jsx)(e.li,{children:"Implementa pruebas automatizadas para integraciones"}),"\n",(0,s.jsx)(e.li,{children:"Monitorea cambios en las APIs externas"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"ejemplos-de-integraci\xf3n",children:"Ejemplos de Integraci\xf3n"}),"\n",(0,s.jsx)(e.h3,{id:"integraci\xf3n-con-api-de-pagos",children:"Integraci\xf3n con API de Pagos"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// config/datasources.js\r\nmodule.exports = {\r\n  datasources: {\r\n    stripe: {\r\n      type: 'rest',\r\n      baseURL: 'https://api.stripe.com/v1',\r\n      auth: {\r\n        type: 'basic',\r\n        username: process.env.STRIPE_SECRET_KEY,\r\n        password: ''\r\n      },\r\n      defaultHeaders: {\r\n        'Content-Type': 'application/x-www-form-urlencoded'\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// models/Pago.js\r\nmodule.exports = {\r\n  name: 'Pago',\r\n  datasource: 'stripe',\r\n  endpoint: '/charges',\r\n  operations: {\r\n    create: {\r\n      method: 'POST',\r\n      endpoint: '/charges',\r\n      body: '{data}',\r\n      transform: (response) => response.data\r\n    },\r\n    retrieve: {\r\n      method: 'GET',\r\n      endpoint: '/charges/{id}',\r\n      transform: (response) => response.data\r\n    },\r\n    list: {\r\n      method: 'GET',\r\n      endpoint: '/charges',\r\n      params: {\r\n        limit: '{limit:10}',\r\n        starting_after: '{startingAfter}',\r\n        customer: '{customerId}'\r\n      },\r\n      transform: (response) => ({\r\n        items: response.data.data,\r\n        hasMore: response.data.has_more,\r\n        lastId: response.data.data.length > 0 ? response.data.data[response.data.data.length - 1].id : null\r\n      })\r\n    },\r\n    refund: {\r\n      method: 'POST',\r\n      endpoint: '/refunds',\r\n      body: {\r\n        charge: '{chargeId}',\r\n        amount: '{amount}',\r\n        reason: '{reason}'\r\n      },\r\n      transform: (response) => response.data\r\n    }\r\n  }\r\n};\r\n\r\n// services/PagoService.js\r\nmodule.exports = {\r\n  async procesarPago(datos) {\r\n    try {\r\n      const { monto, moneda, descripcion, cliente, tarjeta } = datos;\r\n      \r\n      // Crear pago en Stripe\r\n      const pago = await this.app.models.Pago.create({\r\n        data: {\r\n          amount: monto * 100, // Convertir a centavos\r\n          currency: moneda || 'usd',\r\n          description: descripcion,\r\n          customer: cliente,\r\n          source: tarjeta,\r\n          metadata: {\r\n            orderId: datos.ordenId\r\n          }\r\n        }\r\n      });\r\n      \r\n      // Registrar pago en base de datos local\r\n      await this.app.models.TransaccionPago.create({\r\n        externalId: pago.id,\r\n        monto: monto,\r\n        moneda: moneda || 'usd',\r\n        estado: pago.status,\r\n        proveedor: 'stripe',\r\n        clienteId: datos.clienteId,\r\n        ordenId: datos.ordenId,\r\n        metadatos: {\r\n          tarjeta: {\r\n            ultimos4: pago.source.last4,\r\n            marca: pago.source.brand\r\n          },\r\n          recibo: pago.receipt_url\r\n        },\r\n        createdAt: new Date()\r\n      });\r\n      \r\n      return {\r\n        id: pago.id,\r\n        estado: pago.status,\r\n        monto: pago.amount / 100,\r\n        moneda: pago.currency,\r\n        recibo: pago.receipt_url\r\n      };\r\n    } catch (error) {\r\n      this.app.logger.error('Error al procesar pago', { error: error.message });\r\n      \r\n      // Manejar errores espec\xedficos de Stripe\r\n      if (error.response && error.response.data) {\r\n        const stripeError = error.response.data.error;\r\n        \r\n        throw new Error(`Error de pago: ${stripeError.message} (${stripeError.code})`);\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(e.h3,{id:"integraci\xf3n-con-api-de-redes-sociales",children:"Integraci\xf3n con API de Redes Sociales"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// config/datasources.js\r\nmodule.exports = {\r\n  datasources: {\r\n    twitter: {\r\n      type: 'rest',\r\n      baseURL: 'https://api.twitter.com/2',\r\n      auth: {\r\n        type: 'oauth2',\r\n        tokenUrl: 'https://api.twitter.com/oauth2/token',\r\n        clientId: process.env.TWITTER_CLIENT_ID,\r\n        clientSecret: process.env.TWITTER_CLIENT_SECRET\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// models/Tweet.js\r\nmodule.exports = {\r\n  name: 'Tweet',\r\n  datasource: 'twitter',\r\n  operations: {\r\n    search: {\r\n      method: 'GET',\r\n      endpoint: '/tweets/search/recent',\r\n      params: {\r\n        query: '{query}',\r\n        max_results: '{maxResults:10}',\r\n        next_token: '{nextToken}',\r\n        expansions: 'author_id,attachments.media_keys',\r\n        'tweet.fields': 'created_at,public_metrics,entities',\r\n        'user.fields': 'name,username,profile_image_url'\r\n      },\r\n      transform: (response) => ({\r\n        \r\n      })\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(e.h3,{id:"ejemplo-de-uso",children:"Ejemplo de uso"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"// services/TwitterService.js\r\nmodule.exports = {\r\n  async buscarTweets(query, maxResults = 10) {\r\n    try {\r\n      const tweets = await this.app.models.Tweet.search({\r\n        query: query,\r\n        maxResults: maxResults\r\n      }); \r\n    } \r\n  } \r\n};\n"})}),"\n",(0,s.jsx)(e.h3,{id:"consideraciones",children:"Consideraciones"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"La configuraci\xf3n de la API de Twitter se almacena en un archivo de configuraci\xf3n"}),"\n",(0,s.jsx)(e.li,{children:"El modelo de datos para la b\xfasqueda de tweets se define en el archivo `models/Tweet"}),"\n",(0,s.jsx)(e.li,{children:"El servicio de Twitter utiliza el modelo de datos para realizar la b\xfasqueda de tweets"}),"\n",(0,s.jsxs)(e.li,{children:["La b\xfasqueda de tweets se realiza mediante un m\xe9todo ",(0,s.jsx)(e.code,{children:"search"})," en el modelo de datos"]}),"\n",(0,s.jsxs)(e.li,{children:["El m\xe9todo ",(0,s.jsx)(e.code,{children:"search"})," utiliza el m\xe9todo ",(0,s.jsx)(e.code,{children:"GET"})," para realizar la b\xfasqueda de tweets"]}),"\n",(0,s.jsxs)(e.li,{children:["El m\xe9todo ",(0,s.jsx)(e.code,{children:"search"})," utiliza los par\xe1metros ",(0,s.jsx)(e.code,{children:"query"}),", ",(0,s.jsx)(e.code,{children:"maxResults"})," y ",(0,s.jsx)(e.code,{children:"nextToken"})," para realizar la b\xfasqueda de tweets"]}),"\n",(0,s.jsxs)(e.li,{children:["El m\xe9todo ",(0,s.jsx)(e.code,{children:"search"})," utiliza la transformaci\xf3n para convertir la respuesta de la API de Twitter en un objeto de datos"]}),"\n",(0,s.jsxs)(e.li,{children:["El servicio de Twitter utiliza el m\xe9todo ",(0,s.jsx)(e.code,{children:"search"})," del modelo de datos para realizar la b\xfasqueda de tweets"]}),"\n"]})]})}function p(r={}){const{wrapper:e}={...(0,t.R)(),...r.components};return e?(0,s.jsx)(e,{...r,children:(0,s.jsx)(l,{...r})}):l(r)}},8453:(r,e,n)=>{n.d(e,{R:()=>o,x:()=>i});var a=n(6540);const s={},t=a.createContext(s);function o(r){const e=a.useContext(t);return a.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function i(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(s):r.components||s:o(r.components),a.createElement(t.Provider,{value:e},r.children)}}}]);