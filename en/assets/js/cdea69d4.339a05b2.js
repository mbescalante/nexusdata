"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6735],{8136:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"business-logic/flujos","title":"Flujos de Trabajo","description":"Implementaci\xf3n de flujos de trabajo y procesos de negocio en NexusData","source":"@site/docs/business-logic/flujos.md","sourceDirName":"business-logic","slug":"/business-logic/flujos","permalink":"/nexusdata/en/docs/business-logic/flujos","draft":false,"unlisted":false,"editUrl":"https://github.com/mbescalante/nexusdata/edit/main/docs/business-logic/flujos.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"title":"Flujos de Trabajo","description":"Implementaci\xf3n de flujos de trabajo y procesos de negocio en NexusData"},"sidebar":"tutorialSidebar","previous":{"title":"Tareas en Segundo Plano","permalink":"/nexusdata/en/docs/business-logic/tareas"},"next":{"title":"Plugins","permalink":"/nexusdata/en/docs/plugins/"}}');var o=r(4848),i=r(8453);const a={sidebar_position:6,title:"Flujos de Trabajo",description:"Implementaci\xf3n de flujos de trabajo y procesos de negocio en NexusData"},s="Flujos de Trabajo",d={},c=[{value:"Conceptos b\xe1sicos",id:"conceptos-b\xe1sicos",level:2},{value:"\xbfQu\xe9 son los flujos de trabajo?",id:"qu\xe9-son-los-flujos-de-trabajo",level:3},{value:"Componentes principales",id:"componentes-principales",level:3},{value:"Configuraci\xf3n del sistema de flujos",id:"configuraci\xf3n-del-sistema-de-flujos",level:2},{value:"Definici\xf3n de flujos de trabajo",id:"definici\xf3n-de-flujos-de-trabajo",level:2},{value:"Estructura b\xe1sica",id:"estructura-b\xe1sica",level:3},{value:"Registro de flujos de trabajo",id:"registro-de-flujos-de-trabajo",level:3},{value:"Tipos de nodos",id:"tipos-de-nodos",level:2},{value:"Nodo de inicio",id:"nodo-de-inicio",level:3},{value:"Nodo de acci\xf3n",id:"nodo-de-acci\xf3n",level:3},{value:"Nodo de decisi\xf3n",id:"nodo-de-decisi\xf3n",level:3},{value:"Nodo de espera",id:"nodo-de-espera",level:3},{value:"Nodo de subproceso",id:"nodo-de-subproceso",level:3},{value:"Nodo paralelo",id:"nodo-paralelo",level:3},{value:"Nodo de fin",id:"nodo-de-fin",level:3},{value:"Iniciando flujos de trabajo",id:"iniciando-flujos-de-trabajo",level:2},{value:"Inicio manual",id:"inicio-manual",level:3},{value:"Inicio autom\xe1tico mediante eventos",id:"inicio-autom\xe1tico-mediante-eventos",level:3},{value:"Interacci\xf3n con flujos en ejecuci\xf3n",id:"interacci\xf3n-con-flujos-en-ejecuci\xf3n",level:2},{value:"Env\xedo de eventos",id:"env\xedo-de-eventos",level:3},{value:"Consulta de estado",id:"consulta-de-estado",level:3},{value:"Intervenci\xf3n manual",id:"intervenci\xf3n-manual",level:3},{value:"Ejemplos de flujos comunes",id:"ejemplos-de-flujos-comunes",level:2},{value:"Flujo de incorporaci\xf3n de clientes",id:"flujo-de-incorporaci\xf3n-de-clientes",level:3},{value:"Flujo de procesamiento de reembolsos",id:"flujo-de-procesamiento-de-reembolsos",level:3},{value:"Interacci\xf3n con flujos en ejecuci\xf3n",id:"interacci\xf3n-con-flujos-en-ejecuci\xf3n-1",level:2},{value:"Env\xedo de eventos",id:"env\xedo-de-eventos-1",level:3},{value:"Consulta de estado",id:"consulta-de-estado-1",level:3},{value:"Intervenci\xf3n manual",id:"intervenci\xf3n-manual-1",level:3},{value:"Visualizaci\xf3n y monitoreo de flujos",id:"visualizaci\xf3n-y-monitoreo-de-flujos",level:2},{value:"Panel de control de flujos",id:"panel-de-control-de-flujos",level:3},{value:"Mejores pr\xe1cticas",id:"mejores-pr\xe1cticas",level:2},{value:"Patrones comunes",id:"patrones-comunes",level:2},{value:"Patr\xf3n de aprobaci\xf3n",id:"patr\xf3n-de-aprobaci\xf3n",level:3},{value:"Patr\xf3n de escalamiento",id:"patr\xf3n-de-escalamiento",level:3},{value:"Patr\xf3n de compensaci\xf3n",id:"patr\xf3n-de-compensaci\xf3n",level:3},{value:"Mejores pr\xe1cticas",id:"mejores-pr\xe1cticas-1",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"flujos-de-trabajo",children:"Flujos de Trabajo"})}),"\n",(0,o.jsx)(n.p,{children:"Los flujos de trabajo te permiten modelar y automatizar procesos de negocio complejos, definiendo secuencias de pasos, condiciones y acciones que se ejecutan en respuesta a eventos espec\xedficos."}),"\n",(0,o.jsx)(n.h2,{id:"conceptos-b\xe1sicos",children:"Conceptos b\xe1sicos"}),"\n",(0,o.jsx)(n.h3,{id:"qu\xe9-son-los-flujos-de-trabajo",children:"\xbfQu\xe9 son los flujos de trabajo?"}),"\n",(0,o.jsx)(n.p,{children:"Un flujo de trabajo es una secuencia de pasos conectados que representan un proceso de negocio. Cada paso puede ser una acci\xf3n, una decisi\xf3n, una espera o una subrutina. Los flujos de trabajo pueden ser:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Lineales"}),": Una secuencia simple de pasos que se ejecutan en orden"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Condicionales"}),": Incluyen ramas y decisiones basadas en condiciones"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Paralelos"}),": Permiten la ejecuci\xf3n simult\xe1nea de m\xfaltiples ramas"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Iterativos"}),": Incluyen bucles y repeticiones"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"componentes-principales",children:"Componentes principales"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Nodos"}),": Representan pasos individuales en el flujo"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Transiciones"}),": Conexiones entre nodos que definen el flujo"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Condiciones"}),": Reglas que determinan qu\xe9 camino seguir"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Acciones"}),": Operaciones que se ejecutan en cada paso"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Eventos"}),": Desencadenantes que inician o afectan el flujo"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Estados"}),": Representan el progreso del flujo"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"configuraci\xf3n-del-sistema-de-flujos",children:"Configuraci\xf3n del sistema de flujos"}),"\n",(0,o.jsx)(n.p,{children:"Para utilizar el sistema de flujos de trabajo, debes configurarlo en tu archivo de configuraci\xf3n:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  workflows: {\r\n    enabled: true,\r\n    storage: {\r\n      driver: 'database', // 'database', 'redis', 'memory'\r\n      // Configuraci\xf3n espec\xedfica del driver\r\n    },\r\n    execution: {\r\n      concurrency: 10, // N\xfamero m\xe1ximo de flujos concurrentes\r\n      timeout: 3600000, // Tiempo m\xe1ximo de ejecuci\xf3n (ms)\r\n      retries: 3 // N\xfamero de reintentos por defecto\r\n    },\r\n    monitoring: {\r\n      enabled: true,\r\n      retention: {\r\n        completed: 30, // D\xedas para retener flujos completados\r\n        failed: 90 // D\xedas para retener flujos fallidos\r\n      }\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"definici\xf3n-de-flujos-de-trabajo",children:"Definici\xf3n de flujos de trabajo"}),"\n",(0,o.jsx)(n.h3,{id:"estructura-b\xe1sica",children:"Estructura b\xe1sica"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/workflows/OrderProcessingWorkflow.js\r\nimport { Workflow } from '@nexusdata/core';\r\n\r\nclass OrderProcessingWorkflow extends Workflow {\r\n  // Nombre \xfanico del flujo\r\n  static name = 'order-processing';\r\n  \r\n  // Versi\xf3n del flujo (para migraciones)\r\n  static version = '1.0.0';\r\n  \r\n  // Descripci\xf3n del flujo\r\n  static description = 'Procesa pedidos desde la creaci\xf3n hasta la entrega';\r\n  \r\n  // Definici\xf3n del flujo\r\n  static definition = {\r\n    // Nodo inicial\r\n    start: {\r\n      type: 'start',\r\n      next: 'validate_order'\r\n    },\r\n    \r\n    // Validaci\xf3n del pedido\r\n    validate_order: {\r\n      type: 'action',\r\n      action: 'validateOrder',\r\n      next: 'check_inventory'\r\n    },\r\n    \r\n    // Verificaci\xf3n de inventario\r\n    check_inventory: {\r\n      type: 'action',\r\n      action: 'checkInventory',\r\n      next: 'inventory_decision'\r\n    },\r\n    \r\n    // Decisi\xf3n basada en inventario\r\n    inventory_decision: {\r\n      type: 'decision',\r\n      decision: 'inventoryAvailable',\r\n      outcomes: {\r\n        true: 'process_payment',\r\n        false: 'notify_backorder'\r\n      }\r\n    },\r\n    \r\n    // Notificaci\xf3n de pedido pendiente\r\n    notify_backorder: {\r\n      type: 'action',\r\n      action: 'notifyBackorder',\r\n      next: 'wait_for_inventory'\r\n    },\r\n    \r\n    // Espera por inventario\r\n    wait_for_inventory: {\r\n      type: 'wait',\r\n      event: 'inventory.available',\r\n      timeout: {\r\n        duration: '7d',\r\n        next: 'cancel_order'\r\n      },\r\n      next: 'process_payment'\r\n    },\r\n    \r\n    // Procesamiento de pago\r\n    process_payment: {\r\n      type: 'action',\r\n      action: 'processPayment',\r\n      next: 'payment_decision'\r\n    },\r\n    \r\n    // Decisi\xf3n basada en pago\r\n    payment_decision: {\r\n      type: 'decision',\r\n      decision: 'paymentSuccessful',\r\n      outcomes: {\r\n        true: 'prepare_shipment',\r\n        false: 'handle_payment_failure'\r\n      }\r\n    },\r\n    \r\n    // Manejo de fallo de pago\r\n    handle_payment_failure: {\r\n      type: 'action',\r\n      action: 'handlePaymentFailure',\r\n      next: 'payment_retry_decision'\r\n    },\r\n    \r\n    // Decisi\xf3n de reintento de pago\r\n    payment_retry_decision: {\r\n      type: 'decision',\r\n      decision: 'shouldRetryPayment',\r\n      outcomes: {\r\n        true: 'wait_for_payment_retry',\r\n        false: 'cancel_order'\r\n      }\r\n    },\r\n    \r\n    // Espera para reintento de pago\r\n    wait_for_payment_retry: {\r\n      type: 'wait',\r\n      event: 'payment.retry',\r\n      timeout: {\r\n        duration: '3d',\r\n        next: 'cancel_order'\r\n      },\r\n      next: 'process_payment'\r\n    },\r\n    \r\n    // Preparaci\xf3n de env\xedo\r\n    prepare_shipment: {\r\n      type: 'action',\r\n      action: 'prepareShipment',\r\n      next: 'create_shipping_label'\r\n    },\r\n    \r\n    // Creaci\xf3n de etiqueta de env\xedo\r\n    create_shipping_label: {\r\n      type: 'action',\r\n      action: 'createShippingLabel',\r\n      next: 'notify_shipment'\r\n    },\r\n    \r\n    // Notificaci\xf3n de env\xedo\r\n    notify_shipment: {\r\n      type: 'action',\r\n      action: 'notifyShipment',\r\n      next: 'wait_for_delivery'\r\n    },\r\n    \r\n    // Espera por entrega\r\n    wait_for_delivery: {\r\n      type: 'wait',\r\n      event: 'order.delivered',\r\n      timeout: {\r\n        duration: '14d',\r\n        next: 'check_delivery_status'\r\n      },\r\n      next: 'complete_order'\r\n    },\r\n    \r\n    // Verificaci\xf3n de estado de entrega\r\n    check_delivery_status: {\r\n      type: 'action',\r\n      action: 'checkDeliveryStatus',\r\n      next: 'delivery_status_decision'\r\n    },\r\n    \r\n    // Decisi\xf3n basada en estado de entrega\r\n    delivery_status_decision: {\r\n      type: 'decision',\r\n      decision: 'isDelivered',\r\n      outcomes: {\r\n        true: 'complete_order',\r\n        false: 'handle_delivery_issue'\r\n      }\r\n    },\r\n    \r\n    // Manejo de problemas de entrega\r\n    handle_delivery_issue: {\r\n      type: 'action',\r\n      action: 'handleDeliveryIssue',\r\n      next: 'wait_for_resolution'\r\n    },\r\n    \r\n    // Espera por resoluci\xf3n\r\n    wait_for_resolution: {\r\n      type: 'wait',\r\n      event: 'delivery.issue.resolved',\r\n      timeout: {\r\n        duration: '7d',\r\n        next: 'escalate_issue'\r\n      },\r\n      next: 'complete_order'\r\n    },\r\n    \r\n    // Escalado de problema\r\n    escalate_issue: {\r\n      type: 'action',\r\n      action: 'escalateDeliveryIssue',\r\n      next: 'wait_for_manual_resolution'\r\n    },\r\n    \r\n    // Espera por resoluci\xf3n manual\r\n    wait_for_manual_resolution: {\r\n      type: 'wait',\r\n      event: 'manual.resolution',\r\n      next: 'complete_order'\r\n    },\r\n    \r\n    // Completar pedido\r\n    complete_order: {\r\n      type: 'action',\r\n      action: 'completeOrder',\r\n      next: 'request_feedback'\r\n    },\r\n    \r\n    // Solicitar retroalimentaci\xf3n\r\n    request_feedback: {\r\n      type: 'action',\r\n      action: 'requestFeedback',\r\n      next: 'end'\r\n    },\r\n    \r\n    // Cancelar pedido\r\n    cancel_order: {\r\n      type: 'action',\r\n      action: 'cancelOrder',\r\n      next: 'end'\r\n    },\r\n    \r\n    // Nodo final\r\n    end: {\r\n      type: 'end'\r\n    }\r\n  };\r\n  \r\n  // Implementaci\xf3n de acciones\r\n  async validateOrder(context, input, state) {\r\n    const { orderId } = input;\r\n    \r\n    // Obtener detalles del pedido\r\n    const order = await context.db.findOne('Order', { id: orderId });\r\n    \r\n    if (!order) {\r\n      throw new Error(`Pedido no encontrado: ${orderId}`);\r\n    }\r\n    \r\n    // Validar pedido\r\n    if (!order.items || order.items.length === 0) {\r\n      throw new Error('El pedido no contiene art\xedculos');\r\n    }\r\n    \r\n    // Actualizar estado del pedido\r\n    await context.db.update('Order', {\r\n      id: orderId,\r\n      status: 'validating',\r\n      workflowId: state.workflowId\r\n    });\r\n    \r\n    // Devolver datos para el siguiente paso\r\n    return {\r\n      order,\r\n      valid: true\r\n    };\r\n  }\r\n  \r\n  async checkInventory(context, input, state) {\r\n    const { order } = state.data;\r\n    \r\n    // Verificar inventario para cada art\xedculo\r\n    const inventoryChecks = await Promise.all(\r\n      order.items.map(async (item) => {\r\n        const product = await context.db.findOne('Product', { id: item.productId });\r\n        return {\r\n          productId: item.productId,\r\n          requested: item.quantity,\r\n          available: product.stock,\r\n          sufficient: product.stock >= item.quantity\r\n        };\r\n      })\r\n    );\r\n    \r\n    // Determinar si hay suficiente inventario\r\n    const allAvailable = inventoryChecks.every(check => check.sufficient);\r\n    \r\n    // Actualizar estado del pedido\r\n    await context.db.update('Order', {\r\n      id: order.id,\r\n      status: allAvailable ? 'in_stock' : 'backorder',\r\n      inventoryStatus: allAvailable ? 'available' : 'partial',\r\n      inventoryCheckedAt: new Date()\r\n    });\r\n    \r\n    // Registrar verificaci\xf3n de inventario\r\n    await context.db.create('OrderInventoryCheck', {\r\n      orderId: order.id,\r\n      results: inventoryChecks,\r\n      allAvailable,\r\n      checkedAt: new Date()\r\n    });\r\n    \r\n    return {\r\n      inventoryChecks,\r\n      allAvailable\r\n    };\r\n  }\r\n  \r\n  // Decisi\xf3n: \xbfHay inventario disponible?\r\n  inventoryAvailable(context, input, state) {\r\n    return state.data.allAvailable;\r\n  }\r\n  \r\n  // Implementaci\xf3n de otras acciones y decisiones...\r\n  \r\n  // Manejadores de eventos\r\n  async onStart(context, input, state) {\r\n    // Se ejecuta cuando se inicia el flujo\r\n    await context.db.create('WorkflowLog', {\r\n      workflowId: state.workflowId,\r\n      type: 'start',\r\n      message: `Iniciando flujo de procesamiento para pedido ${input.orderId}`,\r\n      data: input,\r\n      createdAt: new Date()\r\n    });\r\n  }\r\n  \r\n  async onComplete(context, input, state) {\r\n    // Se ejecuta cuando se completa el flujo\r\n    await context.db.create('WorkflowLog', {\r\n      workflowId: state.workflowId,\r\n      type: 'complete',\r\n      message: `Flujo de procesamiento completado para pedido ${input.orderId}`,\r\n      data: state.data,\r\n      createdAt: new Date()\r\n    });\r\n  }\r\n  \r\n  async onError(context, error, state) {\r\n    // Se ejecuta cuando ocurre un error\r\n    await context.db.create('WorkflowLog', {\r\n      workflowId: state.workflowId,\r\n      type: 'error',\r\n      message: `Error en flujo de procesamiento: ${error.message}`,\r\n      data: {\r\n        error: error.message,\r\n        stack: error.stack,\r\n        currentNode: state.currentNode\r\n      },\r\n      createdAt: new Date()\r\n    });\r\n    \r\n    // Notificar al equipo de soporte\r\n    await context.services.NotificationService.notifyTeam('support', {\r\n      title: 'Error en flujo de trabajo',\r\n      message: `Error en flujo de procesamiento de pedido ${state.data.order?.id}: ${error.message}`,\r\n      data: {\r\n        workflowId: state.workflowId,\r\n        orderId: state.data.order?.id,\r\n        error: error.message,\r\n        currentNode: state.currentNode\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default OrderProcessingWorkflow;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"registro-de-flujos-de-trabajo",children:"Registro de flujos de trabajo"}),"\n",(0,o.jsx)(n.p,{children:"Para que tus flujos de trabajo est\xe9n disponibles en la aplicaci\xf3n, debes registrarlos en el archivo de configuraci\xf3n:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  workflows: {\r\n    // ... configuraci\xf3n de flujos\r\n    definitions: [\r\n      'src/workflows/OrderProcessingWorkflow',\r\n      'src/workflows/CustomerOnboardingWorkflow',\r\n      'src/workflows/RefundProcessingWorkflow',\r\n      'src/workflows/ContentApprovalWorkflow'\r\n    ]\r\n  }\r\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"tipos-de-nodos",children:"Tipos de nodos"}),"\n",(0,o.jsx)(n.h3,{id:"nodo-de-inicio",children:"Nodo de inicio"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"start: {\r\n  type: 'start',\r\n  next: 'primer_paso'\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"nodo-de-acci\xf3n",children:"Nodo de acci\xf3n"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"realizar_accion: {\r\n  type: 'action',\r\n  action: 'nombreDelMetodo',\r\n  retry: {\r\n    attempts: 3,\r\n    delay: '1m'\r\n  },\r\n  next: 'siguiente_paso'\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"nodo-de-decisi\xf3n",children:"Nodo de decisi\xf3n"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"tomar_decision: {\r\n  type: 'decision',\r\n  decision: 'nombreDelMetodoDeDecision',\r\n  outcomes: {\r\n    true: 'camino_verdadero',\r\n    false: 'camino_falso',\r\n    default: 'camino_por_defecto'\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"nodo-de-espera",children:"Nodo de espera"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"esperar_evento: {\r\n  type: 'wait',\r\n  event: 'nombre.del.evento',\r\n  timeout: {\r\n    duration: '24h',\r\n    next: 'paso_timeout'\r\n  },\r\n  next: 'paso_despues_evento'\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"nodo-de-subproceso",children:"Nodo de subproceso"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"ejecutar_subproceso: {\r\n  type: 'subprocess',\r\n  workflow: 'nombre-del-subproceso',\r\n  input: {\r\n    // Datos para el subproceso\r\n    param1: '{{data.valor}}',\r\n    param2: 'valor_estatico'\r\n  },\r\n  next: 'paso_despues_subproceso'\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"nodo-paralelo",children:"Nodo paralelo"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"ejecutar_en_paralelo: {\r\n  type: 'parallel',\r\n  branches: {\r\n    rama1: 'primer_paso_rama1',\r\n    rama2: 'primer_paso_rama2',\r\n    rama3: 'primer_paso_rama3'\r\n  },\r\n  join: {\r\n    type: 'all', // 'all', 'any', 'n'\r\n    count: 2, // Solo para tipo 'n'\r\n    next: 'paso_despues_paralelo'\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"nodo-de-fin",children:"Nodo de fin"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"fin: {\r\n  type: 'end'\r\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"iniciando-flujos-de-trabajo",children:"Iniciando flujos de trabajo"}),"\n",(0,o.jsx)(n.h3,{id:"inicio-manual",children:"Inicio manual"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/services/OrderService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass OrderService extends Service {\r\n  async createOrder(data, context) {\r\n    // Crear pedido\r\n    const order = await this.db.create('Order', {\r\n      userId: context.user.id,\r\n      items: data.items,\r\n      shippingAddress: data.shippingAddress,\r\n      billingAddress: data.billingAddress,\r\n      paymentMethod: data.paymentMethod,\r\n      status: 'created',\r\n      createdAt: new Date()\r\n    });\r\n    \r\n    // Iniciar flujo de trabajo\r\n    const workflow = await this.workflows.start('order-processing', {\r\n      orderId: order.id\r\n    });\r\n    \r\n    // Actualizar pedido con ID del flujo\r\n    await this.db.update('Order', {\r\n      id: order.id,\r\n      workflowId: workflow.id\r\n    });\r\n    \r\n    return {\r\n      order,\r\n      workflowId: workflow.id\r\n    };\r\n  }\r\n}\r\n\r\nexport default OrderService;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"inicio-autom\xe1tico-mediante-eventos",children:"Inicio autom\xe1tico mediante eventos"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/models/Order.js\r\nimport { Model } from '@nexusdata/core';\r\n\r\nclass Order extends Model {\r\n  static config = {\r\n    hooks: {\r\n      afterCreate: async (order, context) => {\r\n        // Iniciar flujo de trabajo autom\xe1ticamente despu\xe9s de crear un pedido\r\n        if (order.status === 'created') {\r\n          const workflow = await context.workflows.start('order-processing', {\r\n            orderId: order.id\r\n          });\r\n          \r\n          // Actualizar pedido con ID del flujo\r\n          await context.db.update('Order', {\r\n            id: order.id,\r\n            workflowId: workflow.id\r\n          });\r\n        }\r\n        \r\n        return order;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default Order;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"interacci\xf3n-con-flujos-en-ejecuci\xf3n",children:"Interacci\xf3n con flujos en ejecuci\xf3n"}),"\n",(0,o.jsx)(n.h3,{id:"env\xedo-de-eventos",children:"Env\xedo de eventos"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/services/InventoryService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass InventoryService extends Service {\r\n  async receiveInventory(data, context) {\r\n    // Procesar recepci\xf3n de inventario\r\n    const { productId, quantity } = data;\r\n    \r\n    // Actualizar inventario\r\n    const product = await this.db.findOne('Product', { id: productId });\r\n    \r\n    await this.db.update('Product', {\r\n      id: productId,\r\n      stock: product.stock + quantity\r\n    });\r\n    \r\n    // Registrar movimiento\r\n    await this.db.create('InventoryMovement', {\r\n      productId,\r\n      type: 'receipt',\r\n      quantity,\r\n      previousStock: product.stock,\r\n      newStock: product.stock + quantity,\r\n      createdBy: context.user.id,\r\n      createdAt: new Date()\r\n    });\r\n    \r\n    // Buscar pedidos pendientes por este producto\r\n    const backorders = await this.db.findMany('Order', {\r\n      where: {\r\n        status: 'backorder',\r\n        items: {\r\n          some: {\r\n            productId\r\n          }\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Enviar eventos para flujos de trabajo\r\n    for (const order of backorders) {\r\n      if (order.workflowId) {\r\n        await this.workflows.sendEvent('inventory.available', {\r\n          orderId: order.id,\r\n          productId,\r\n          availableQuantity: product.stock + quantity\r\n        }, {\r\n          workflowId: order.workflowId\r\n        });\r\n      }\r\n    }\r\n    \r\n    return {\r\n      product: {\r\n        id: productId,\r\n        newStock: product.stock + quantity\r\n      },\r\n      backordersNotified: backorders.length\r\n    };\r\n  }\r\n}\r\n\r\nexport default InventoryService;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"consulta-de-estado",children:"Consulta de estado"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/services/WorkflowService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass WorkflowService extends Service {\r\n  async getWorkflowStatus(workflowId) {\r\n    return this.workflows.getStatus(workflowId);\r\n  }\r\n  \r\n  async getWorkflowHistory(workflowId) {\r\n    return this.workflows.getHistory(workflowId);\r\n  }\r\n  \r\n  async listActiveWorkflows(type = null, limit = 100, offset = 0) {\r\n    return this.workflows.listActive(type, limit, offset);\r\n  }\r\n  \r\n  async listWorkflowsByEntity(entityType, entityId) {\r\n    return this.workflows.listByEntity(entityType, entityId);\r\n  }\r\n}\r\n\r\nexport default WorkflowService;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"intervenci\xf3n-manual",children:"Intervenci\xf3n manual"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/services/SupportService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass SupportService extends Service {\r\n  async resolveDeliveryIssue(data, context) {\r\n    const { orderId, resolution, notes } = data;\r\n    \r\n    // Verificar permisos\r\n    if (!context.user.hasPermission('order.resolve_issues')) {\r\n      throw new Error('No tienes permiso para resolver problemas de entrega');\r\n    }\r\n    \r\n    // Obtener pedido\r\n    const order = await this.db.findOne('Order', { id: orderId });\r\n    \r\n    if (!order) {\r\n      throw new Error(`Pedido no encontrado: ${orderId}`);\r\n    }\r\n    \r\n    // Registrar resoluci\xf3n\r\n    await this.db.create('OrderIssueResolution', {\r\n      orderId,\r\n      type: 'delivery',\r\n      resolution,\r\n      notes,\r\n      resolvedBy: context.user.id,\r\n      resolvedAt: new Date()\r\n    });\r\n    \r\n    // Actualizar estado del pedido\r\n    await this.db.update('Order', {\r\n      id: orderId,\r\n      deliveryIssueResolved: true,\r\n      deliveryIssueResolution: resolution,\r\n      deliveryIssueResolvedAt: new Date(),\r\n      deliveryIssueResolvedBy: context.user.id\r\n    });\r\n    \r\n    // Enviar evento al flujo de trabajo\r\n    if (order.workflowId) {\r\n      await this.workflows.sendEvent('delivery.issue.resolved', {\r\n        orderId,\r\n        resolution,\r\n        resolvedBy: context.user.id\r\n      }, {\r\n        workflowId: order.workflowId\r\n      });\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      order: await this.db.findOne('Order', { id: orderId })\r\n    };\r\n  }\r\n  \r\n  async manuallyCompleteWorkflowStep(data, context) {\r\n    const { workflowId, step, reason } = data;\r\n    \r\n    // Verificar permisos\r\n    if (!context.user.hasPermission('workflow.manual_intervention')) {\r\n      throw new Error('No tienes permiso para intervenir manualmente en flujos de trabajo');\r\n    }\r\n    \r\n    // Registrar intervenci\xf3n\r\n    await this.db.create('WorkflowIntervention', {\r\n      workflowId,\r\n      step,\r\n      reason,\r\n      performedBy: context.user.id,\r\n      performedAt: new Date()\r\n    });\r\n    \r\n    // Avanzar el flujo manualmente\r\n    await this.workflows.advanceToStep(workflowId, step);\r\n    \r\n    return {\r\n      success: true,\r\n      workflow: await this.workflows.getStatus(workflowId)\r\n    };\r\n  }\r\n}\r\n\r\nexport default SupportService;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"ejemplos-de-flujos-comunes",children:"Ejemplos de flujos comunes"}),"\n",(0,o.jsx)(n.h3,{id:"flujo-de-incorporaci\xf3n-de-clientes",children:"Flujo de incorporaci\xf3n de clientes"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/workflows/CustomerOnboardingWorkflow.js\r\nimport { Workflow } from '@nexusdata/core';\r\n\r\nclass CustomerOnboardingWorkflow extends Workflow {\r\n  static name = 'customer-onboarding';\r\n  static version = '1.0.0';\r\n  static description = 'Proceso de incorporaci\xf3n de nuevos clientes';\r\n  \r\n  static definition = {\r\n    start: {\r\n      type: 'start',\r\n      next: 'verify_email'\r\n    },\r\n    \r\n    verify_email: {\r\n      type: 'action',\r\n      action: 'sendVerificationEmail',\r\n      next: 'wait_for_email_verification'\r\n    },\r\n    \r\n    wait_for_email_verification: {\r\n      type: 'wait',\r\n      event: 'email.verified',\r\n      timeout: {\r\n        duration: '3d',\r\n        next: 'send_reminder_email'\r\n      },\r\n      next: 'collect_profile_info'\r\n    },\r\n    \r\n    send_reminder_email: {\r\n      type: 'action',\r\n      action: 'sendReminderEmail',\r\n      next: 'wait_for_email_verification_after_reminder'\r\n    },\r\n    \r\n    wait_for_email_verification_after_reminder: {\r\n      type: 'wait',\r\n      event: 'email.verified',\r\n      timeout: {\r\n        duration: '4d',\r\n        next: 'mark_inactive'\r\n      },\r\n      next: 'collect_profile_info'\r\n    },\r\n    \r\n    collect_profile_info: {\r\n      type: 'action',\r\n      action: 'requestProfileInfo',\r\n      next: 'wait_for_profile_completion'\r\n    },\r\n    \r\n    wait_for_profile_completion: {\r\n      type: 'wait',\r\n      event: 'profile.completed',\r\n      timeout: {\r\n        duration: '7d',\r\n        next: 'send_profile_reminder'\r\n      },\r\n      next: 'verify_profile'\r\n    },\r\n    \r\n    send_profile_reminder: {\r\n      type: 'action',\r\n      action: 'sendProfileReminder',\r\n      next: 'wait_for_profile_completion_after_reminder'\r\n    },\r\n    \r\n    wait_for_profile_completion_after_reminder: {\r\n      type: 'wait',\r\n      event: 'profile.completed',\r\n      timeout: {\r\n        duration: '7d',\r\n        next: 'mark_incomplete'\r\n      },\r\n      next: 'verify_profile'\r\n    },\r\n    \r\n    verify_profile: {\r\n      type: 'action',\r\n      action: 'verifyProfile',\r\n      next: 'profile_decision'\r\n    },\r\n    \r\n    profile_decision: {\r\n      type: 'decision',\r\n      decision: 'isProfileValid',\r\n      outcomes: {\r\n        true: 'setup_preferences',\r\n        false: 'request_profile_correction'\r\n      }\r\n    },\r\n    \r\n    request_profile_correction: {\r\n      type: 'action',\r\n      action: 'requestProfileCorrection',\r\n      next: 'wait_for_profile_correction'\r\n    },\r\n    \r\n    wait_for_profile_correction: {\r\n      type: 'wait',\r\n      event: 'profile.updated',\r\n      next: 'verify_profile'\r\n    },\r\n    \r\n    setup_preferences: {\r\n      type: 'action',\r\n      action: 'setupPreferences',\r\n      next: 'recommend_products'\r\n    },\r\n    \r\n    recommend_products: {\r\n      type: 'action',\r\n      action: 'generateRecommendations',\r\n      next: 'send_welcome_package'\r\n    },\r\n    \r\n    send_welcome_package: {\r\n      type: 'action',\r\n      action: 'sendWelcomePackage',\r\n      next: 'assign_account_manager'\r\n    },\r\n    \r\n    assign_account_manager: {\r\n      type: 'action',\r\n      action: 'assignAccountManager',\r\n      next: 'schedule_followup'\r\n    },\r\n    \r\n    schedule_followup: {\r\n      type: 'action',\r\n      action: 'scheduleFollowup',\r\n      next: 'mark_active'\r\n    },\r\n    \r\n    mark_active: {\r\n      type: 'action',\r\n      action: 'markCustomerActive',\r\n      next: 'end'\r\n    },\r\n    \r\n    mark_inactive: {\r\n      type: 'action',\r\n      action: 'markCustomerInactive',\r\n      next: 'end'\r\n    },\r\n    \r\n    mark_incomplete: {\r\n      type: 'action',\r\n      action: 'markCustomerIncomplete',\r\n      next: 'end'\r\n    },\r\n    \r\n    end: {\r\n      type: 'end'\r\n    }\r\n  };\r\n  \r\n  // Implementaci\xf3n de acciones y decisiones...\r\n}\r\n\r\nexport default CustomerOnboardingWorkflow;\n"})}),"\n",(0,o.jsx)(n.p,{children:'Voy a continuar con el contenido del archivo flujos.md desde la secci\xf3n "Flujo de aprobaci\xf3n de contenido" y completar lo que falta.'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-markdown:c:\\Users\\Shawm\\Desktop\\docux\\my-website\\docs\\business-logic\\flujos.md",children:"// ... c\xf3digo existente ...\r\n\r\n### Flujo de aprobaci\xf3n de contenido\r\n\r\n```javascript\r\n// src/workflows/ContentApprovalWorkflow.js\r\nimport { Workflow } from '@nexusdata/core';\r\n\r\nclass ContentApprovalWorkflow extends Workflow {\r\n  static name = 'content-approval';\r\n  static version = '1.0.0';\r\n  static description = 'Proceso de aprobaci\xf3n de contenido';\r\n  \r\n  static definition = {\r\n    start: {\r\n      type: 'start',\r\n      next: 'initial_review'\r\n    },\r\n    \r\n    initial_review: {\r\n      type: 'action',\r\n      action: 'assignInitialReviewer',\r\n      next: 'wait_for_initial_review'\r\n    },\r\n    \r\n    wait_for_initial_review: {\r\n      type: 'wait',\r\n      event: 'content.reviewed.initial',\r\n      timeout: {\r\n        duration: '3d',\r\n        next: 'send_review_reminder'\r\n      },\r\n      next: 'initial_review_decision'\r\n    },\r\n    \r\n    send_review_reminder: {\r\n      type: 'action',\r\n      action: 'sendReviewReminder',\r\n      next: 'wait_for_initial_review_after_reminder'\r\n    },\r\n    \r\n    wait_for_initial_review_after_reminder: {\r\n      type: 'wait',\r\n      event: 'content.reviewed.initial',\r\n      timeout: {\r\n        duration: '2d',\r\n        next: 'escalate_review'\r\n      },\r\n      next: 'initial_review_decision'\r\n    },\r\n    \r\n    escalate_review: {\r\n      type: 'action',\r\n      action: 'escalateReview',\r\n      next: 'wait_for_escalated_review'\r\n    },\r\n    \r\n    wait_for_escalated_review: {\r\n      type: 'wait',\r\n      event: 'content.reviewed.escalated',\r\n      next: 'initial_review_decision'\r\n    },\r\n    \r\n    initial_review_decision: {\r\n      type: 'decision',\r\n      decision: 'initialReviewPassed',\r\n      outcomes: {\r\n        true: 'check_content_type',\r\n        false: 'request_revisions'\r\n      }\r\n    },\r\n    \r\n    request_revisions: {\r\n      type: 'action',\r\n      action: 'requestRevisions',\r\n      next: 'wait_for_revisions'\r\n    },\r\n    \r\n    wait_for_revisions: {\r\n      type: 'wait',\r\n      event: 'content.revised',\r\n      next: 'initial_review'\r\n    },\r\n    \r\n    check_content_type: {\r\n      type: 'decision',\r\n      decision: 'requiresExpertReview',\r\n      outcomes: {\r\n        true: 'expert_review',\r\n        false: 'final_review'\r\n      }\r\n    },\r\n    \r\n    expert_review: {\r\n      type: 'action',\r\n      action: 'assignExpertReviewer',\r\n      next: 'wait_for_expert_review'\r\n    },\r\n    \r\n    wait_for_expert_review: {\r\n      type: 'wait',\r\n      event: 'content.reviewed.expert',\r\n      next: 'expert_review_decision'\r\n    },\r\n    \r\n    expert_review_decision: {\r\n      type: 'decision',\r\n      decision: 'expertReviewPassed',\r\n      outcomes: {\r\n        true: 'final_review',\r\n        false: 'request_expert_revisions'\r\n      }\r\n    },\r\n    \r\n    request_expert_revisions: {\r\n      type: 'action',\r\n      action: 'requestExpertRevisions',\r\n      next: 'wait_for_expert_revisions'\r\n    },\r\n    \r\n    wait_for_expert_revisions: {\r\n      type: 'wait',\r\n      event: 'content.revised.expert',\r\n      next: 'expert_review'\r\n    },\r\n    \r\n    final_review: {\r\n      type: 'action',\r\n      action: 'assignFinalReviewer',\r\n      next: 'wait_for_final_review'\r\n    },\r\n    \r\n    wait_for_final_review: {\r\n      type: 'wait',\r\n      event: 'content.reviewed.final',\r\n      next: 'final_review_decision'\r\n    },\r\n    \r\n    final_review_decision: {\r\n      type: 'decision',\r\n      decision: 'finalReviewPassed',\r\n      outcomes: {\r\n        true: 'publish_content',\r\n        false: 'request_final_revisions'\r\n      }\r\n    },\r\n    \r\n    request_final_revisions: {\r\n      type: 'action',\r\n      action: 'requestFinalRevisions',\r\n      next: 'wait_for_final_revisions'\r\n    },\r\n    \r\n    wait_for_final_revisions: {\r\n      type: 'wait',\r\n      event: 'content.revised.final',\r\n      next: 'final_review'\r\n    },\r\n    \r\n    publish_content: {\r\n      type: 'action',\r\n      action: 'publishContent',\r\n      next: 'notify_stakeholders'\r\n    },\r\n    \r\n    notify_stakeholders: {\r\n      type: 'action',\r\n      action: 'notifyStakeholders',\r\n      next: 'end'\r\n    },\r\n    \r\n    end: {\r\n      type: 'end'\r\n    }\r\n  };\r\n  \r\n  // Implementaci\xf3n de acciones y decisiones...\r\n}\r\n\r\nexport default ContentApprovalWorkflow;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"flujo-de-procesamiento-de-reembolsos",children:"Flujo de procesamiento de reembolsos"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/workflows/RefundProcessingWorkflow.js\r\nimport { Workflow } from '@nexusdata/core';\r\n\r\nclass RefundProcessingWorkflow extends Workflow {\r\n  static name = 'refund-processing';\r\n  static version = '1.0.0';\r\n  static description = 'Procesa solicitudes de reembolso';\r\n  \r\n  static definition = {\r\n    start: {\r\n      type: 'start',\r\n      next: 'validate_refund_request'\r\n    },\r\n    \r\n    validate_refund_request: {\r\n      type: 'action',\r\n      action: 'validateRefundRequest',\r\n      next: 'check_eligibility'\r\n    },\r\n    \r\n    check_eligibility: {\r\n      type: 'action',\r\n      action: 'checkRefundEligibility',\r\n      next: 'eligibility_decision'\r\n    },\r\n    \r\n    eligibility_decision: {\r\n      type: 'decision',\r\n      decision: 'isEligibleForRefund',\r\n      outcomes: {\r\n        true: 'check_refund_type',\r\n        false: 'reject_refund'\r\n      }\r\n    },\r\n    \r\n    check_refund_type: {\r\n      type: 'decision',\r\n      decision: 'requiresApproval',\r\n      outcomes: {\r\n        true: 'request_approval',\r\n        false: 'process_automatic_refund'\r\n      }\r\n    },\r\n    \r\n    request_approval: {\r\n      type: 'action',\r\n      action: 'requestRefundApproval',\r\n      next: 'wait_for_approval'\r\n    },\r\n    \r\n    wait_for_approval: {\r\n      type: 'wait',\r\n      event: 'refund.approval.decision',\r\n      timeout: {\r\n        duration: '5d',\r\n        next: 'escalate_approval'\r\n      },\r\n      next: 'approval_decision'\r\n    },\r\n    \r\n    escalate_approval: {\r\n      type: 'action',\r\n      action: 'escalateApproval',\r\n      next: 'wait_for_escalated_approval'\r\n    },\r\n    \r\n    wait_for_escalated_approval: {\r\n      type: 'wait',\r\n      event: 'refund.approval.escalated',\r\n      next: 'approval_decision'\r\n    },\r\n    \r\n    approval_decision: {\r\n      type: 'decision',\r\n      decision: 'isApproved',\r\n      outcomes: {\r\n        true: 'process_refund',\r\n        false: 'reject_refund'\r\n      }\r\n    },\r\n    \r\n    process_automatic_refund: {\r\n      type: 'action',\r\n      action: 'processAutomaticRefund',\r\n      next: 'verify_refund'\r\n    },\r\n    \r\n    process_refund: {\r\n      type: 'action',\r\n      action: 'processRefund',\r\n      next: 'verify_refund'\r\n    },\r\n    \r\n    verify_refund: {\r\n      type: 'action',\r\n      action: 'verifyRefundProcessed',\r\n      next: 'refund_verification_decision'\r\n    },\r\n    \r\n    refund_verification_decision: {\r\n      type: 'decision',\r\n      decision: 'refundProcessedSuccessfully',\r\n      outcomes: {\r\n        true: 'update_inventory',\r\n        false: 'handle_refund_failure'\r\n      }\r\n    },\r\n    \r\n    handle_refund_failure: {\r\n      type: 'action',\r\n      action: 'handleRefundFailure',\r\n      next: 'retry_decision'\r\n    },\r\n    \r\n    retry_decision: {\r\n      type: 'decision',\r\n      decision: 'shouldRetryRefund',\r\n      outcomes: {\r\n        true: 'process_refund',\r\n        false: 'manual_intervention'\r\n      }\r\n    },\r\n    \r\n    manual_intervention: {\r\n      type: 'action',\r\n      action: 'requestManualIntervention',\r\n      next: 'wait_for_manual_resolution'\r\n    },\r\n    \r\n    wait_for_manual_resolution: {\r\n      type: 'wait',\r\n      event: 'refund.manual.resolved',\r\n      next: 'update_inventory'\r\n    },\r\n    \r\n    update_inventory: {\r\n      type: 'decision',\r\n      decision: 'requiresInventoryUpdate',\r\n      outcomes: {\r\n        true: 'process_inventory_update',\r\n        false: 'notify_customer'\r\n      }\r\n    },\r\n    \r\n    process_inventory_update: {\r\n      type: 'action',\r\n      action: 'updateInventory',\r\n      next: 'notify_customer'\r\n    },\r\n    \r\n    notify_customer: {\r\n      type: 'action',\r\n      action: 'notifyCustomer',\r\n      next: 'close_refund'\r\n    },\r\n    \r\n    reject_refund: {\r\n      type: 'action',\r\n      action: 'rejectRefund',\r\n      next: 'notify_rejection'\r\n    },\r\n    \r\n    notify_rejection: {\r\n      type: 'action',\r\n      action: 'notifyRejection',\r\n      next: 'end'\r\n    },\r\n    \r\n    close_refund: {\r\n      type: 'action',\r\n      action: 'closeRefund',\r\n      next: 'end'\r\n    },\r\n    \r\n    end: {\r\n      type: 'end'\r\n    }\r\n  };\r\n  \r\n  // Implementaci\xf3n de acciones y decisiones...\r\n}\r\n\r\nexport default RefundProcessingWorkflow;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"interacci\xf3n-con-flujos-en-ejecuci\xf3n-1",children:"Interacci\xf3n con flujos en ejecuci\xf3n"}),"\n",(0,o.jsx)(n.h3,{id:"env\xedo-de-eventos-1",children:"Env\xedo de eventos"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/services/InventoryService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass InventoryService extends Service {\r\n  async receiveInventory(data, context) {\r\n    // Procesar recepci\xf3n de inventario\r\n    const { productId, quantity } = data;\r\n    \r\n    // Actualizar inventario\r\n    const product = await this.db.findOne('Product', { id: productId });\r\n    \r\n    await this.db.update('Product', {\r\n      id: productId,\r\n      stock: product.stock + quantity\r\n    });\r\n    \r\n    // Registrar movimiento\r\n    await this.db.create('InventoryMovement', {\r\n      productId,\r\n      type: 'receipt',\r\n      quantity,\r\n      previousStock: product.stock,\r\n      newStock: product.stock + quantity,\r\n      createdBy: context.user.id,\r\n      createdAt: new Date()\r\n    });\r\n    \r\n    // Buscar pedidos pendientes por este producto\r\n    const backorders = await this.db.findMany('Order', {\r\n      where: {\r\n        status: 'backorder',\r\n        items: {\r\n          some: {\r\n            productId\r\n          }\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Enviar eventos para flujos de trabajo\r\n    for (const order of backorders) {\r\n      if (order.workflowId) {\r\n        await this.workflows.sendEvent('inventory.available', {\r\n          orderId: order.id,\r\n          productId,\r\n          availableQuantity: product.stock + quantity\r\n        }, {\r\n          workflowId: order.workflowId\r\n        });\r\n      }\r\n    }\r\n    \r\n    return {\r\n      product: {\r\n        id: productId,\r\n        newStock: product.stock + quantity\r\n      },\r\n      backordersNotified: backorders.length\r\n    };\r\n  }\r\n}\r\n\r\nexport default InventoryService;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"consulta-de-estado-1",children:"Consulta de estado"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/services/WorkflowService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass WorkflowService extends Service {\r\n  async getWorkflowStatus(workflowId) {\r\n    return this.workflows.getStatus(workflowId);\r\n  }\r\n  \r\n  async getWorkflowHistory(workflowId) {\r\n    return this.workflows.getHistory(workflowId);\r\n  }\r\n  \r\n  async listActiveWorkflows(type = null, limit = 100, offset = 0) {\r\n    return this.workflows.listActive(type, limit, offset);\r\n  }\r\n  \r\n  async listWorkflowsByEntity(entityType, entityId) {\r\n    return this.workflows.listByEntity(entityType, entityId);\r\n  }\r\n}\r\n\r\nexport default WorkflowService;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"intervenci\xf3n-manual-1",children:"Intervenci\xf3n manual"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/services/SupportService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass SupportService extends Service {\r\n  async resolveDeliveryIssue(data, context) {\r\n    const { orderId, resolution, notes } = data;\r\n    \r\n    // Verificar permisos\r\n    if (!context.user.hasPermission('order.resolve_issues')) {\r\n      throw new Error('No tienes permiso para resolver problemas de entrega');\r\n    }\r\n    \r\n    // Obtener pedido\r\n    const order = await this.db.findOne('Order', { id: orderId });\r\n    \r\n    if (!order) {\r\n      throw new Error(`Pedido no encontrado: ${orderId}`);\r\n    }\r\n    \r\n    // Registrar resoluci\xf3n\r\n    await this.db.create('OrderIssueResolution', {\r\n      orderId,\r\n      type: 'delivery',\r\n      resolution,\r\n      notes,\r\n      resolvedBy: context.user.id,\r\n      resolvedAt: new Date()\r\n    });\r\n    \r\n    // Actualizar estado del pedido\r\n    await this.db.update('Order', {\r\n      id: orderId,\r\n      deliveryIssueResolved: true,\r\n      deliveryIssueResolution: resolution,\r\n      deliveryIssueResolvedAt: new Date(),\r\n      deliveryIssueResolvedBy: context.user.id\r\n    });\r\n    \r\n    // Enviar evento al flujo de trabajo\r\n    if (order.workflowId) {\r\n      await this.workflows.sendEvent('delivery.issue.resolved', {\r\n        orderId,\r\n        resolution,\r\n        resolvedBy: context.user.id\r\n      }, {\r\n        workflowId: order.workflowId\r\n      });\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      order: await this.db.findOne('Order', { id: orderId })\r\n    };\r\n  }\r\n  \r\n  async manuallyCompleteWorkflowStep(data, context) {\r\n    const { workflowId, step, reason } = data;\r\n    \r\n    // Verificar permisos\r\n    if (!context.user.hasPermission('workflow.manual_intervention')) {\r\n      throw new Error('No tienes permiso para intervenir manualmente en flujos de trabajo');\r\n    }\r\n    \r\n    // Registrar intervenci\xf3n\r\n    await this.db.create('WorkflowIntervention', {\r\n      workflowId,\r\n      step,\r\n      reason,\r\n      performedBy: context.user.id,\r\n      performedAt: new Date()\r\n    });\r\n    \r\n    // Avanzar el flujo manualmente\r\n    await this.workflows.advanceToStep(workflowId, step);\r\n    \r\n    return {\r\n      success: true,\r\n      workflow: await this.workflows.getStatus(workflowId)\r\n    };\r\n  }\r\n}\r\n\r\nexport default SupportService;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"visualizaci\xf3n-y-monitoreo-de-flujos",children:"Visualizaci\xf3n y monitoreo de flujos"}),"\n",(0,o.jsx)(n.h3,{id:"panel-de-control-de-flujos",children:"Panel de control de flujos"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/services/WorkflowDashboardService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass WorkflowDashboardService extends Service {\r\n  async getWorkflowStats() {\r\n    // Obtener estad\xedsticas generales de flujos de trabajo\r\n    const stats = {\r\n      active: await this.db.count('Workflow', { status: 'active' }),\r\n      completed: await this.db.count('Workflow', { status: 'completed' }),\r\n      failed: await this.db.count('Workflow', { status: 'failed' }),\r\n      waiting: await this.db.count('Workflow', { status: 'waiting' })\r\n    };\r\n    \r\n    // Obtener estad\xedsticas por tipo de flujo\r\n    const typeStats = await this.db.aggregate('Workflow', {\r\n      groupBy: ['type'],\r\n      count: true,\r\n      where: { status: 'active' }\r\n    });\r\n    \r\n    // Obtener flujos bloqueados (esperando por m\xe1s tiempo del normal)\r\n    const blockedWorkflows = await this.db.findMany('Workflow', {\r\n      where: {\r\n        status: 'waiting',\r\n        updatedAt: { lt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) } // M\xe1s de 7 d\xedas\r\n      },\r\n      limit: 10,\r\n      orderBy: { updatedAt: 'asc' }\r\n    });\r\n    \r\n    return {\r\n      stats,\r\n      typeStats,\r\n      blockedWorkflows\r\n    };\r\n  }\r\n  \r\n  async getWorkflowTimelines(type, limit = 20) {\r\n    // Obtener flujos completados recientemente\r\n    const workflows = await this.db.findMany('Workflow', {\r\n      where: {\r\n        type,\r\n        status: 'completed'\r\n      },\r\n      limit,\r\n      orderBy: { completedAt: 'desc' }\r\n    });\r\n    \r\n    // Obtener historial de cada flujo\r\n    const timelines = await Promise.all(\r\n      workflows.map(async (workflow) => {\r\n        const history = await this.db.findMany('WorkflowHistory', {\r\n          where: { workflowId: workflow.id },\r\n          orderBy: { timestamp: 'asc' }\r\n        });\r\n        \r\n        return {\r\n          workflow,\r\n          history,\r\n          duration: workflow.completedAt - workflow.createdAt,\r\n          steps: history.length\r\n        };\r\n      })\r\n    );\r\n    \r\n    // Calcular estad\xedsticas de duraci\xf3n\r\n    const durations = timelines.map(t => t.duration);\r\n    const avgDuration = durations.reduce((sum, d) => sum + d, 0) / durations.length;\r\n    const minDuration = Math.min(...durations);\r\n    const maxDuration = Math.max(...durations);\r\n    \r\n    return {\r\n      timelines,\r\n      stats: {\r\n        avgDuration,\r\n        minDuration,\r\n        maxDuration,\r\n        count: timelines.length\r\n      }\r\n    };\r\n  }\r\n  \r\n  async getWorkflowBottlenecks(type, period = '30d') {\r\n    // Determinar fecha de inicio seg\xfan el per\xedodo\r\n    const startDate = new Date();\r\n    if (period === '7d') startDate.setDate(startDate.getDate() - 7);\r\n    else if (period === '30d') startDate.setDate(startDate.getDate() - 30);\r\n    else if (period === '90d') startDate.setDate(startDate.getDate() - 90);\r\n    \r\n    // Obtener historial de pasos para flujos completados\r\n    const steps = await this.db.findMany('WorkflowHistory', {\r\n      where: {\r\n        workflow: {\r\n          type,\r\n          status: 'completed',\r\n          completedAt: { gt: startDate }\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Agrupar por nombre de paso y calcular duraci\xf3n promedio\r\n    const stepStats = {};\r\n    \r\n    for (const step of steps) {\r\n      if (!stepStats[step.step]) {\r\n        stepStats[step.step] = {\r\n          count: 0,\r\n          totalDuration: 0,\r\n          maxDuration: 0\r\n        };\r\n      }\r\n      \r\n      const duration = step.completedAt - step.startedAt;\r\n      stepStats[step.step].count++;\r\n      stepStats[step.step].totalDuration += duration;\r\n      \r\n      if (duration > stepStats[step.step].maxDuration) {\r\n        stepStats[step.step].maxDuration = duration;\r\n      }\r\n    }\r\n    \r\n    // Calcular duraci\xf3n promedio y ordenar por duraci\xf3n\r\n    const bottlenecks = Object.entries(stepStats).map(([step, stats]) => ({\r\n      step,\r\n      avgDuration: stats.totalDuration / stats.count,\r\n      maxDuration: stats.maxDuration,\r\n      count: stats.count\r\n    }));\r\n    \r\n    bottlenecks.sort((a, b) => b.avgDuration - a.avgDuration);\r\n    \r\n    return {\r\n      bottlenecks: bottlenecks.slice(0, 10),\r\n      period,\r\n      totalWorkflows: await this.db.count('Workflow', {\r\n        where: {\r\n          type,\r\n          status: 'completed',\r\n          completedAt: { gt: startDate }\r\n        }\r\n      })\r\n    };\r\n  }\r\n}\r\n\r\nexport default WorkflowDashboardService;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"mejores-pr\xe1cticas",children:"Mejores pr\xe1cticas"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Dise\xf1o modular"}),": Divide flujos complejos en subprocesos m\xe1s peque\xf1os y manejables."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Idempotencia"}),": Dise\xf1a acciones para ser idempotentes, permitiendo reintentos seguros."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Manejo de errores"}),": Implementa estrategias robustas de manejo de errores en cada paso."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Timeouts"}),": Configura tiempos de espera adecuados para evitar flujos bloqueados indefinidamente."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Registro y auditor\xeda"}),": Mant\xe9n un registro detallado de cada paso y decisi\xf3n para facilitar la depuraci\xf3n."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Versionado"}),": Implementa un sistema de versionado para flujos de trabajo que permita migraciones seguras."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Pruebas"}),": Crea pruebas automatizadas para validar el comportamiento de tus flujos de trabajo."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Monitoreo"}),": Implementa alertas para flujos bloqueados o con errores frecuentes."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Documentaci\xf3n"}),": Documenta claramente el prop\xf3sito y comportamiento esperado de cada flujo."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Transacciones"}),": Usa transacciones de base de datos cuando sea apropiado para mantener la consistencia."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"patrones-comunes",children:"Patrones comunes"}),"\n",(0,o.jsx)(n.h3,{id:"patr\xf3n-de-aprobaci\xf3n",children:"Patr\xf3n de aprobaci\xf3n"}),"\n",(0,o.jsx)(n.p,{children:"Implementa flujos que requieren aprobaci\xf3n de uno o varios usuarios antes de continuar:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"approval_flow: {\r\n  type: 'action',\r\n  action: 'requestApproval',\r\n  next: 'wait_for_approval'\r\n},\r\n\r\nwait_for_approval: {\r\n  type: 'wait',\r\n  event: 'approval.decision',\r\n  next: 'check_approval'\r\n},\r\n\r\ncheck_approval: {\r\n  type: 'decision',\r\n  decision: 'isApproved',\r\n  outcomes: {\r\n    true: 'process_approved',\r\n    false: 'process_rejected'\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"patr\xf3n-de-escalamiento",children:"Patr\xf3n de escalamiento"}),"\n",(0,o.jsx)(n.p,{children:"Implementa un mecanismo de escalamiento cuando un paso no se completa en un tiempo determinado:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"assign_task: {\r\n  type: 'action',\r\n  action: 'assignTask',\r\n  next: 'wait_for_completion'\r\n},\r\n\r\nwait_for_completion: {\r\n  type: 'wait',\r\n  event: 'task.completed',\r\n  timeout: {\r\n    duration: '2d',\r\n    next: 'escalate_task'\r\n  },\r\n  next: 'process_completion'\r\n},\r\n\r\nescalate_task: {\r\n  type: 'action',\r\n  action: 'escalateTask',\r\n  next: 'wait_after_escalation'\r\n},\r\n\r\nwait_after_escalation: {\r\n  type: 'wait',\r\n  event: 'task.completed',\r\n  timeout: {\r\n    duration: '1d',\r\n    next: 'escalate_to_manager'\r\n  },\r\n  next: 'process_completion'\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"patr\xf3n-de-compensaci\xf3n",children:"Patr\xf3n de compensaci\xf3n"}),"\n",(0,o.jsx)(n.p,{children:"Implementa acciones de compensaci\xf3n para revertir cambios cuando un flujo falla:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"process_payment: {\r\n  type: 'action',\r\n  action: 'processPayment',\r\n  next: 'update_inventory'\r\n},\r\n\r\nupdate_inventory: {\r\n  type: 'action',\r\n  action: 'updateInventory',\r\n  next: 'send_confirmation',\r\n  onError: 'revert_payment'\r\n},\r\n\r\nrevert_payment: {\r\n  type: 'action',\r\n  action: 'revertPayment',\r\n  next: 'notify_failure'\r\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"mejores-pr\xe1cticas-1",children:"Mejores pr\xe1cticas"}),"\n",(0,o.jsx)(n.p,{children:"Los flujos de trabajo son una herramienta poderosa para modelar y automatizar procesos de negocio complejos. NexusData proporciona un sistema flexible y robusto para definir, ejecutar y monitorear flujos de trabajo, permiti\xe9ndote implementar l\xf3gica de negocio sofisticada de manera estructurada y mantenible."}),"\n",(0,o.jsx)(n.p,{children:"Al utilizar flujos de trabajo, puedes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Mejorar la consistencia de tus procesos de negocio"}),"\n",(0,o.jsx)(n.li,{children:"Reducir errores humanos en procesos complejos"}),"\n",(0,o.jsx)(n.li,{children:"Aumentar la visibilidad y trazabilidad de tus operaciones"}),"\n",(0,o.jsx)(n.li,{children:"Facilitar la adaptaci\xf3n a cambios en los requisitos del negocio"}),"\n",(0,o.jsx)(n.li,{children:"Escalar tus operaciones manteniendo la calidad y consistencia"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>s});var t=r(6540);const o={},i=t.createContext(o);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);