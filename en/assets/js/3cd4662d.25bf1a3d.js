"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2759],{8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var t=r(6540);const o={},a=t.createContext(o);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(a.Provider,{value:n},e.children)}},8846:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"business-logic/acciones","title":"Acciones Personalizadas","description":"Implementaci\xf3n de acciones personalizadas para modelos en NexusData","source":"@site/docs/business-logic/acciones.md","sourceDirName":"business-logic","slug":"/business-logic/acciones","permalink":"/en/docs/business-logic/acciones","draft":false,"unlisted":false,"editUrl":"https://github.com/nexusdata/nexusdata-docs/edit/main/docs/business-logic/acciones.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Acciones Personalizadas","description":"Implementaci\xf3n de acciones personalizadas para modelos en NexusData"},"sidebar":"tutorialSidebar","previous":{"title":"Servicios","permalink":"/en/docs/business-logic/servicios"},"next":{"title":"Sistema de Eventos","permalink":"/en/docs/business-logic/eventos"}}');var o=r(4848),a=r(8453);const i={sidebar_position:3,title:"Acciones Personalizadas",description:"Implementaci\xf3n de acciones personalizadas para modelos en NexusData"},s="Acciones Personalizadas",c={},d=[{value:"\xbfQu\xe9 son las acciones?",id:"qu\xe9-son-las-acciones",level:2},{value:"Definici\xf3n de acciones",id:"definici\xf3n-de-acciones",level:2},{value:"Estructura de una acci\xf3n",id:"estructura-de-una-acci\xf3n",level:2},{value:"Exposici\xf3n de acciones en GraphQL",id:"exposici\xf3n-de-acciones-en-graphql",level:2},{value:"Exposici\xf3n de acciones en REST API",id:"exposici\xf3n-de-acciones-en-rest-api",level:2},{value:"Ejemplos de acciones comunes",id:"ejemplos-de-acciones-comunes",level:2},{value:"Acci\xf3n para aprobar un comentario",id:"acci\xf3n-para-aprobar-un-comentario",level:3},{value:"Acci\xf3n para procesar un pedido",id:"acci\xf3n-para-procesar-un-pedido",level:3},{value:"Acciones a nivel de colecci\xf3n",id:"acciones-a-nivel-de-colecci\xf3n",level:2},{value:"Mejores pr\xe1cticas",id:"mejores-pr\xe1cticas",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"acciones-personalizadas",children:"Acciones Personalizadas"})}),"\n",(0,o.jsx)(n.p,{children:"Las acciones personalizadas te permiten definir operaciones espec\xedficas para tus modelos, extendiendo la funcionalidad b\xe1sica CRUD con l\xf3gica de negocio personalizada."}),"\n",(0,o.jsx)(n.h2,{id:"qu\xe9-son-las-acciones",children:"\xbfQu\xe9 son las acciones?"}),"\n",(0,o.jsx)(n.p,{children:"Las acciones son m\xe9todos personalizados que puedes definir en tus modelos para realizar operaciones espec\xedficas sobre ellos. A diferencia de los servicios, que pueden abarcar m\xfaltiples modelos, las acciones est\xe1n vinculadas a un modelo espec\xedfico y generalmente operan sobre una instancia concreta de ese modelo."}),"\n",(0,o.jsx)(n.h2,{id:"definici\xf3n-de-acciones",children:"Definici\xf3n de acciones"}),"\n",(0,o.jsx)(n.p,{children:"Las acciones se definen en la configuraci\xf3n del modelo:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/models/Product.js\r\nimport { Model } from '@nexusdata/core';\r\n\r\nclass Product extends Model {\r\n  static config = {\r\n    actions: {\r\n      // Acci\xf3n para ajustar el stock de un producto\r\n      adjustStock: {\r\n        input: {\r\n          quantity: 'Int!', // La cantidad a ajustar (positivo para a\xf1adir, negativo para restar)\r\n          reason: 'String!'  // Raz\xf3n del ajuste\r\n        },\r\n        output: 'Product!', // Tipo de retorno\r\n        resolver: async (product, { quantity, reason }, context) => {\r\n          const newStock = product.stock + quantity;\r\n          \r\n          if (newStock < 0) {\r\n            throw new Error('El stock no puede ser negativo');\r\n          }\r\n          \r\n          // Registrar el ajuste\r\n          await context.db.create('StockAdjustment', {\r\n            productId: product.id,\r\n            quantity,\r\n            reason,\r\n            previousStock: product.stock,\r\n            newStock,\r\n            userId: context.user?.id,\r\n            createdAt: new Date()\r\n          });\r\n          \r\n          // Actualizar el stock\r\n          const updatedProduct = await context.db.update('Product', {\r\n            id: product.id,\r\n            stock: newStock\r\n          });\r\n          \r\n          // Emitir evento\r\n          context.events.emit('product.stock.adjusted', {\r\n            product: updatedProduct,\r\n            adjustment: {\r\n              quantity,\r\n              reason,\r\n              previousStock: product.stock,\r\n              newStock\r\n            }\r\n          });\r\n          \r\n          return updatedProduct;\r\n        }\r\n      },\r\n      \r\n      // Acci\xf3n para marcar un producto como destacado\r\n      markAsFeatured: {\r\n        input: {\r\n          featured: 'Boolean!', // true para destacar, false para quitar destacado\r\n          position: 'Int'       // posici\xf3n en la lista de destacados (opcional)\r\n        },\r\n        output: 'Product!',\r\n        resolver: async (product, { featured, position }, context) => {\r\n          if (!context.user.hasPermission('product.feature')) {\r\n            throw new Error('No tienes permiso para destacar productos');\r\n          }\r\n          \r\n          return context.db.update('Product', {\r\n            id: product.id,\r\n            featured,\r\n            featuredPosition: featured ? (position || null) : null,\r\n            featuredAt: featured ? new Date() : null,\r\n            featuredBy: featured ? context.user.id : null\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default Product;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"estructura-de-una-acci\xf3n",children:"Estructura de una acci\xf3n"}),"\n",(0,o.jsx)(n.p,{children:"Cada acci\xf3n tiene la siguiente estructura:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"actionName: {\r\n  input: {\r\n    // Definici\xf3n de los par\xe1metros de entrada\r\n    param1: 'Type1',\r\n    param2: 'Type2',\r\n    // ...\r\n  },\r\n  output: 'OutputType', // Tipo de retorno\r\n  resolver: async (instance, inputs, context) => {\r\n    // Implementaci\xf3n de la acci\xf3n\r\n    // ...\r\n    return result;\r\n  }\r\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Donde:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"actionName"}),": Es el nombre de la acci\xf3n."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"input"}),": Define los par\xe1metros que acepta la acci\xf3n."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"output"}),": Define el tipo de retorno de la acci\xf3n."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"resolver"}),": Es la funci\xf3n que implementa la l\xf3gica de la acci\xf3n.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"instance"}),": Es la instancia del modelo sobre la que se ejecuta la acci\xf3n."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"inputs"}),": Son los par\xe1metros de entrada proporcionados."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"context"}),": Es el contexto de la solicitud, que incluye informaci\xf3n como el usuario actual, la base de datos, etc."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"exposici\xf3n-de-acciones-en-graphql",children:"Exposici\xf3n de acciones en GraphQL"}),"\n",(0,o.jsx)(n.p,{children:"Las acciones se exponen autom\xe1ticamente en GraphQL como mutaciones:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"type Mutation {\r\n  # Otras mutaciones...\r\n  \r\n  # Acci\xf3n para ajustar el stock de un producto\r\n  productAdjustStock(id: ID!, input: ProductAdjustStockInput!): Product!\r\n  \r\n  # Acci\xf3n para marcar un producto como destacado\r\n  productMarkAsFeatured(id: ID!, input: ProductMarkAsFeaturedInput!): Product!\r\n}\r\n\r\ninput ProductAdjustStockInput {\r\n  quantity: Int!\r\n  reason: String!\r\n}\r\n\r\ninput ProductMarkAsFeaturedInput {\r\n  featured: Boolean!\r\n  position: Int\r\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"exposici\xf3n-de-acciones-en-rest-api",children:"Exposici\xf3n de acciones en REST API"}),"\n",(0,o.jsx)(n.p,{children:"Las acciones tambi\xe9n se exponen autom\xe1ticamente en la API REST:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'POST /api/products/:id/adjustStock\r\n{\r\n  "quantity": 10,\r\n  "reason": "Reposici\xf3n de inventario"\r\n}\r\n\r\nPOST /api/products/:id/markAsFeatured\r\n{\r\n  "featured": true,\r\n  "position": 1\r\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"ejemplos-de-acciones-comunes",children:"Ejemplos de acciones comunes"}),"\n",(0,o.jsx)(n.h3,{id:"acci\xf3n-para-aprobar-un-comentario",children:"Acci\xf3n para aprobar un comentario"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/models/Comment.js\r\nimport { Model } from '@nexusdata/core';\r\n\r\nclass Comment extends Model {\r\n  static config = {\r\n    actions: {\r\n      approve: {\r\n        input: {\r\n          sendNotification: 'Boolean' // Opcional, por defecto true\r\n        },\r\n        output: 'Comment!',\r\n        resolver: async (comment, { sendNotification = true }, context) => {\r\n          if (!context.user.hasPermission('comment.approve')) {\r\n            throw new Error('No tienes permiso para aprobar comentarios');\r\n          }\r\n          \r\n          if (comment.status === 'approved') {\r\n            return comment; // Ya est\xe1 aprobado\r\n          }\r\n          \r\n          const updatedComment = await context.db.update('Comment', {\r\n            id: comment.id,\r\n            status: 'approved',\r\n            approvedAt: new Date(),\r\n            approvedBy: context.user.id\r\n          });\r\n          \r\n          // Notificar al autor si se solicita\r\n          if (sendNotification && comment.authorId) {\r\n            await context.db.create('Notification', {\r\n              userId: comment.authorId,\r\n              type: 'comment_approved',\r\n              title: 'Comentario aprobado',\r\n              message: 'Tu comentario ha sido aprobado y ya es visible.',\r\n              data: {\r\n                commentId: comment.id,\r\n                contentId: comment.contentId,\r\n                contentType: comment.contentType\r\n              }\r\n            });\r\n          }\r\n          \r\n          return updatedComment;\r\n        }\r\n      },\r\n      \r\n      reject: {\r\n        input: {\r\n          reason: 'String',\r\n          sendNotification: 'Boolean' // Opcional, por defecto true\r\n        },\r\n        output: 'Comment!',\r\n        resolver: async (comment, { reason, sendNotification = true }, context) => {\r\n          if (!context.user.hasPermission('comment.reject')) {\r\n            throw new Error('No tienes permiso para rechazar comentarios');\r\n          }\r\n          \r\n          if (comment.status === 'rejected') {\r\n            return comment; // Ya est\xe1 rechazado\r\n          }\r\n          \r\n          const updatedComment = await context.db.update('Comment', {\r\n            id: comment.id,\r\n            status: 'rejected',\r\n            rejectedAt: new Date(),\r\n            rejectedBy: context.user.id,\r\n            rejectionReason: reason || null\r\n          });\r\n          \r\n          // Notificar al autor si se solicita\r\n          if (sendNotification && comment.authorId) {\r\n            await context.db.create('Notification', {\r\n              userId: comment.authorId,\r\n              type: 'comment_rejected',\r\n              title: 'Comentario rechazado',\r\n              message: reason \r\n                ? `Tu comentario ha sido rechazado: ${reason}`\r\n                : 'Tu comentario ha sido rechazado.',\r\n              data: {\r\n                commentId: comment.id,\r\n                contentId: comment.contentId,\r\n                contentType: comment.contentType\r\n              }\r\n            });\r\n          }\r\n          \r\n          return updatedComment;\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default Comment;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"acci\xf3n-para-procesar-un-pedido",children:"Acci\xf3n para procesar un pedido"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/models/Order.js\r\nimport { Model } from '@nexusdata/core';\r\n\r\nclass Order extends Model {\r\n  static config = {\r\n    actions: {\r\n      process: {\r\n        input: {\r\n          trackingNumber: 'String',\r\n          carrier: 'String',\r\n          notes: 'String'\r\n        },\r\n        output: 'Order!',\r\n        resolver: async (order, { trackingNumber, carrier, notes }, context) => {\r\n          if (!context.user.hasPermission('order.process')) {\r\n            throw new Error('No tienes permiso para procesar pedidos');\r\n          }\r\n          \r\n          if (order.status !== 'paid') {\r\n            throw new Error(`No se puede procesar un pedido en estado ${order.status}`);\r\n          }\r\n          \r\n          // Actualizar el pedido\r\n          const updatedOrder = await context.db.update('Order', {\r\n            id: order.id,\r\n            status: 'processing',\r\n            processingStartedAt: new Date(),\r\n            processingNotes: notes || null,\r\n            processedBy: context.user.id\r\n          });\r\n          \r\n          // Crear env\xedo si se proporciona informaci\xf3n de seguimiento\r\n          if (trackingNumber && carrier) {\r\n            await context.db.create('Shipment', {\r\n              orderId: order.id,\r\n              trackingNumber,\r\n              carrier,\r\n              status: 'pending',\r\n              createdAt: new Date(),\r\n              createdBy: context.user.id\r\n            });\r\n            \r\n            // Notificar al cliente\r\n            await context.db.create('Notification', {\r\n              userId: order.userId,\r\n              type: 'order_processing',\r\n              title: 'Pedido en proceso',\r\n              message: `Tu pedido #${order.id} est\xe1 siendo procesado.`,\r\n              data: { orderId: order.id }\r\n            });\r\n          }\r\n          \r\n          return updatedOrder;\r\n        }\r\n      },\r\n      \r\n      markAsShipped: {\r\n        input: {\r\n          trackingNumber: 'String!',\r\n          carrier: 'String!',\r\n          estimatedDelivery: 'DateTime'\r\n        },\r\n        output: 'Order!',\r\n        resolver: async (order, { trackingNumber, carrier, estimatedDelivery }, context) => {\r\n          if (!context.user.hasPermission('order.ship')) {\r\n            throw new Error('No tienes permiso para marcar pedidos como enviados');\r\n          }\r\n          \r\n          if (!['paid', 'processing'].includes(order.status)) {\r\n            throw new Error(`No se puede enviar un pedido en estado ${order.status}`);\r\n          }\r\n          \r\n          // Buscar o crear env\xedo\r\n          let shipment = await context.db.findOne('Shipment', { orderId: order.id });\r\n          \r\n          if (shipment) {\r\n            // Actualizar env\xedo existente\r\n            shipment = await context.db.update('Shipment', {\r\n              id: shipment.id,\r\n              trackingNumber,\r\n              carrier,\r\n              status: 'shipped',\r\n              shippedAt: new Date(),\r\n              estimatedDelivery: estimatedDelivery || null\r\n            });\r\n          } else {\r\n            // Crear nuevo env\xedo\r\n            shipment = await context.db.create('Shipment', {\r\n              orderId: order.id,\r\n              trackingNumber,\r\n              carrier,\r\n              status: 'shipped',\r\n              createdAt: new Date(),\r\n              shippedAt: new Date(),\r\n              createdBy: context.user.id,\r\n              estimatedDelivery: estimatedDelivery || null\r\n            });\r\n          }\r\n          \r\n          // Actualizar pedido\r\n          const updatedOrder = await context.db.update('Order', {\r\n            id: order.id,\r\n            status: 'shipped',\r\n            shippedAt: new Date(),\r\n            shippedBy: context.user.id\r\n          });\r\n          \r\n          // Notificar al cliente\r\n          await context.db.create('Notification', {\r\n            userId: order.userId,\r\n            type: 'order_shipped',\r\n            title: 'Pedido enviado',\r\n            message: `Tu pedido #${order.id} ha sido enviado. Puedes seguirlo con el n\xfamero ${trackingNumber} a trav\xe9s de ${carrier}.`,\r\n            data: { \r\n              orderId: order.id,\r\n              trackingNumber,\r\n              carrier,\r\n              estimatedDelivery\r\n            }\r\n          });\r\n          \r\n          // Enviar correo de confirmaci\xf3n\r\n          await context.services.EmailService.sendShippingConfirmation(order.id, shipment);\r\n          \r\n          return updatedOrder;\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default Order;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"acciones-a-nivel-de-colecci\xf3n",children:"Acciones a nivel de colecci\xf3n"}),"\n",(0,o.jsx)(n.p,{children:"Adem\xe1s de las acciones que operan sobre instancias espec\xedficas, tambi\xe9n puedes definir acciones a nivel de colecci\xf3n que operan sobre el modelo en general:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// src/models/Product.js\r\nimport { Model } from '@nexusdata/core';\r\n\r\nclass Product extends Model {\r\n  static config = {\r\n    collectionActions: {\r\n      importFromCsv: {\r\n        input: {\r\n          fileUrl: 'String!',\r\n          updateExisting: 'Boolean',\r\n          notifyOnCompletion: 'Boolean'\r\n        },\r\n        output: 'ImportResult!',\r\n        resolver: async (_, { fileUrl, updateExisting = true, notifyOnCompletion = true }, context) => {\r\n          if (!context.user.hasPermission('product.import')) {\r\n            throw new Error('No tienes permiso para importar productos');\r\n          }\r\n          \r\n          // Crear tarea de importaci\xf3n\r\n          const importTask = await context.db.create('ImportTask', {\r\n            type: 'product',\r\n            fileUrl,\r\n            status: 'pending',\r\n            options: {\r\n              updateExisting,\r\n              notifyOnCompletion\r\n            },\r\n            createdBy: context.user.id,\r\n            createdAt: new Date()\r\n          });\r\n          \r\n          // Iniciar proceso de importaci\xf3n en segundo plano\r\n          context.services.ImportService.processImport(importTask.id);\r\n          \r\n          return {\r\n            success: true,\r\n            message: 'Importaci\xf3n iniciada',\r\n            taskId: importTask.id\r\n          };\r\n        }\r\n      },\r\n      \r\n      recalculatePrices: {\r\n        input: {\r\n          category: 'String',\r\n          adjustmentPercentage: 'Float!',\r\n          applyToDiscounted: 'Boolean'\r\n        },\r\n        output: 'BatchUpdateResult!',\r\n        resolver: async (_, { category, adjustmentPercentage, applyToDiscounted = false }, context) => {\r\n          if (!context.user.hasPermission('product.updatePrices')) {\r\n            throw new Error('No tienes permiso para actualizar precios');\r\n          }\r\n          \r\n          // Construir condici\xf3n de filtrado\r\n          const where = {};\r\n          \r\n          if (category) {\r\n            where.category = category;\r\n          }\r\n          \r\n          if (!applyToDiscounted) {\r\n            where.discountedPrice = null;\r\n          }\r\n          \r\n          // Actualizar precios\r\n          const factor = 1 + (adjustmentPercentage / 100);\r\n          \r\n          const result = await context.db.updateMany('Product', {\r\n            where,\r\n            data: {\r\n              price: { multiply: factor }\r\n            }\r\n          });\r\n          \r\n          // Registrar la operaci\xf3n\r\n          await context.db.create('PriceAdjustmentLog', {\r\n            category: category || 'all',\r\n            adjustmentPercentage,\r\n            applyToDiscounted,\r\n            affectedProducts: result.count,\r\n            performedBy: context.user.id,\r\n            performedAt: new Date()\r\n          });\r\n          \r\n          return {\r\n            success: true,\r\n            count: result.count,\r\n            message: `Se actualizaron ${result.count} productos con un ajuste del ${adjustmentPercentage}%`\r\n          };\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default Product;\n"})}),"\n",(0,o.jsx)(n.p,{children:"Estas acciones se exponen en GraphQL como:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-graphql",children:"type Mutation {\r\n  # Otras mutaciones...\r\n  \r\n  # Acci\xf3n para importar productos desde CSV\r\n  productImportFromCsv(input: ProductImportFromCsvInput!): ImportResult!\r\n  \r\n  # Acci\xf3n para recalcular precios\r\n  productRecalculatePrices(input: ProductRecalculatePricesInput!): BatchUpdateResult!\r\n}\r\n\r\ninput ProductImportFromCsvInput {\r\n  fileUrl: String!\r\n  updateExisting: Boolean\r\n  notifyOnCompletion: Boolean\r\n}\r\n\r\ninput ProductRecalculatePricesInput {\r\n  category: String\r\n  adjustmentPercentage: Float!\r\n  applyToDiscounted: Boolean\r\n}\r\n\r\ntype ImportResult {\r\n  success: Boolean!\r\n  message: String\r\n  taskId: ID\r\n}\r\n\r\ntype BatchUpdateResult {\r\n  success: Boolean!\r\n  count: Int!\r\n  message: String\r\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Y en REST API como:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'POST /api/products/importFromCsv\r\n{\r\n  "fileUrl": "https://example.com/products.csv",\r\n  "updateExisting": true,\r\n  "notifyOnCompletion": true\r\n}\r\n\r\nPOST /api/products/recalculatePrices\r\n{\r\n  "category": "electronics",\r\n  "adjustmentPercentage": 5.5,\r\n  "applyToDiscounted": false\r\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"mejores-pr\xe1cticas",children:"Mejores pr\xe1cticas"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Nombres descriptivos"}),": Usa nombres de acciones que describan claramente lo que hacen."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Validaci\xf3n de permisos"}),": Siempre verifica que el usuario tiene los permisos necesarios para ejecutar la acci\xf3n."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Validaci\xf3n de estado"}),": Verifica que el modelo est\xe1 en un estado v\xe1lido para la acci\xf3n."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Transacciones"}),": Usa transacciones cuando la acci\xf3n modifica m\xfaltiples registros."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Notificaciones"}),": Considera enviar notificaciones cuando sea apropiado."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Auditor\xeda"}),": Registra qui\xe9n realiz\xf3 la acci\xf3n y cu\xe1ndo."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Idempotencia"}),": Cuando sea posible, dise\xf1a acciones que sean idempotentes (pueden ejecutarse m\xfaltiples veces sin efectos secundarios)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Documentaci\xf3n"}),": Documenta claramente qu\xe9 hace cada acci\xf3n, qu\xe9 par\xe1metros acepta y qu\xe9 devuelve."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{})})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);