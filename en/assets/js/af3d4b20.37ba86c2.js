"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8399],{4217:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"graphql-api/mutations","title":"Mutaciones","description":"Las mutaciones GraphQL te permiten modificar datos en tu API NexusData. A diferencia de las consultas que solo recuperan datos, las mutaciones est\xe1n dise\xf1adas para crear, actualizar o eliminar informaci\xf3n.","source":"@site/docs/graphql-api/mutations.md","sourceDirName":"graphql-api","slug":"/graphql-api/mutations","permalink":"/nexusdata/en/docs/graphql-api/mutations","draft":false,"unlisted":false,"editUrl":"https://github.com/mbescalante/nexusdata/edit/main/docs/graphql-api/mutations.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Consultas","permalink":"/nexusdata/en/docs/graphql-api/queries"},"next":{"title":"Suscripciones","permalink":"/nexusdata/en/docs/graphql-api/subscriptions"}}');var t=n(4848),s=n(8453);const i={sidebar_position:2},o="Mutaciones",c={},d=[{value:"Estructura B\xe1sica de Mutaciones",id:"estructura-b\xe1sica-de-mutaciones",level:2},{value:"Mutaciones Generadas Autom\xe1ticamente",id:"mutaciones-generadas-autom\xe1ticamente",level:2},{value:"Crear Registro (create)",id:"crear-registro-create",level:3},{value:"Crear M\xfaltiples Registros (createMany)",id:"crear-m\xfaltiples-registros-createmany",level:3},{value:"Actualizar Registro (update)",id:"actualizar-registro-update",level:3},{value:"Actualizar M\xfaltiples Registros (updateMany)",id:"actualizar-m\xfaltiples-registros-updatemany",level:3},{value:"Upsert (upsert)",id:"upsert-upsert",level:3},{value:"Eliminar Registro (delete)",id:"eliminar-registro-delete",level:3},{value:"Eliminar M\xfaltiples Registros (deleteMany)",id:"eliminar-m\xfaltiples-registros-deletemany",level:3},{value:"Operaciones Anidadas",id:"operaciones-anidadas",level:2},{value:"Crear con Relaciones",id:"crear-con-relaciones",level:3},{value:"Actualizar con Relaciones",id:"actualizar-con-relaciones",level:3},{value:"Operadores de Actualizaci\xf3n",id:"operadores-de-actualizaci\xf3n",level:2},{value:"Mutaciones con Variables",id:"mutaciones-con-variables",level:2},{value:"Mutaciones en Lote",id:"mutaciones-en-lote",level:2},{value:"Manejo de Errores",id:"manejo-de-errores",level:2},{value:"Mutaciones Personalizadas",id:"mutaciones-personalizadas",level:2},{value:"Transacciones",id:"transacciones",level:2},{value:"Pr\xf3ximos Pasos",id:"pr\xf3ximos-pasos",level:2}];function l(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"mutaciones",children:"Mutaciones"})}),"\n",(0,t.jsx)(r.p,{children:"Las mutaciones GraphQL te permiten modificar datos en tu API NexusData. A diferencia de las consultas que solo recuperan datos, las mutaciones est\xe1n dise\xf1adas para crear, actualizar o eliminar informaci\xf3n."}),"\n",(0,t.jsx)(r.h2,{id:"estructura-b\xe1sica-de-mutaciones",children:"Estructura B\xe1sica de Mutaciones"}),"\n",(0,t.jsx)(r.p,{children:"Una mutaci\xf3n GraphQL b\xe1sica tiene la siguiente estructura:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:"mutation {\r\n  actionName(input: { field: value }) {\r\n    field1\r\n    field2\r\n    relation {\r\n      field1\r\n      field2\r\n    }\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"mutaciones-generadas-autom\xe1ticamente",children:"Mutaciones Generadas Autom\xe1ticamente"}),"\n",(0,t.jsx)(r.p,{children:"NexusData genera autom\xe1ticamente las siguientes mutaciones para cada modelo:"}),"\n",(0,t.jsx)(r.h3,{id:"crear-registro-create",children:"Crear Registro (create)"}),"\n",(0,t.jsx)(r.p,{children:"Crea un nuevo registro:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:'mutation {\r\n  createUser(data: {\r\n    email: "nuevo@ejemplo.com",\r\n    firstName: "Nuevo",\r\n    lastName: "Usuario",\r\n    role: USER\r\n  }) {\r\n    id\r\n    email\r\n    createdAt\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"crear-m\xfaltiples-registros-createmany",children:"Crear M\xfaltiples Registros (createMany)"}),"\n",(0,t.jsx)(r.p,{children:"Crea m\xfaltiples registros en una sola operaci\xf3n:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:'mutation {\r\n  createManyProducts(data: [\r\n    { name: "Producto 1", price: 99.99, categoryId: "cat1" },\r\n    { name: "Producto 2", price: 149.99, categoryId: "cat1" },\r\n    { name: "Producto 3", price: 199.99, categoryId: "cat2" }\r\n  ]) {\r\n    count\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"actualizar-registro-update",children:"Actualizar Registro (update)"}),"\n",(0,t.jsx)(r.p,{children:"Actualiza un registro existente:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:'mutation {\r\n  updateUser(\r\n    where: { id: "123" },\r\n    data: {\r\n      firstName: "Nombre Actualizado",\r\n      lastName: "Apellido Actualizado",\r\n      profile: {\r\n        update: {\r\n          bio: "Nueva biograf\xeda"\r\n        }\r\n      }\r\n    }\r\n  ) {\r\n    id\r\n    firstName\r\n    lastName\r\n    profile {\r\n      bio\r\n    }\r\n    updatedAt\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"actualizar-m\xfaltiples-registros-updatemany",children:"Actualizar M\xfaltiples Registros (updateMany)"}),"\n",(0,t.jsx)(r.p,{children:"Actualiza m\xfaltiples registros que coincidan con ciertos criterios:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:'mutation {\r\n  updateManyProducts(\r\n    where: { category: "Electronics", price: { lt: 100 } },\r\n    data: { onSale: true, discountPercentage: 10 }\r\n  ) {\r\n    count\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"upsert-upsert",children:"Upsert (upsert)"}),"\n",(0,t.jsx)(r.p,{children:"Crea un registro si no existe, o lo actualiza si existe:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:'mutation {\r\n  upsertProduct(\r\n    where: { sku: "ABC123" },\r\n    create: {\r\n      name: "Nuevo Producto",\r\n      sku: "ABC123",\r\n      price: 129.99,\r\n      categoryId: "cat1"\r\n    },\r\n    update: {\r\n      price: 129.99,\r\n      stock: { increment: 10 }\r\n    }\r\n  ) {\r\n    id\r\n    name\r\n    price\r\n    stock\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"eliminar-registro-delete",children:"Eliminar Registro (delete)"}),"\n",(0,t.jsx)(r.p,{children:"Elimina un registro existente:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:'mutation {\r\n  deleteUser(where: { id: "123" }) {\r\n    id\r\n    email\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"eliminar-m\xfaltiples-registros-deletemany",children:"Eliminar M\xfaltiples Registros (deleteMany)"}),"\n",(0,t.jsx)(r.p,{children:"Elimina m\xfaltiples registros que coincidan con ciertos criterios:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:'mutation {\r\n  deleteManyCarts(where: { \r\n    updatedAt: { lt: "2023-01-01T00:00:00Z" },\r\n    items: { none: {} }\r\n  }) {\r\n    count\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"operaciones-anidadas",children:"Operaciones Anidadas"}),"\n",(0,t.jsx)(r.p,{children:"NexusData permite realizar operaciones anidadas en relaciones:"}),"\n",(0,t.jsx)(r.h3,{id:"crear-con-relaciones",children:"Crear con Relaciones"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:'mutation {\r\n  createPost(data: {\r\n    title: "Nuevo Art\xedculo",\r\n    content: "Contenido del art\xedculo...",\r\n    published: true,\r\n    author: {\r\n      connect: { id: "author123" }\r\n    },\r\n    categories: {\r\n      connect: [{ id: "cat1" }, { id: "cat2" }]\r\n    },\r\n    tags: {\r\n      create: [\r\n        { name: "GraphQL" },\r\n        { name: "Tutorial" }\r\n      ]\r\n    },\r\n    comments: {\r\n      createMany: {\r\n        data: [\r\n          { content: "\xa1Gran art\xedculo!", userId: "user1" },\r\n          { content: "Muy informativo", userId: "user2" }\r\n        ]\r\n      }\r\n    }\r\n  }) {\r\n    id\r\n    title\r\n    author {\r\n      name\r\n    }\r\n    categories {\r\n      name\r\n    }\r\n    tags {\r\n      name\r\n    }\r\n    comments {\r\n      content\r\n      user {\r\n        name\r\n      }\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"actualizar-con-relaciones",children:"Actualizar con Relaciones"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:'mutation {\r\n  updatePost(\r\n    where: { id: "post123" },\r\n    data: {\r\n      title: "T\xedtulo Actualizado",\r\n      categories: {\r\n        disconnect: [{ id: "cat3" }],\r\n        connect: [{ id: "cat4" }]\r\n      },\r\n      tags: {\r\n        deleteMany: { name: { contains: "obsoleto" } },\r\n        create: [{ name: "Actualizado" }]\r\n      },\r\n      comments: {\r\n        updateMany: {\r\n          where: { approved: false },\r\n          data: { approved: true }\r\n        }\r\n      }\r\n    }\r\n  ) {\r\n    id\r\n    title\r\n    categories {\r\n      name\r\n    }\r\n    tags {\r\n      name\r\n    }\r\n    comments {\r\n      content\r\n      approved\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"operadores-de-actualizaci\xf3n",children:"Operadores de Actualizaci\xf3n"}),"\n",(0,t.jsx)(r.p,{children:"NexusData proporciona operadores especiales para actualizaciones:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:'mutation {\r\n  updateProduct(\r\n    where: { id: "prod123" },\r\n    data: {\r\n      price: { increment: 10.5 },  // Incrementar valor\r\n      stock: { decrement: 5 },     // Decrementar valor\r\n      views: { multiply: 2 },      // Multiplicar valor\r\n      rating: { divide: 1.1 },     // Dividir valor\r\n      tags: { push: "nuevo-tag" }, // A\xf1adir a array\r\n      description: { set: "Nueva descripci\xf3n" } // Establecer valor\r\n    }\r\n  ) {\r\n    id\r\n    price\r\n    stock\r\n    views\r\n    rating\r\n    tags\r\n    description\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"mutaciones-con-variables",children:"Mutaciones con Variables"}),"\n",(0,t.jsx)(r.p,{children:"Las variables GraphQL te permiten reutilizar mutaciones y pasar valores din\xe1micos:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:"mutation CreateUser($data: UserCreateInput!) {\r\n  createUser(data: $data) {\r\n    id\r\n    email\r\n    firstName\r\n    lastName\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"Variables:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\r\n  "data": {\r\n    "email": "usuario@ejemplo.com",\r\n    "firstName": "Nombre",\r\n    "lastName": "Apellido",\r\n    "role": "USER"\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"mutaciones-en-lote",children:"Mutaciones en Lote"}),"\n",(0,t.jsx)(r.p,{children:"Para operaciones complejas, puedes combinar m\xfaltiples mutaciones en una sola solicitud:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:'mutation {\r\n  # Crear un nuevo usuario\r\n  newUser: createUser(data: {\r\n    email: "nuevo@ejemplo.com",\r\n    firstName: "Nuevo",\r\n    lastName: "Usuario"\r\n  }) {\r\n    id\r\n  }\r\n  \r\n  # Actualizar un usuario existente\r\n  updatedUser: updateUser(\r\n    where: { id: "user123" },\r\n    data: { role: ADMIN }\r\n  ) {\r\n    id\r\n    role\r\n  }\r\n  \r\n  # Eliminar un usuario\r\n  deletedUser: deleteUser(where: { id: "user456" }) {\r\n    id\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"manejo-de-errores",children:"Manejo de Errores"}),"\n",(0,t.jsx)(r.p,{children:"NexusData proporciona informaci\xf3n detallada sobre errores en mutaciones:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:'mutation {\r\n  createUser(data: {\r\n    email: "usuario@ejemplo.com",\r\n    firstName: "Nombre"\r\n    # Error: lastName es requerido pero falta\r\n  }) {\r\n    id\r\n    email\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"Respuesta de error:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{\r\n  "errors": [\r\n    {\r\n      "message": "Field \'lastName\' of required type \'String!\' was not provided.",\r\n      "locations": [\r\n        {\r\n          "line": 2,\r\n          "column": 3\r\n        }\r\n      ],\r\n      "path": ["createUser"],\r\n      "extensions": {\r\n        "code": "BAD_USER_INPUT",\r\n        "field": "lastName",\r\n        "model": "User"\r\n      }\r\n    }\r\n  ],\r\n  "data": null\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"mutaciones-personalizadas",children:"Mutaciones Personalizadas"}),"\n",(0,t.jsx)(r.p,{children:"Adem\xe1s de las mutaciones generadas autom\xe1ticamente, puedes definir mutaciones personalizadas:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// src/resolvers/orders/processPayment.js\r\nmodule.exports = {\r\n  name: 'processPayment',\r\n  type: 'PaymentResult',\r\n  args: {\r\n    orderId: 'ID!',\r\n    paymentMethod: 'PaymentMethodInput!'\r\n  },\r\n  resolve: async (parent, args, context) => {\r\n    const { orderId, paymentMethod } = args;\r\n    const { models, services } = context;\r\n    \r\n    // Obtener la orden\r\n    const order = await models.Order.findUnique({\r\n      where: { id: orderId },\r\n      include: { items: true }\r\n    });\r\n    \r\n    if (!order) {\r\n      throw new Error('Orden no encontrada');\r\n    }\r\n    \r\n    // Procesar el pago\r\n    const paymentResult = await services.payments.processPayment({\r\n      amount: order.totalAmount,\r\n      method: paymentMethod,\r\n      orderId: order.id\r\n    });\r\n    \r\n    // Actualizar el estado de la orden\r\n    await models.Order.update({\r\n      where: { id: orderId },\r\n      data: {\r\n        status: paymentResult.success ? 'PAID' : 'PAYMENT_FAILED',\r\n        paymentId: paymentResult.paymentId\r\n      }\r\n    });\r\n    \r\n    return paymentResult;\r\n  }\r\n};\n"})}),"\n",(0,t.jsx)(r.p,{children:"Uso:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-graphql",children:'mutation {\r\n  processPayment(\r\n    orderId: "order123",\r\n    paymentMethod: {\r\n      type: CREDIT_CARD,\r\n      cardNumber: "4242424242424242",\r\n      expiryMonth: 12,\r\n      expiryYear: 2025,\r\n      cvc: "123"\r\n    }\r\n  ) {\r\n    success\r\n    paymentId\r\n    message\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"transacciones",children:"Transacciones"}),"\n",(0,t.jsx)(r.p,{children:"NexusData maneja autom\xe1ticamente transacciones para garantizar la integridad de los datos:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"// src/resolvers/inventory/transferStock.js\r\nmodule.exports = {\r\n  name: 'transferStock',\r\n  type: 'TransferResult',\r\n  args: {\r\n    fromWarehouseId: 'ID!',\r\n    toWarehouseId: 'ID!',\r\n    productId: 'ID!',\r\n    quantity: 'Int!'\r\n  },\r\n  resolve: async (parent, args, context) => {\r\n    const { fromWarehouseId, toWarehouseId, productId, quantity } = args;\r\n    const { models, db } = context;\r\n    \r\n    // Usar transacci\xf3n para garantizar atomicidad\r\n    return await db.transaction(async (tx) => {\r\n      // Verificar stock disponible\r\n      const sourceStock = await tx.WarehouseStock.findUnique({\r\n        where: {\r\n          warehouseId_productId: {\r\n            warehouseId: fromWarehouseId,\r\n            productId\r\n          }\r\n        }\r\n      });\r\n      \r\n      if (!sourceStock || sourceStock.quantity < quantity) {\r\n        throw new Error('Stock insuficiente para transferir');\r\n      }\r\n      \r\n      // Reducir stock en almac\xe9n origen\r\n      await tx.WarehouseStock.update({\r\n        where: {\r\n          warehouseId_productId: {\r\n            warehouseId: fromWarehouseId,\r\n            productId\r\n          }\r\n        },\r\n        data: {\r\n          quantity: { decrement: quantity }\r\n        }\r\n      });\r\n      \r\n      // Aumentar stock en almac\xe9n destino\r\n      await tx.WarehouseStock.upsert({\r\n        where: {\r\n          warehouseId_productId: {\r\n            warehouseId: toWarehouseId,\r\n            productId\r\n          }\r\n        },\r\n        create: {\r\n          warehouseId: toWarehouseId,\r\n          productId,\r\n          quantity\r\n        },\r\n        update: {   \r\n          quantity: { increment: quantity }\r\n        }\r\n      });\r\n      \r\n      // Registrar la transferencia\r\n      const transfer = await tx.StockTransfer.create({\r\n        data: {\r\n          fromWarehouseId,\r\n          toWarehouseId,\r\n          productId,\r\n          quantity,\r\n          status: 'COMPLETED'\r\n        }\r\n      });\r\n      \r\n      return {\r\n        success: true,\r\n        transferId: transfer.id,\r\n        message: `Transferencia de ${quantity} unidades completada`\r\n      };\r\n    });\r\n  }\r\n};\n"})}),"\n",(0,t.jsx)(r.h2,{id:"pr\xf3ximos-pasos",children:"Pr\xf3ximos Pasos"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Aprende sobre consultas GraphQL para recuperar datos"}),"\n",(0,t.jsx)(r.li,{children:"Explora suscripciones GraphQL para datos en tiempo real"}),"\n",(0,t.jsx)(r.li,{children:"Implementa l\xf3gica de negocio personalizada en tus resolvers"}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var a=n(6540);const t={},s=a.createContext(t);function i(e){const r=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:r},e.children)}}}]);