"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9323],{8453:(r,e,n)=>{n.d(e,{R:()=>o,x:()=>a});var i=n(6540);const t={},s=i.createContext(t);function o(r){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function a(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(t):r.components||t:o(r.components),i.createElement(s.Provider,{value:e},r.children)}},9855:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"business-logic/servicios","title":"Servicios","description":"Implementaci\xf3n de servicios para encapsular l\xf3gica de negocio compleja en NexusData","source":"@site/docs/business-logic/servicios.md","sourceDirName":"business-logic","slug":"/business-logic/servicios","permalink":"/docs/business-logic/servicios","draft":false,"unlisted":false,"editUrl":"https://github.com/nexusdata/nexusdata-docs/edit/main/docs/business-logic/servicios.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Servicios","description":"Implementaci\xf3n de servicios para encapsular l\xf3gica de negocio compleja en NexusData"},"sidebar":"tutorialSidebar","previous":{"title":"Hooks y Middleware","permalink":"/docs/business-logic/hooks"},"next":{"title":"Acciones Personalizadas","permalink":"/docs/business-logic/acciones"}}');var t=n(4848),s=n(8453);const o={sidebar_position:2,title:"Servicios",description:"Implementaci\xf3n de servicios para encapsular l\xf3gica de negocio compleja en NexusData"},a="Servicios",c={},d=[{value:"\xbfQu\xe9 son los servicios?",id:"qu\xe9-son-los-servicios",level:2},{value:"Creaci\xf3n de servicios",id:"creaci\xf3n-de-servicios",level:2},{value:"Estructura b\xe1sica",id:"estructura-b\xe1sica",level:3},{value:"Servicio con l\xf3gica compleja",id:"servicio-con-l\xf3gica-compleja",level:3},{value:"Registro de servicios",id:"registro-de-servicios",level:2},{value:"Uso de servicios",id:"uso-de-servicios",level:2},{value:"En resolvers de GraphQL",id:"en-resolvers-de-graphql",level:3},{value:"En controladores HTTP",id:"en-controladores-http",level:3},{value:"En otros servicios",id:"en-otros-servicios",level:3},{value:"Inyecci\xf3n de dependencias",id:"inyecci\xf3n-de-dependencias",level:2},{value:"Patrones comunes",id:"patrones-comunes",level:2},{value:"Servicio de notificaciones",id:"servicio-de-notificaciones",level:3}];function l(r){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"servicios",children:"Servicios"})}),"\n",(0,t.jsx)(e.p,{children:"Los servicios en NexusData te permiten encapsular l\xf3gica de negocio compleja y reutilizable, facilitando la organizaci\xf3n y mantenimiento de tu c\xf3digo."}),"\n",(0,t.jsx)(e.h2,{id:"qu\xe9-son-los-servicios",children:"\xbfQu\xe9 son los servicios?"}),"\n",(0,t.jsx)(e.p,{children:"Los servicios son clases que contienen m\xe9todos para implementar operaciones de negocio que:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Involucran m\xfaltiples modelos"}),"\n",(0,t.jsx)(e.li,{children:"Requieren transacciones"}),"\n",(0,t.jsx)(e.li,{children:"Implementan flujos de trabajo complejos"}),"\n",(0,t.jsx)(e.li,{children:"Interact\xfaan con APIs externas"}),"\n",(0,t.jsx)(e.li,{children:"Encapsulan l\xf3gica que se utiliza en m\xfaltiples partes de la aplicaci\xf3n"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"creaci\xf3n-de-servicios",children:"Creaci\xf3n de servicios"}),"\n",(0,t.jsx)(e.h3,{id:"estructura-b\xe1sica",children:"Estructura b\xe1sica"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// src/services/UserService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass UserService extends Service {\r\n  async registerUser(userData, context) {\r\n    // Implementaci\xf3n del m\xe9todo\r\n  }\r\n  \r\n  async resetPassword(email, context) {\r\n    // Implementaci\xf3n del m\xe9todo\r\n  }\r\n}\r\n\r\nexport default UserService;\n"})}),"\n",(0,t.jsx)(e.h3,{id:"servicio-con-l\xf3gica-compleja",children:"Servicio con l\xf3gica compleja"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// src/services/OrderService.js\r\nimport { Service } from '@nexusdata/core';\r\nimport { Order, LineItem, Product, Notification } from '../models';\r\nimport { InsufficientStockError } from '../errors';\r\n\r\nclass OrderService extends Service {\r\n  async createOrder(data, context) {\r\n    // Iniciar transacci\xf3n\r\n    return this.db.transaction(async (tx) => {\r\n      // Verificar stock disponible\r\n      for (const item of data.items) {\r\n        const product = await tx.findOne(Product, { id: item.productId });\r\n        \r\n        if (!product) {\r\n          throw new Error(`Producto no encontrado: ${item.productId}`);\r\n        }\r\n        \r\n        if (product.stock < item.quantity) {\r\n          throw new InsufficientStockError(product.name, product.stock, item.quantity);\r\n        }\r\n      }\r\n      \r\n      // Calcular total\r\n      let total = 0;\r\n      const lineItems = [];\r\n      \r\n      for (const item of data.items) {\r\n        const product = await tx.findOne(Product, { id: item.productId });\r\n        const price = item.price || product.price;\r\n        const subtotal = price * item.quantity;\r\n        \r\n        lineItems.push({\r\n          productId: product.id,\r\n          productName: product.name,\r\n          quantity: item.quantity,\r\n          price,\r\n          subtotal\r\n        });\r\n        \r\n        total += subtotal;\r\n        \r\n        // Actualizar stock\r\n        await tx.update(Product, {\r\n          id: product.id,\r\n          stock: product.stock - item.quantity\r\n        });\r\n      }\r\n      \r\n      // Crear orden\r\n      const order = await tx.create(Order, {\r\n        userId: context.user.id,\r\n        status: 'pending',\r\n        total,\r\n        ...data,\r\n      });\r\n      \r\n      // Crear l\xedneas de orden\r\n      for (const item of lineItems) {\r\n        await tx.create(LineItem, {\r\n          ...item,\r\n          orderId: order.id\r\n        });\r\n      }\r\n      \r\n      // Enviar notificaci\xf3n\r\n      await tx.create(Notification, {\r\n        userId: context.user.id,\r\n        type: 'order_created',\r\n        title: 'Nuevo pedido',\r\n        message: `Tu pedido #${order.id} ha sido creado exitosamente.`,\r\n        data: { orderId: order.id }\r\n      });\r\n      \r\n      return order;\r\n    });\r\n  }\r\n  \r\n  async processPayment(orderId, paymentData, context) {\r\n    const order = await this.db.findOne(Order, { id: orderId });\r\n    \r\n    if (!order) {\r\n      throw new Error('Orden no encontrada');\r\n    }\r\n    \r\n    if (order.status !== 'pending') {\r\n      throw new Error(`No se puede procesar el pago para una orden en estado ${order.status}`);\r\n    }\r\n    \r\n    // Procesar pago con un gateway externo\r\n    const paymentResult = await this.paymentGateway.processPayment({\r\n      amount: order.total,\r\n      currency: 'EUR',\r\n      description: `Pago de orden #${order.id}`,\r\n      ...paymentData\r\n    });\r\n    \r\n    if (paymentResult.success) {\r\n      // Actualizar estado de la orden\r\n      await this.db.update(Order, {\r\n        id: order.id,\r\n        status: 'paid',\r\n        paymentId: paymentResult.id,\r\n        paymentMethod: paymentData.method\r\n      });\r\n      \r\n      // Notificar al usuario\r\n      await this.db.create(Notification, {\r\n        userId: order.userId,\r\n        type: 'payment_successful',\r\n        title: 'Pago procesado',\r\n        message: `El pago para tu pedido #${order.id} ha sido procesado exitosamente.`,\r\n        data: { orderId: order.id }\r\n      });\r\n      \r\n      // Enviar correo de confirmaci\xf3n\r\n      await this.emailService.sendOrderConfirmation(order.id);\r\n      \r\n      return { success: true, order: await this.db.findOne(Order, { id: order.id }) };\r\n    } else {\r\n      // Registrar error de pago\r\n      await this.db.create(PaymentError, {\r\n        orderId: order.id,\r\n        code: paymentResult.error.code,\r\n        message: paymentResult.error.message,\r\n        data: paymentResult.error\r\n      });\r\n      \r\n      return { success: false, error: paymentResult.error };\r\n    }\r\n  }\r\n  \r\n  async cancelOrder(orderId, reason, context) {\r\n    return this.db.transaction(async (tx) => {\r\n      const order = await tx.findOne(Order, { id: orderId });\r\n      \r\n      if (!order) {\r\n        throw new Error('Orden no encontrada');\r\n      }\r\n      \r\n      if (!['pending', 'paid'].includes(order.status)) {\r\n        throw new Error(`No se puede cancelar una orden en estado ${order.status}`);\r\n      }\r\n      \r\n      // Actualizar estado de la orden\r\n      await tx.update(Order, {\r\n        id: order.id,\r\n        status: 'cancelled',\r\n        cancelledAt: new Date(),\r\n        cancellationReason: reason\r\n      });\r\n      \r\n      // Restaurar stock\r\n      const lineItems = await tx.findMany(LineItem, { orderId: order.id });\r\n      \r\n      for (const item of lineItems) {\r\n        await tx.update(Product, {\r\n          id: item.productId,\r\n          stock: { increment: item.quantity }\r\n        });\r\n      }\r\n      \r\n      // Notificar al usuario\r\n      await tx.create(Notification, {\r\n        userId: order.userId,\r\n        type: 'order_cancelled',\r\n        title: 'Pedido cancelado',\r\n        message: `Tu pedido #${order.id} ha sido cancelado: ${reason}`,\r\n        data: { orderId: order.id }\r\n      });\r\n      \r\n      // Si ya se hab\xeda pagado, procesar reembolso\r\n      if (order.status === 'paid' && order.paymentId) {\r\n        try {\r\n          const refundResult = await this.paymentGateway.refundPayment(order.paymentId);\r\n          \r\n          await tx.create(Refund, {\r\n            orderId: order.id,\r\n            amount: order.total,\r\n            status: 'completed',\r\n            refundId: refundResult.id,\r\n            reason\r\n          });\r\n          \r\n          // Enviar correo de confirmaci\xf3n de reembolso\r\n          await this.emailService.sendRefundConfirmation(order.id);\r\n        } catch (error) {\r\n          // Registrar error pero continuar con la cancelaci\xf3n\r\n          await tx.create(RefundError, {\r\n            orderId: order.id,\r\n            error: error.message,\r\n            data: JSON.stringify(error)\r\n          });\r\n          \r\n          // Notificar al equipo de soporte\r\n          await this.notificationService.notifyTeam('support', {\r\n            title: 'Error en reembolso',\r\n            message: `Error al procesar reembolso para orden #${order.id}: ${error.message}`\r\n          });\r\n        }\r\n      }\r\n      \r\n      return { success: true, order: await tx.findOne(Order, { id: order.id }) };\r\n    });\r\n  }\r\n}\r\n\r\nexport default OrderService;\n"})}),"\n",(0,t.jsx)(e.h2,{id:"registro-de-servicios",children:"Registro de servicios"}),"\n",(0,t.jsx)(e.p,{children:"Para que tus servicios est\xe9n disponibles en toda la aplicaci\xf3n, debes registrarlos en el archivo de configuraci\xf3n:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  services: [\r\n    'src/services/OrderService',\r\n    'src/services/UserService',\r\n    'src/services/NotificationService',\r\n    'src/services/ReportingService'\r\n  ]\r\n};\n"})}),"\n",(0,t.jsx)(e.h2,{id:"uso-de-servicios",children:"Uso de servicios"}),"\n",(0,t.jsx)(e.h3,{id:"en-resolvers-de-graphql",children:"En resolvers de GraphQL"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// src/graphql/resolvers.js\r\nconst resolvers = {\r\n  Mutation: {\r\n    createOrder: async (_, { input }, context) => {\r\n      const orderService = context.services.OrderService;\r\n      return orderService.createOrder(input, context);\r\n    },\r\n    \r\n    processPayment: async (_, { orderId, paymentData }, context) => {\r\n      const orderService = context.services.OrderService;\r\n      return orderService.processPayment(orderId, paymentData, context);\r\n    },\r\n    \r\n    cancelOrder: async (_, { orderId, reason }, context) => {\r\n      const orderService = context.services.OrderService;\r\n      return orderService.cancelOrder(orderId, reason, context);\r\n    }\r\n  }\r\n};\r\n\r\nexport default resolvers;\n"})}),"\n",(0,t.jsx)(e.h3,{id:"en-controladores-http",children:"En controladores HTTP"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// src/controllers/orderController.js\r\nexport const createOrder = async (req, res) => {\r\n  try {\r\n    const orderService = req.context.services.OrderService;\r\n    const result = await orderService.createOrder(req.body, req.context);\r\n    \r\n    res.status(201).json(result);\r\n  } catch (error) {\r\n    res.status(400).json({ error: error.message });\r\n  }\r\n};\r\n\r\nexport const processPayment = async (req, res) => {\r\n  try {\r\n    const { orderId } = req.params;\r\n    const orderService = req.context.services.OrderService;\r\n    const result = await orderService.processPayment(orderId, req.body, req.context);\r\n    \r\n    if (result.success) {\r\n      res.status(200).json(result);\r\n    } else {\r\n      res.status(400).json(result);\r\n    }\r\n  } catch (error) {\r\n    res.status(400).json({ error: error.message });\r\n  }\r\n};\n"})}),"\n",(0,t.jsx)(e.h3,{id:"en-otros-servicios",children:"En otros servicios"}),"\n",(0,t.jsx)(e.p,{children:"Los servicios pueden utilizar otros servicios para implementar funcionalidades complejas:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// src/services/CheckoutService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass CheckoutService extends Service {\r\n  async completeCheckout(checkoutData, context) {\r\n    // Crear orden\r\n    const orderService = this.services.OrderService;\r\n    const order = await orderService.createOrder({\r\n      items: checkoutData.items,\r\n      shippingAddress: checkoutData.shippingAddress,\r\n      billingAddress: checkoutData.billingAddress\r\n    }, context);\r\n    \r\n    // Procesar pago\r\n    const paymentResult = await orderService.processPayment(order.id, checkoutData.payment, context);\r\n    \r\n    if (!paymentResult.success) {\r\n      return {\r\n        success: false,\r\n        error: paymentResult.error,\r\n        step: 'payment'\r\n      };\r\n    }\r\n    \r\n    // Generar factura\r\n    const invoiceService = this.services.InvoiceService;\r\n    const invoice = await invoiceService.generateInvoice(order.id, context);\r\n    \r\n    // Enviar correo de confirmaci\xf3n\r\n    const emailService = this.services.EmailService;\r\n    await emailService.sendOrderConfirmationWithInvoice(order.id, invoice.id, context);\r\n    \r\n    return {\r\n      success: true,\r\n      order: paymentResult.order,\r\n      invoice\r\n    };\r\n  }\r\n}\r\n\r\nexport default CheckoutService;\n"})}),"\n",(0,t.jsx)(e.h2,{id:"inyecci\xf3n-de-dependencias",children:"Inyecci\xf3n de dependencias"}),"\n",(0,t.jsx)(e.p,{children:"NexusData inyecta autom\xe1ticamente las siguientes dependencias en tus servicios:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"this.db"}),": Instancia del cliente de base de datos"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"this.services"}),": Objeto con todos los servicios registrados"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"this.events"}),": Sistema de eventos para emitir y suscribirse a eventos"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"this.config"}),": Configuraci\xf3n de la aplicaci\xf3n"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Tambi\xe9n puedes inyectar dependencias personalizadas:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  services: [\r\n    'src/services/OrderService',\r\n    'src/services/UserService'\r\n  ],\r\n  dependencies: {\r\n    paymentGateway: () => require('./lib/paymentGateway'),\r\n    emailClient: () => require('./lib/emailClient'),\r\n    logger: () => require('./lib/logger')\r\n  }\r\n};\r\n\r\n// Uso en servicios\r\nclass OrderService extends Service {\r\n  async processPayment(orderId, paymentData) {\r\n    // this.paymentGateway est\xe1 disponible autom\xe1ticamente\r\n    const result = await this.paymentGateway.processPayment({\r\n      amount: order.total,\r\n      // ...\r\n    });\r\n    \r\n    // this.logger est\xe1 disponible autom\xe1ticamente\r\n    this.logger.info(`Procesado pago para orden ${orderId}`);\r\n    \r\n    return result;\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"patrones-comunes",children:"Patrones comunes"}),"\n",(0,t.jsx)(e.h3,{id:"servicio-de-notificaciones",children:"Servicio de notificaciones"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-javascript",children:"// src/services/NotificationService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass NotificationService extends Service {\r\n  async notify(userId, notification) {\r\n    // Crear notificaci\xf3n en la base de datos\r\n    const dbNotification = await this.db.create('Notification', {\r\n      userId,\r\n      title: notification.title,\r\n      message: notification.message,\r\n      type: notification.type || 'info',\r\n      data: notification.data || {},\r\n      read: false,\r\n      createdAt: new Date()\r\n    });\r\n    \r\n    // Emitir evento para notificaciones en tiempo real\r\n    this.events.emit('notification.created', dbNotification);\r\n    \r\n    // Enviar push notification si est\xe1 habilitado\r\n    const user = await this.db.findOne('User', { id: userId });\r\n    \r\n    if (user.pushEnabled && user.pushToken) {\r\n      await this.pushService.send({\r\n        token: user.pushToken,\r\n        title: notification.title,\r\n        body: notification.message,\r\n        data: notification.data\r\n      });\r\n    }\r\n    \r\n    return dbNotification;\r\n  }\r\n  \r\n  async notifyTeam(teamId, notification) {\r\n    // Obtener todos los miembros del equipo\r\n    const teamMembers = await this.db.findMany('TeamMember', { teamId });\r\n    \r\n    // Notificar a cada miembro\r\n    const notifications = [];\r\n    \r\n    for (const member of teamMembers) {\r\n      const userNotification = await this.notify(member.userId, notification);\r\n      notifications.push(userNotification);\r\n    }\r\n    \r\n    return notifications;\r\n  }\r\n  \r\n  async markAsRead(notificationId, userId) {\r\n    const notification = await this.db.findOne('Notification', { id: notificationId });\r\n    \r\n    if (!notification) {\r\n      throw new Error('Notificaci\xf3n no encontrada');\r\n    }\r\n    \r\n    if (notification.userId !== userId) {\r\n      throw new Error('No tienes permiso para marcar esta notificaci\xf3n como le\xedda');\r\n    }\r\n    \r\n    return this.db.update('Notification', {\r\n      id: notificationId,\r\n      read: true,\r\n      readAt: new Date()\r\n    });\r\n  }\r\n  \r\n  async getUnreadCount(userId) {\r\n    return this.db.count('Notification', {\r\n      userId,\r\n      read: false\r\n    });\r\n  }\r\n}\r\n\r\nexport default NotificationService;\n"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{})})]})}function u(r={}){const{wrapper:e}={...(0,s.R)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(l,{...r})}):l(r)}}}]);