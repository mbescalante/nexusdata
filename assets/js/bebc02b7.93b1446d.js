"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9706],{1921:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>c});const d=JSON.parse('{"id":"business-logic/hooks","title":"Hooks y Middleware","description":"Implementaci\xf3n de hooks y middleware para extender la funcionalidad de modelos en NexusData","source":"@site/docs/business-logic/hooks.md","sourceDirName":"business-logic","slug":"/business-logic/hooks","permalink":"/docs/business-logic/hooks","draft":false,"unlisted":false,"editUrl":"https://github.com/nexusdata/nexusdata-docs/edit/main/docs/business-logic/hooks.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Hooks y Middleware","description":"Implementaci\xf3n de hooks y middleware para extender la funcionalidad de modelos en NexusData"},"sidebar":"tutorialSidebar","previous":{"title":"Procesos de Negocio","permalink":"/docs/business-logic/"},"next":{"title":"Servicios","permalink":"/docs/business-logic/servicios"}}');var a=n(4848),o=n(8453);const i={sidebar_position:1,title:"Hooks y Middleware",description:"Implementaci\xf3n de hooks y middleware para extender la funcionalidad de modelos en NexusData"},t="Hooks y Middleware",s={},c=[{value:"Hooks de modelo",id:"hooks-de-modelo",level:2},{value:"Ciclo de vida de los hooks",id:"ciclo-de-vida-de-los-hooks",level:3},{value:"Implementaci\xf3n de hooks",id:"implementaci\xf3n-de-hooks",level:3},{value:"Par\xe1metros de los hooks",id:"par\xe1metros-de-los-hooks",level:3},{value:"Middleware global",id:"middleware-global",level:2},{value:"Implementaci\xf3n de middleware",id:"implementaci\xf3n-de-middleware",level:3},{value:"Registro de middleware",id:"registro-de-middleware",level:3},{value:"Par\xe1metros de middleware",id:"par\xe1metros-de-middleware",level:3},{value:"Middleware espec\xedfico de modelo",id:"middleware-espec\xedfico-de-modelo",level:2},{value:"Orden de ejecuci\xf3n",id:"orden-de-ejecuci\xf3n",level:2},{value:"Casos de uso comunes",id:"casos-de-uso-comunes",level:2},{value:"Validaci\xf3n avanzada",id:"validaci\xf3n-avanzada",level:3},{value:"Generaci\xf3n autom\xe1tica de slugs",id:"generaci\xf3n-autom\xe1tica-de-slugs",level:3},{value:"Registro de actividad",id:"registro-de-actividad",level:3},{value:"Mejores pr\xe1cticas",id:"mejores-pr\xe1cticas",level:2}];function l(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"hooks-y-middleware",children:"Hooks y Middleware"})}),"\n",(0,a.jsx)(r.p,{children:"Los hooks y middleware son mecanismos poderosos que te permiten interceptar y modificar el comportamiento de las operaciones CRUD en tus modelos."}),"\n",(0,a.jsx)(r.h2,{id:"hooks-de-modelo",children:"Hooks de modelo"}),"\n",(0,a.jsx)(r.p,{children:"Los hooks de modelo te permiten ejecutar c\xf3digo antes o despu\xe9s de operaciones espec\xedficas en un modelo particular."}),"\n",(0,a.jsx)(r.h3,{id:"ciclo-de-vida-de-los-hooks",children:"Ciclo de vida de los hooks"}),"\n",(0,a.jsx)(r.p,{children:"NexusData proporciona los siguientes hooks para cada modelo:"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"beforeCreate"}),": Se ejecuta antes de crear un nuevo registro"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"afterCreate"}),": Se ejecuta despu\xe9s de crear un nuevo registro"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"beforeUpdate"}),": Se ejecuta antes de actualizar un registro"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"afterUpdate"}),": Se ejecuta despu\xe9s de actualizar un registro"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"beforeDelete"}),": Se ejecuta antes de eliminar un registro"]}),"\n",(0,a.jsxs)(r.li,{children:[(0,a.jsx)(r.strong,{children:"afterDelete"}),": Se ejecuta despu\xe9s de eliminar un registro"]}),"\n"]}),"\n",(0,a.jsx)(r.h3,{id:"implementaci\xf3n-de-hooks",children:"Implementaci\xf3n de hooks"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-javascript",children:"// src/models/Order.js\r\nimport { Model } from '@nexusdata/core';\r\n\r\nclass Order extends Model {\r\n  static config = {\r\n    hooks: {\r\n      // Se ejecuta antes de crear un nuevo registro\r\n      beforeCreate: async (data, context) => {\r\n        if (!data.orderNumber) {\r\n          data.orderNumber = await generateOrderNumber();\r\n        }\r\n        return data;\r\n      },\r\n      \r\n      // Se ejecuta despu\xe9s de crear un nuevo registro\r\n      afterCreate: async (record, context) => {\r\n        await sendOrderConfirmation(record);\r\n        return record;\r\n      },\r\n      \r\n      // Se ejecuta antes de actualizar un registro\r\n      beforeUpdate: async (data, record, context) => {\r\n        if (data.status === 'completed' && record.status !== 'completed') {\r\n          data.completedAt = new Date();\r\n        }\r\n        return data;\r\n      },\r\n      \r\n      // Se ejecuta despu\xe9s de actualizar un registro\r\n      afterUpdate: async (updatedRecord, originalRecord, context) => {\r\n        if (updatedRecord.status !== originalRecord.status) {\r\n          await notifyStatusChange(updatedRecord);\r\n        }\r\n        return updatedRecord;\r\n      },\r\n      \r\n      // Se ejecuta antes de eliminar un registro\r\n      beforeDelete: async (record, context) => {\r\n        if (record.status === 'completed') {\r\n          throw new Error('No se pueden eliminar \xf3rdenes completadas');\r\n        }\r\n        return true; // Debe devolver true para permitir la eliminaci\xf3n\r\n      },\r\n      \r\n      // Se ejecuta despu\xe9s de eliminar un registro\r\n      afterDelete: async (deletedRecord, context) => {\r\n        await logOrderDeletion(deletedRecord);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default Order;\n"})}),"\n",(0,a.jsx)(r.h3,{id:"par\xe1metros-de-los-hooks",children:"Par\xe1metros de los hooks"}),"\n",(0,a.jsx)(r.p,{children:"Cada tipo de hook recibe diferentes par\xe1metros:"}),"\n",(0,a.jsxs)(r.table,{children:[(0,a.jsx)(r.thead,{children:(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.th,{children:(0,a.jsx)(r.strong,{children:"Hook"})}),(0,a.jsx)(r.th,{children:(0,a.jsx)(r.strong,{children:"Par\xe1metros"})}),(0,a.jsx)(r.th,{children:(0,a.jsx)(r.strong,{children:"Descripci\xf3n"})})]})}),(0,a.jsxs)(r.tbody,{children:[(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.code,{children:"beforeCreate"})}),(0,a.jsx)(r.td,{children:(0,a.jsx)(r.code,{children:"(data, context)"})}),(0,a.jsxs)(r.td,{children:[(0,a.jsx)(r.code,{children:"data"})," contiene los datos a insertar. ",(0,a.jsx)(r.code,{children:"context"})," incluye informaci\xf3n de la solicitud."]})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.code,{children:"afterCreate"})}),(0,a.jsx)(r.td,{children:(0,a.jsx)(r.code,{children:"(record, context)"})}),(0,a.jsxs)(r.td,{children:[(0,a.jsx)(r.code,{children:"record"})," es el registro reci\xe9n creado. ",(0,a.jsx)(r.code,{children:"context"})," incluye informaci\xf3n de la solicitud."]})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.code,{children:"beforeUpdate"})}),(0,a.jsx)(r.td,{children:(0,a.jsx)(r.code,{children:"(data, record, context)"})}),(0,a.jsxs)(r.td,{children:[(0,a.jsx)(r.code,{children:"data"})," contiene los cambios. ",(0,a.jsx)(r.code,{children:"record"})," es el registro actual. ",(0,a.jsx)(r.code,{children:"context"})," incluye informaci\xf3n de la solicitud."]})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.code,{children:"afterUpdate"})}),(0,a.jsx)(r.td,{children:(0,a.jsx)(r.code,{children:"(updatedRecord, originalRecord, context)"})}),(0,a.jsxs)(r.td,{children:[(0,a.jsx)(r.code,{children:"updatedRecord"})," es el registro actualizado. ",(0,a.jsx)(r.code,{children:"originalRecord"})," es el original. ",(0,a.jsx)(r.code,{children:"context"})," incluye informaci\xf3n de la solicitud."]})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.code,{children:"beforeDelete"})}),(0,a.jsx)(r.td,{children:(0,a.jsx)(r.code,{children:"(record, context)"})}),(0,a.jsxs)(r.td,{children:[(0,a.jsx)(r.code,{children:"record"})," es el registro que se va a eliminar. ",(0,a.jsx)(r.code,{children:"context"})," incluye informaci\xf3n de la solicitud."]})]}),(0,a.jsxs)(r.tr,{children:[(0,a.jsx)(r.td,{children:(0,a.jsx)(r.code,{children:"afterDelete"})}),(0,a.jsx)(r.td,{children:(0,a.jsx)(r.code,{children:"(deletedRecord, context)"})}),(0,a.jsxs)(r.td,{children:[(0,a.jsx)(r.code,{children:"deletedRecord"})," es el registro eliminado. ",(0,a.jsx)(r.code,{children:"context"})," incluye informaci\xf3n de la solicitud."]})]})]})]}),"\n",(0,a.jsx)(r.h2,{id:"middleware-global",children:"Middleware global"}),"\n",(0,a.jsx)(r.p,{children:"El middleware global te permite aplicar l\xf3gica a m\xfaltiples modelos de manera consistente."}),"\n",(0,a.jsx)(r.h3,{id:"implementaci\xf3n-de-middleware",children:"Implementaci\xf3n de middleware"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-javascript",children:"// src/middleware/auditLog.js\r\nexport default function auditLogMiddleware() {\r\n  return {\r\n    beforeCreate: async (data, context, { model }) => {\r\n      console.log(`Creando ${model.name}:`, data);\r\n      return data;\r\n    },\r\n    \r\n    afterCreate: async (record, context, { model }) => {\r\n      await createAuditRecord({\r\n        action: 'CREATE',\r\n        model: model.name,\r\n        recordId: record.id,\r\n        userId: context.user?.id,\r\n        timestamp: new Date(),\r\n        changes: record\r\n      });\r\n      return record;\r\n    },\r\n    \r\n    beforeUpdate: async (data, record, context, { model }) => {\r\n      console.log(`Actualizando ${model.name}:`, { id: record.id, changes: data });\r\n      return data;\r\n    },\r\n    \r\n    afterUpdate: async (updatedRecord, originalRecord, context, { model }) => {\r\n      const changes = calculateChanges(updatedRecord, originalRecord);\r\n      \r\n      await createAuditRecord({\r\n        action: 'UPDATE',\r\n        model: model.name,\r\n        recordId: updatedRecord.id,\r\n        userId: context.user?.id,\r\n        timestamp: new Date(),\r\n        changes\r\n      });\r\n      \r\n      return updatedRecord;\r\n    },\r\n    \r\n    beforeDelete: async (record, context, { model }) => {\r\n      console.log(`Eliminando ${model.name}:`, record.id);\r\n      return true;\r\n    },\r\n    \r\n    afterDelete: async (deletedRecord, context, { model }) => {\r\n      await createAuditRecord({\r\n        action: 'DELETE',\r\n        model: model.name,\r\n        recordId: deletedRecord.id,\r\n        userId: context.user?.id,\r\n        timestamp: new Date(),\r\n        changes: deletedRecord\r\n      });\r\n    }\r\n  };\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"registro-de-middleware",children:"Registro de middleware"}),"\n",(0,a.jsx)(r.p,{children:"Para registrar middleware globalmente, debes incluirlo en tu archivo de configuraci\xf3n:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-javascript",children:"// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  middleware: [\r\n    'src/middleware/auditLog.js',\r\n    'src/middleware/validation.js',\r\n    'src/middleware/caching.js'\r\n    // otros middleware\r\n  ]\r\n};\n"})}),"\n",(0,a.jsx)(r.h3,{id:"par\xe1metros-de-middleware",children:"Par\xe1metros de middleware"}),"\n",(0,a.jsx)(r.p,{children:"Los middleware reciben los mismos par\xe1metros que los hooks de modelo, m\xe1s un objeto adicional con metadatos:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-javascript",children:"async (/* par\xe1metros normales del hook */, { model, operation }) => {\r\n  // model: referencia al modelo afectado\r\n  // operation: tipo de operaci\xf3n ('create', 'update', 'delete')\r\n}\n"})}),"\n",(0,a.jsx)(r.h2,{id:"middleware-espec\xedfico-de-modelo",children:"Middleware espec\xedfico de modelo"}),"\n",(0,a.jsx)(r.p,{children:"Tambi\xe9n puedes aplicar middleware espec\xedficamente a ciertos modelos:"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-javascript",children:"// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  models: {\r\n    User: {\r\n      middleware: ['src/middleware/userAudit.js']\r\n    },\r\n    Order: {\r\n      middleware: ['src/middleware/orderTracking.js']\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,a.jsx)(r.h2,{id:"orden-de-ejecuci\xf3n",children:"Orden de ejecuci\xf3n"}),"\n",(0,a.jsx)(r.p,{children:"Cuando se realizan operaciones en un modelo, los hooks y middleware se ejecutan en el siguiente orden:"}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsx)(r.li,{children:"Middleware global (beforeXXX)"}),"\n",(0,a.jsx)(r.li,{children:"Middleware espec\xedfico de modelo (beforeXXX)"}),"\n",(0,a.jsx)(r.li,{children:"Hooks de modelo (beforeXXX)"}),"\n",(0,a.jsx)(r.li,{children:"Operaci\xf3n de base de datos"}),"\n",(0,a.jsx)(r.li,{children:"Hooks de modelo (afterXXX)"}),"\n",(0,a.jsx)(r.li,{children:"Middleware espec\xedfico de modelo (afterXXX)"}),"\n",(0,a.jsx)(r.li,{children:"Middleware global (afterXXX)"}),"\n"]}),"\n",(0,a.jsx)(r.h2,{id:"casos-de-uso-comunes",children:"Casos de uso comunes"}),"\n",(0,a.jsx)(r.h3,{id:"validaci\xf3n-avanzada",children:"Validaci\xf3n avanzada"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-javascript",children:"// src/middleware/validation.js\r\nexport default function validationMiddleware() {\r\n  return {\r\n    beforeCreate: async (data, context, { model }) => {\r\n      if (model.name === 'User' && data.email) {\r\n        // Verificar que el email no est\xe9 ya registrado\r\n        const existingUser = await context.db.findOne('User', { email: data.email });\r\n        if (existingUser) {\r\n          throw new Error(`El email ${data.email} ya est\xe1 registrado`);\r\n        }\r\n      }\r\n      \r\n      return data;\r\n    },\r\n    \r\n    beforeUpdate: async (data, record, context, { model }) => {\r\n      if (model.name === 'User' && data.email && data.email !== record.email) {\r\n        // Verificar que el nuevo email no est\xe9 ya registrado\r\n        const existingUser = await context.db.findOne('User', { email: data.email });\r\n        if (existingUser) {\r\n          throw new Error(`El email ${data.email} ya est\xe1 registrado`);\r\n        }\r\n      }\r\n      \r\n      return data;\r\n    }\r\n  };\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"generaci\xf3n-autom\xe1tica-de-slugs",children:"Generaci\xf3n autom\xe1tica de slugs"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-javascript",children:"// src/middleware/slugify.js\r\nimport slugify from 'slugify';\r\n\r\nexport default function slugifyMiddleware() {\r\n  return {\r\n    beforeCreate: async (data, context, { model }) => {\r\n      // Aplicar solo a modelos con campo 'title' y 'slug'\r\n      if (data.title && model.schema.fields.slug) {\r\n        data.slug = data.slug || slugify(data.title, { lower: true });\r\n      }\r\n      \r\n      return data;\r\n    },\r\n    \r\n    beforeUpdate: async (data, record, context, { model }) => {\r\n      // Actualizar slug si cambia el t\xedtulo\r\n      if (data.title && data.title !== record.title && model.schema.fields.slug) {\r\n        data.slug = data.slug || slugify(data.title, { lower: true });\r\n      }\r\n      \r\n      return data;\r\n    }\r\n  };\r\n}\n"})}),"\n",(0,a.jsx)(r.h3,{id:"registro-de-actividad",children:"Registro de actividad"}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-javascript",children:"// src/middleware/activityLog.js\r\nexport default function activityLogMiddleware() {\r\n  return {\r\n    afterCreate: async (record, context, { model }) => {\r\n      if (context.user) {\r\n        await context.db.create('Activity', {\r\n          userId: context.user.id,\r\n          action: 'CREATE',\r\n          resourceType: model.name,\r\n          resourceId: record.id,\r\n          timestamp: new Date(),\r\n          details: `Cre\xf3 ${model.name.toLowerCase()} #${record.id}`\r\n        });\r\n      }\r\n      \r\n      return record;\r\n    },\r\n    \r\n    afterUpdate: async (updatedRecord, originalRecord, context, { model }) => {\r\n      if (context.user) {\r\n        await context.db.create('Activity', {\r\n          userId: context.user.id,\r\n          action: 'UPDATE',\r\n          resourceType: model.name,\r\n          resourceId: updatedRecord.id,\r\n          timestamp: new Date(),\r\n          details: `Actualiz\xf3 ${model.name.toLowerCase()} #${updatedRecord.id}`\r\n        });\r\n      }\r\n      \r\n      return updatedRecord;\r\n    },\r\n    \r\n    afterDelete: async (deletedRecord, context, { model }) => {\r\n      if (context.user) {\r\n        await context.db.create('Activity', {\r\n          userId: context.user.id,\r\n          action: 'DELETE',\r\n          resourceType: model.name,\r\n          resourceId: deletedRecord.id,\r\n          timestamp: new Date(),\r\n          details: `Elimin\xf3 ${model.name.toLowerCase()} #${deletedRecord.id}`\r\n        });\r\n      }\r\n    }\r\n  };\r\n}\n"})}),"\n",(0,a.jsx)(r.h2,{id:"mejores-pr\xe1cticas",children:"Mejores pr\xe1cticas"}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsx)(r.li,{children:"Mant\xe9n los hooks simples : Cada hook debe tener una responsabilidad \xfanica y clara."}),"\n",(0,a.jsx)(r.li,{children:"Evita operaciones bloqueantes : Los hooks pueden afectar el rendimiento, as\xed que evita operaciones costosas."}),"\n",(0,a.jsx)(r.li,{children:"Maneja errores adecuadamente : Aseg\xfarate de capturar y manejar errores para evitar comportamientos inesperados."}),"\n",(0,a.jsx)(r.li,{children:"Usa transacciones cuando sea necesario : Para operaciones que afectan a m\xfaltiples modelos, considera usar transacciones."}),"\n",(0,a.jsx)(r.li,{children:"Documenta tus hooks : Documenta claramente qu\xe9 hacen tus hooks para facilitar el mantenimiento."}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>t});var d=n(6540);const a={},o=d.createContext(a);function i(e){const r=d.useContext(o);return d.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),d.createElement(o.Provider,{value:r},e.children)}}}]);