"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4398],{8453:(r,n,e)=>{e.d(n,{R:()=>i,x:()=>o});var a=e(6540);const s={},t=a.createContext(s);function i(r){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof r?r(n):{...n,...r}}),[n,r])}function o(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(s):r.components||s:i(r.components),a.createElement(t.Provider,{value:n},r.children)}},8516:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"data-sources/nosql","title":"NoSQL","description":"Configuraci\xf3n y uso de bases de datos NoSQL como fuentes de datos en NexusData","source":"@site/docs/data-sources/nosql.md","sourceDirName":"data-sources","slug":"/data-sources/nosql","permalink":"/docs/data-sources/nosql","draft":false,"unlisted":false,"editUrl":"https://github.com/nexusdata/nexusdata-docs/edit/main/docs/data-sources/nosql.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"NoSQL","description":"Configuraci\xf3n y uso de bases de datos NoSQL como fuentes de datos en NexusData"},"sidebar":"tutorialSidebar","previous":{"title":"SQL","permalink":"/docs/data-sources/sql"},"next":{"title":"REST API","permalink":"/docs/data-sources/rest-api"}}');var s=e(4848),t=e(8453);const i={sidebar_position:3,title:"NoSQL",description:"Configuraci\xf3n y uso de bases de datos NoSQL como fuentes de datos en NexusData"},o="NoSQL",c={},d=[{value:"Bases de Datos Soportadas",id:"bases-de-datos-soportadas",level:2},{value:"Configuraci\xf3n de Conexi\xf3n",id:"configuraci\xf3n-de-conexi\xf3n",level:2},{value:"MongoDB",id:"mongodb",level:3},{value:"Conexi\xf3n con URI",id:"conexi\xf3n-con-uri",level:4},{value:"Opciones Avanzadas",id:"opciones-avanzadas",level:4},{value:"DynamoDB",id:"dynamodb",level:3},{value:"Uso de Credenciales del Sistema",id:"uso-de-credenciales-del-sistema",level:4},{value:"Redis",id:"redis",level:3},{value:"Conexi\xf3n a Cluster",id:"conexi\xf3n-a-cluster",level:4},{value:"Elasticsearch",id:"elasticsearch",level:3},{value:"M\xfaltiples Nodos",id:"m\xfaltiples-nodos",level:4},{value:"Firebase Firestore",id:"firebase-firestore",level:3},{value:"Uso de Archivo de Credenciales",id:"uso-de-archivo-de-credenciales",level:4},{value:"Modelado de Datos",id:"modelado-de-datos",level:2},{value:"MongoDB",id:"mongodb-1",level:3},{value:"DynamoDB",id:"dynamodb-1",level:3},{value:"Elasticsearch",id:"elasticsearch-1",level:3},{value:"Operaciones CRUD",id:"operaciones-crud",level:2},{value:"MongoDB",id:"mongodb-2",level:3},{value:"DynamoDB",id:"dynamodb-2",level:3},{value:"Elasticsearch",id:"elasticsearch-2",level:3},{value:"Consultas Avanzadas",id:"consultas-avanzadas",level:2},{value:"MongoDB - Agregaciones",id:"mongodb---agregaciones",level:3},{value:"DynamoDB - Consultas Complejas",id:"dynamodb---consultas-complejas",level:3},{value:"Elasticsearch - B\xfasqueda Avanzada",id:"elasticsearch---b\xfasqueda-avanzada",level:3},{value:"Transacciones",id:"transacciones",level:2},{value:"MongoDB",id:"mongodb-3",level:3},{value:"DynamoDB",id:"dynamodb-3",level:3}];function l(r){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...r.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"nosql",children:"NoSQL"})}),"\n",(0,s.jsx)(n.p,{children:"NexusData proporciona soporte completo para bases de datos NoSQL, permiti\xe9ndote aprovechar la flexibilidad y escalabilidad de estos sistemas para tus aplicaciones."}),"\n",(0,s.jsx)(n.h2,{id:"bases-de-datos-soportadas",children:"Bases de Datos Soportadas"}),"\n",(0,s.jsx)(n.p,{children:"NexusData soporta las siguientes bases de datos NoSQL:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"MongoDB"})," (4.0+)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"DynamoDB"})," (AWS)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cassandra"})," (3.0+)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redis"})," (5.0+)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Elasticsearch"})," (7.0+)"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Firebase Firestore"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CouchDB"})," (3.0+)"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"configuraci\xf3n-de-conexi\xf3n",children:"Configuraci\xf3n de Conexi\xf3n"}),"\n",(0,s.jsx)(n.h3,{id:"mongodb",children:"MongoDB"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// config/datasources.js\r\nmodule.exports = {\r\n  datasources: {\r\n    mongodb: {\r\n      type: 'mongodb',\r\n      host: 'localhost',\r\n      port: 27017,\r\n      database: 'mi_base_de_datos',\r\n      username: 'usuario',\r\n      password: 'contrase\xf1a',\r\n      options: {\r\n        useNewUrlParser: true,\r\n        useUnifiedTopology: true,\r\n        authSource: 'admin'\r\n      }\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"conexi\xf3n-con-uri",children:"Conexi\xf3n con URI"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"mongodb: {\r\n  type: 'mongodb',\r\n  uri: 'mongodb://usuario:contrase\xf1a@localhost:27017/mi_base_de_datos?authSource=admin',\r\n  options: {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"opciones-avanzadas",children:"Opciones Avanzadas"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"mongodb: {\r\n  type: 'mongodb',\r\n  uri: 'mongodb://localhost:27017/mi_base_de_datos',\r\n  options: {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n    connectTimeoutMS: 30000,\r\n    socketTimeoutMS: 30000,\r\n    maxPoolSize: 50,\r\n    minPoolSize: 5,\r\n    maxIdleTimeMS: 120000,\r\n    replicaSet: 'rs0',\r\n    readPreference: 'secondaryPreferred',\r\n    ssl: true,\r\n    retryWrites: true,\r\n    w: 'majority',\r\n    wtimeoutMS: 2500\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dynamodb",children:"DynamoDB"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"dynamodb: {\r\n  type: 'dynamodb',\r\n  region: 'us-east-1',\r\n  accessKeyId: 'TU_ACCESS_KEY',\r\n  secretAccessKey: 'TU_SECRET_KEY',\r\n  options: {\r\n    endpoint: 'https://dynamodb.us-east-1.amazonaws.com',\r\n    apiVersion: '2012-08-10',\r\n    maxRetries: 3\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"uso-de-credenciales-del-sistema",children:"Uso de Credenciales del Sistema"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"dynamodb: {\r\n  type: 'dynamodb',\r\n  region: 'us-east-1',\r\n  // AWS SDK utilizar\xe1 autom\xe1ticamente las credenciales del sistema\r\n  options: {\r\n    endpoint: 'https://dynamodb.us-east-1.amazonaws.com'\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"redis",children:"Redis"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"redis: {\r\n  type: 'redis',\r\n  host: 'localhost',\r\n  port: 6379,\r\n  password: 'contrase\xf1a',\r\n  database: 0,\r\n  options: {\r\n    connectTimeout: 10000,\r\n    retryStrategy: (times) => Math.min(times * 50, 2000)\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"conexi\xf3n-a-cluster",children:"Conexi\xf3n a Cluster"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"redisCluster: {\r\n  type: 'redis',\r\n  cluster: true,\r\n  nodes: [\r\n    { host: 'redis-node1', port: 6379 },\r\n    { host: 'redis-node2', port: 6379 },\r\n    { host: 'redis-node3', port: 6379 }\r\n  ],\r\n  options: {\r\n    redisOptions: {\r\n      password: 'contrase\xf1a'\r\n    },\r\n    scaleReads: 'all',\r\n    maxRedirections: 16\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"elasticsearch",children:"Elasticsearch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"elasticsearch: {\r\n  type: 'elasticsearch',\r\n  node: 'http://localhost:9200',\r\n  auth: {\r\n    username: 'usuario',\r\n    password: 'contrase\xf1a'\r\n  },\r\n  options: {\r\n    ssl: {\r\n      rejectUnauthorized: false\r\n    },\r\n    maxRetries: 3,\r\n    requestTimeout: 30000\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"m\xfaltiples-nodos",children:"M\xfaltiples Nodos"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"elasticsearch: {\r\n  type: 'elasticsearch',\r\n  nodes: [\r\n    'http://es-node1:9200',\r\n    'http://es-node2:9200',\r\n    'http://es-node3:9200'\r\n  ],\r\n  auth: {\r\n    username: 'usuario',\r\n    password: 'contrase\xf1a'\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"firebase-firestore",children:"Firebase Firestore"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"firestore: {\r\n  type: 'firestore',\r\n  projectId: 'mi-proyecto-firebase',\r\n  credentials: {\r\n    client_email: 'firebase-adminsdk@mi-proyecto.iam.gserviceaccount.com',\r\n    private_key: '-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\\n'\r\n  },\r\n  options: {\r\n    databaseURL: 'https://mi-proyecto.firebaseio.com'\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"uso-de-archivo-de-credenciales",children:"Uso de Archivo de Credenciales"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"firestore: {\r\n  type: 'firestore',\r\n  projectId: 'mi-proyecto-firebase',\r\n  credentialsPath: './config/firebase-credentials.json',\r\n  options: {\r\n    databaseURL: 'https://mi-proyecto.firebaseio.com'\r\n  }\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"modelado-de-datos",children:"Modelado de Datos"}),"\n",(0,s.jsx)(n.h3,{id:"mongodb-1",children:"MongoDB"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// models/Producto.js\r\nmodule.exports = {\r\n  name: 'Producto',\r\n  datasource: 'mongodb',\r\n  collection: 'productos', // Nombre de la colecci\xf3n\r\n  schema: {\r\n    _id: {\r\n      type: 'objectId',\r\n      primaryKey: true,\r\n      auto: true\r\n    },\r\n    nombre: {\r\n      type: 'string',\r\n      required: true,\r\n      index: true\r\n    },\r\n    precio: {\r\n      type: 'number',\r\n      required: true,\r\n      min: 0\r\n    },\r\n    descripcion: {\r\n      type: 'string'\r\n    },\r\n    categorias: {\r\n      type: 'array',\r\n      items: {\r\n        type: 'string'\r\n      },\r\n      index: true\r\n    },\r\n    atributos: {\r\n      type: 'object'\r\n    },\r\n    activo: {\r\n      type: 'boolean',\r\n      default: true\r\n    },\r\n    createdAt: {\r\n      type: 'date',\r\n      default: () => new Date()\r\n    },\r\n    updatedAt: {\r\n      type: 'date',\r\n      default: () => new Date(),\r\n      onUpdate: () => new Date()\r\n    }\r\n  },\r\n  indexes: [\r\n    {\r\n      name: 'idx_producto_nombre_precio',\r\n      fields: { nombre: 1, precio: -1 }\r\n    },\r\n    {\r\n      name: 'idx_producto_texto',\r\n      fields: { '$**': 'text' }\r\n    }\r\n  ]\r\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dynamodb-1",children:"DynamoDB"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// models/Usuario.js\r\nmodule.exports = {\r\n  name: 'Usuario',\r\n  datasource: 'dynamodb',\r\n  tableName: 'usuarios',\r\n  schema: {\r\n    id: {\r\n      type: 'string',\r\n      primaryKey: true,\r\n      hashKey: true // Clave de partici\xf3n\r\n    },\r\n    email: {\r\n      type: 'string',\r\n      required: true,\r\n      unique: true\r\n    },\r\n    nombre: {\r\n      type: 'string',\r\n      required: true\r\n    },\r\n    createdAt: {\r\n      type: 'date',\r\n      default: () => new Date(),\r\n      sortKey: true // Clave de ordenaci\xf3n\r\n    },\r\n    ultimoAcceso: {\r\n      type: 'date'\r\n    },\r\n    configuracion: {\r\n      type: 'map' // Tipo de dato Map en DynamoDB\r\n    },\r\n    roles: {\r\n      type: 'list', // Tipo de dato List en DynamoDB\r\n      items: {\r\n        type: 'string'\r\n      }\r\n    }\r\n  },\r\n  indexes: [\r\n    {\r\n      name: 'EmailIndex',\r\n      type: 'global',\r\n      hashKey: 'email',\r\n      projection: {\r\n        type: 'all'\r\n      }\r\n    }\r\n  ]\r\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"elasticsearch-1",children:"Elasticsearch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// models/Articulo.js\r\nmodule.exports = {\r\n  name: 'Articulo',\r\n  datasource: 'elasticsearch',\r\n  index: 'articulos',\r\n  schema: {\r\n    id: {\r\n      type: 'keyword',\r\n      primaryKey: true\r\n    },\r\n    titulo: {\r\n      type: 'text',\r\n      fields: {\r\n        keyword: {\r\n          type: 'keyword'\r\n        }\r\n      }\r\n    },\r\n    contenido: {\r\n      type: 'text',\r\n      analyzer: 'spanish'\r\n    },\r\n    autor: {\r\n      type: 'keyword'\r\n    },\r\n    tags: {\r\n      type: 'keyword'\r\n    },\r\n    fechaPublicacion: {\r\n      type: 'date'\r\n    },\r\n    puntuacion: {\r\n      type: 'float'\r\n    },\r\n    publicado: {\r\n      type: 'boolean',\r\n      default: false\r\n    }\r\n  },\r\n  settings: {\r\n    number_of_shards: 3,\r\n    number_of_replicas: 1,\r\n    analysis: {\r\n      analyzer: {\r\n        spanish: {\r\n          type: 'spanish'\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"operaciones-crud",children:"Operaciones CRUD"}),"\n",(0,s.jsx)(n.h3,{id:"mongodb-2",children:"MongoDB"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// services/ProductoService.js\r\nmodule.exports = {\r\n  async crearProducto(datos) {\r\n    return await this.app.models.Producto.create(datos);\r\n  },\r\n  \r\n  async obtenerProducto(id) {\r\n    return await this.app.models.Producto.findById(id);\r\n  },\r\n  \r\n  async buscarProductos(filtros = {}) {\r\n    const { nombre, categorias, precioMin, precioMax, ordenar, pagina = 1, limite = 20 } = filtros;\r\n    \r\n    const query = {};\r\n    \r\n    if (nombre) {\r\n      query.nombre = { $regex: nombre, $options: 'i' };\r\n    }\r\n    \r\n    if (categorias && categorias.length > 0) {\r\n      query.categorias = { $in: Array.isArray(categorias) ? categorias : [categorias] };\r\n    }\r\n    \r\n    if (precioMin !== undefined || precioMax !== undefined) {\r\n      query.precio = {};\r\n      \r\n      if (precioMin !== undefined) {\r\n        query.precio.$gte = precioMin;\r\n      }\r\n      \r\n      if (precioMax !== undefined) {\r\n        query.precio.$lte = precioMax;\r\n      }\r\n    }\r\n    \r\n    const options = {\r\n      skip: (pagina - 1) * limite,\r\n      limit: limite\r\n    };\r\n    \r\n    if (ordenar) {\r\n      const [campo, direccion] = ordenar.split(':');\r\n      options.sort = { [campo]: direccion === 'desc' ? -1 : 1 };\r\n    } else {\r\n      options.sort = { createdAt: -1 };\r\n    }\r\n    \r\n    const [items, total] = await Promise.all([\r\n      this.app.models.Producto.find(query, options),\r\n      this.app.models.Producto.count(query)\r\n    ]);\r\n    \r\n    return {\r\n      items,\r\n      total,\r\n      pagina,\r\n      limite,\r\n      totalPaginas: Math.ceil(total / limite)\r\n    };\r\n  },\r\n  \r\n  async actualizarProducto(id, datos) {\r\n    return await this.app.models.Producto.updateById(id, datos);\r\n  },\r\n  \r\n  async eliminarProducto(id) {\r\n    return await this.app.models.Producto.deleteById(id);\r\n  },\r\n  \r\n  async busquedaTexto(texto) {\r\n    return await this.app.models.Producto.find({\r\n      $text: { $search: texto }\r\n    }, {\r\n      score: { $meta: 'textScore' },\r\n      sort: { score: { $meta: 'textScore' } }\r\n    });\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dynamodb-2",children:"DynamoDB"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// services/UsuarioService.js\r\nmodule.exports = {\r\n  async crearUsuario(datos) {\r\n    return await this.app.models.Usuario.create({\r\n      id: this.app.utils.generateId(),\r\n      ...datos,\r\n      createdAt: new Date()\r\n    });\r\n  },\r\n  \r\n  async obtenerUsuario(id) {\r\n    return await this.app.models.Usuario.get({ id });\r\n  },\r\n  \r\n  async obtenerUsuarioPorEmail(email) {\r\n    const result = await this.app.models.Usuario.query({\r\n      IndexName: 'EmailIndex',\r\n      KeyConditionExpression: 'email = :email',\r\n      ExpressionAttributeValues: {\r\n        ':email': email\r\n      }\r\n    });\r\n    \r\n    return result.Items[0];\r\n  },\r\n  \r\n  async actualizarUsuario(id, datos) {\r\n    // Construir expresiones de actualizaci\xf3n\r\n    const updates = {};\r\n    const values = {};\r\n    const names = {};\r\n    \r\n    Object.entries(datos).forEach(([key, value], index) => {\r\n      if (key !== 'id' && key !== 'createdAt') {\r\n        const attrName = `#attr${index}`;\r\n        const attrValue = `:val${index}`;\r\n        \r\n        updates[attrName] = attrValue;\r\n        values[attrValue] = value;\r\n        names[attrName] = key;\r\n      }\r\n    });\r\n    \r\n    const updateExpression = 'SET ' + Object.entries(updates)\r\n      .map(([name, value]) => `${name} = ${value}`)\r\n      .join(', ');\r\n    \r\n    return await this.app.models.Usuario.update({\r\n      Key: { id },\r\n      UpdateExpression: updateExpression,\r\n      ExpressionAttributeNames: names,\r\n      ExpressionAttributeValues: values,\r\n      ReturnValues: 'ALL_NEW'\r\n    });\r\n  },\r\n  \r\n  async eliminarUsuario(id) {\r\n    return await this.app.models.Usuario.delete({ id });\r\n  },\r\n  \r\n  async listarUsuarios(opciones = {}) {\r\n    const { limite, ultimaClave } = opciones;\r\n    \r\n    const params = {};\r\n    \r\n    if (limite) {\r\n      params.Limit = limite;\r\n    }\r\n    \r\n    if (ultimaClave) {\r\n      params.ExclusiveStartKey = ultimaClave;\r\n    }\r\n    \r\n    const result = await this.app.models.Usuario.scan(params);\r\n    \r\n    return {\r\n      items: result.Items,\r\n      ultimaClave: result.LastEvaluatedKey\r\n    };\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"elasticsearch-2",children:"Elasticsearch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// services/ArticuloService.js\r\nmodule.exports = {\r\n  async crearArticulo(datos) {\r\n    const id = datos.id || this.app.utils.generateId();\r\n    \r\n    await this.app.models.Articulo.index({\r\n      id,\r\n      ...datos,\r\n      fechaPublicacion: datos.fechaPublicacion || new Date()\r\n    });\r\n    \r\n    return await this.app.models.Articulo.get({ id });\r\n  },\r\n  \r\n  async obtenerArticulo(id) {\r\n    return await this.app.models.Articulo.get({ id });\r\n  },\r\n  \r\n  async buscarArticulos(opciones = {}) {\r\n    const {\r\n      texto,\r\n      autor,\r\n      tags,\r\n      fechaDesde,\r\n      fechaHasta,\r\n      publicado = true,\r\n      ordenar = 'fechaPublicacion:desc',\r\n      pagina = 1,\r\n      limite = 20\r\n    } = opciones;\r\n    \r\n    const query = {\r\n      bool: {\r\n        must: [],\r\n        filter: []\r\n      }\r\n    };\r\n    \r\n    // Filtro por texto\r\n    if (texto) {\r\n      query.bool.must.push({\r\n        multi_match: {\r\n          query: texto,\r\n          fields: ['titulo^3', 'contenido'],\r\n          type: 'best_fields'\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Filtro por autor\r\n    if (autor) {\r\n      query.bool.filter.push({\r\n        term: { autor }\r\n      });\r\n    }\r\n    \r\n    // Filtro por tags\r\n    if (tags && tags.length > 0) {\r\n      query.bool.filter.push({\r\n        terms: { tags: Array.isArray(tags) ? tags : [tags] }\r\n      });\r\n    }\r\n    \r\n    // Filtro por fecha\r\n    if (fechaDesde || fechaHasta) {\r\n      const rangeFilter = {\r\n        range: {\r\n          fechaPublicacion: {}\r\n        }\r\n      };\r\n      \r\n      if (fechaDesde) {\r\n        rangeFilter.range.fechaPublicacion.gte = fechaDesde;\r\n      }\r\n      \r\n      if (fechaHasta) {\r\n        rangeFilter.range.fechaPublicacion.lte = fechaHasta;\r\n      }\r\n      \r\n      query.bool.filter.push(rangeFilter);\r\n    }\r\n    \r\n    // Filtro por estado de publicaci\xf3n\r\n    query.bool.filter.push({\r\n      term: { publicado }\r\n    });\r\n    \r\n    // Ordenamiento\r\n    const [campo, direccion] = ordenar.split(':');\r\n    \r\n    const result = await this.app.models.Articulo.search({\r\n      from: (pagina - 1) * limite,\r\n      size: limite,\r\n      query,\r\n      sort: [\r\n        { [campo]: { order: direccion || 'desc' } }\r\n      ],\r\n      highlight: {\r\n        fields: {\r\n          titulo: {},\r\n          contenido: {\r\n            fragment_size: 150,\r\n            number_of_fragments: 3\r\n          }\r\n        }\r\n      }\r\n    });\r\n    \r\n    return {\r\n      items: result.hits.hits.map(hit => ({\r\n        ...hit._source,\r\n        score: hit._score,\r\n        highlight: hit.highlight\r\n      })),\r\n      total: result.hits.total.value,\r\n      pagina,\r\n      limite,\r\n      totalPaginas: Math.ceil(result.hits.total.value / limite)\r\n    };\r\n  },\r\n  \r\n  async actualizarArticulo(id, datos) {\r\n    await this.app.models.Articulo.update({\r\n      id,\r\n      doc: datos\r\n    });\r\n    \r\n    return await this.app.models.Articulo.get({ id });\r\n  },\r\n  \r\n  async eliminarArticulo(id) {\r\n    return await this.app.models.Articulo.delete({ id });\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"consultas-avanzadas",children:"Consultas Avanzadas"}),"\n",(0,s.jsx)(n.h3,{id:"mongodb---agregaciones",children:"MongoDB - Agregaciones"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// services/ReporteService.js\r\nmodule.exports = {\r\n  async ventasPorCategoria(fechaInicio, fechaFin) {\r\n    const pipeline = [\r\n      {\r\n        $match: {\r\n          fecha: {\r\n            $gte: new Date(fechaInicio),\r\n            $lte: new Date(fechaFin)\r\n          },\r\n          estado: 'completado'\r\n        }\r\n      },\r\n      {\r\n        $unwind: '$items'\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: 'productos',\r\n          localField: 'items.productoId',\r\n          foreignField: '_id',\r\n          as: 'producto'\r\n        }\r\n      },\r\n      {\r\n        $unwind: '$producto'\r\n      },\r\n      {\r\n        $group: {\r\n          _id: '$producto.categorias',\r\n          totalVentas: { $sum: { $multiply: ['$items.cantidad', '$items.precio'] } },\r\n          cantidadVendida: { $sum: '$items.cantidad' },\r\n          pedidos: { $addToSet: '$_id' }\r\n        }\r\n      },\r\n      {\r\n        $project: {\r\n          categoria: '$_id',\r\n          totalVentas: 1,\r\n          cantidadVendida: 1,\r\n          numeroPedidos: { $size: '$pedidos' },\r\n          _id: 0\r\n        }\r\n      },\r\n      {\r\n        $sort: { totalVentas: -1 }\r\n      }\r\n    ];\r\n    \r\n    return await this.app.models.Pedido.aggregate(pipeline);\r\n  },\r\n  \r\n  async clientesTop(limite = 10) {\r\n    const pipeline = [\r\n      {\r\n        $match: {\r\n          estado: 'completado'\r\n        }\r\n      },\r\n      {\r\n        $group: {\r\n          _id: '$clienteId',\r\n          totalGastado: { $sum: '$total' },\r\n          numeroPedidos: { $sum: 1 },\r\n          ultimoPedido: { $max: '$fecha' }\r\n        }\r\n      },\r\n      {\r\n        $lookup: {\r\n          from: 'clientes',\r\n          localField: '_id',\r\n          foreignField: '_id',\r\n          as: 'cliente'\r\n        }\r\n      },\r\n      {\r\n        $unwind: '$cliente'\r\n      },\r\n      {\r\n        $project: {\r\n          _id: 0,\r\n          clienteId: '$_id',\r\n          nombre: '$cliente.nombre',\r\n          email: '$cliente.email',\r\n          totalGastado: 1,\r\n          numeroPedidos: 1,\r\n          ultimoPedido: 1,\r\n          promedioCompra: { $divide: ['$totalGastado', '$numeroPedidos'] }\r\n        }\r\n      },\r\n      {\r\n        $sort: { totalGastado: -1 }\r\n      },\r\n      {\r\n        $limit: limite\r\n      }\r\n    ];\r\n    \r\n    return await this.app.models.Pedido.aggregate(pipeline);\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"dynamodb---consultas-complejas",children:"DynamoDB - Consultas Complejas"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// services/ProductoService.js\r\nmodule.exports = {\r\n  async buscarProductosPorPrecioYCategoria(categoriaId, precioMin, precioMax) {\r\n    // Usando el \xedndice global GSI1 (categoriaId-precio-index)\r\n    const result = await this.app.models.Producto.query({\r\n      IndexName: 'GSI1',\r\n      KeyConditionExpression: 'categoriaId = :catId AND precio BETWEEN :min AND :max',\r\n      ExpressionAttributeValues: {\r\n        ':catId': categoriaId,\r\n        ':min': precioMin,\r\n        ':max': precioMax\r\n      }\r\n    });\r\n    \r\n    return result.Items;\r\n  },\r\n  \r\n  async buscarProductosConFiltros(filtros) {\r\n    const { categoriaId, estado, precioMin, precioMax, atributos } = filtros;\r\n    \r\n    let KeyConditionExpression = 'categoriaId = :catId';\r\n    const ExpressionAttributeValues = {\r\n      ':catId': categoriaId\r\n    };\r\n    \r\n    // Construir expresi\xf3n de filtro\r\n    let FilterExpression = [];\r\n    \r\n    if (estado !== undefined) {\r\n      FilterExpression.push('activo = :estado');\r\n      ExpressionAttributeValues[':estado'] = estado;\r\n    }\r\n    \r\n    if (precioMin !== undefined || precioMax !== undefined) {\r\n      if (precioMin !== undefined && precioMax !== undefined) {\r\n        FilterExpression.push('precio BETWEEN :min AND :max');\r\n        ExpressionAttributeValues[':min'] = precioMin;\r\n        ExpressionAttributeValues[':max'] = precioMax;\r\n      } else if (precioMin !== undefined) {\r\n        FilterExpression.push('precio >= :min');\r\n        ExpressionAttributeValues[':min'] = precioMin;\r\n      } else {\r\n        FilterExpression.push('precio <= :max');\r\n        ExpressionAttributeValues[':max'] = precioMax;\r\n      }\r\n    }\r\n    \r\n    // Filtrar por atributos espec\xedficos\r\n    if (atributos && Object.keys(atributos).length > 0) {\r\n      const ExpressionAttributeNames = {};\r\n      \r\n      Object.entries(atributos).forEach(([key, value], index) => {\r\n        const nameKey = `#attr${index}`;\r\n        const valueKey = `:val${index}`;\r\n        \r\n        FilterExpression.push(`${nameKey} = ${valueKey}`);\r\n        ExpressionAttributeNames[nameKey] = `atributos.${key}`;\r\n        ExpressionAttributeValues[valueKey] = value;\r\n      });\r\n      \r\n      const params = {\r\n        IndexName: 'GSI1',\r\n        KeyConditionExpression,\r\n        FilterExpression: FilterExpression.join(' AND '),\r\n        ExpressionAttributeValues,\r\n        ExpressionAttributeNames\r\n      };\r\n      \r\n      const result = await this.app.models.Producto.query(params);\r\n      return result.Items;\r\n    } else {\r\n      const params = {\r\n        IndexName: 'GSI1',\r\n        KeyConditionExpression,\r\n        FilterExpression: FilterExpression.length > 0 ? FilterExpression.join(' AND ') : undefined,\r\n        ExpressionAttributeValues\r\n      };\r\n      \r\n      const result = await this.app.models.Producto.query(params);\r\n      return result.Items;\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"elasticsearch---b\xfasqueda-avanzada",children:"Elasticsearch - B\xfasqueda Avanzada"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// services/BusquedaService.js\r\nmodule.exports = {\r\n  async busquedaAvanzada(opciones) {\r\n    const {\r\n      texto,\r\n      filtros = {},\r\n      facets = [],\r\n      pagina = 1,\r\n      limite = 20\r\n    } = opciones;\r\n    \r\n    // Construir query\r\n    const query = {\r\n      bool: {\r\n        must: [],\r\n        filter: [],\r\n        should: [],\r\n        must_not: []\r\n      }\r\n    };\r\n    \r\n    // B\xfasqueda por texto\r\n    if (texto) {\r\n      query.bool.must.push({\r\n        multi_match: {\r\n          query: texto,\r\n          fields: ['titulo^3', 'contenido', 'tags^2'],\r\n          type: 'best_fields',\r\n          fuzziness: 'AUTO'\r\n        }\r\n      });\r\n    } else {\r\n      query.bool.must.push({ match_all: {} });\r\n    }\r\n    \r\n    // Aplicar filtros\r\n    Object.entries(filtros).forEach(([campo, valor]) => {\r\n      if (Array.isArray(valor)) {\r\n        query.bool.filter.push({\r\n          terms: { [campo]: valor }\r\n        });\r\n      } else if (typeof valor === 'object' && (valor.min !== undefined || valor.max !== undefined)) {\r\n        const range = {};\r\n        \r\n        if (valor.min !== undefined) {\r\n          range.gte = valor.min;\r\n        }\r\n        \r\n        if (valor.max !== undefined) {\r\n          range.lte = valor.max;\r\n        }\r\n        \r\n        query.bool.filter.push({\r\n          range: { [campo]: range }\r\n        });\r\n      } else if (valor !== undefined) {\r\n        query.bool.filter.push({\r\n          term: { [campo]: valor }\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Construir agregaciones para facets\r\n    const aggs = {};\r\n    \r\n    facets.forEach(facet => {\r\n      if (facet.tipo === 'terminos') {\r\n        aggs[facet.nombre] = {\r\n          terms: {\r\n            field: facet.campo,\r\n            size: facet.limite || 10\r\n          }\r\n        };\r\n      } else if (facet.tipo === 'rango') {\r\n        aggs[facet.nombre] = {\r\n          range: {\r\n            field: facet.campo,\r\n            ranges: facet.rangos\r\n          }\r\n        };\r\n      } else if (facet.tipo === 'estadisticas') {\r\n        aggs[facet.nombre] = {\r\n          stats: {\r\n            field: facet.campo\r\n          }\r\n        };\r\n      }\r\n    });\r\n    \r\n    // Ejecutar b\xfasqueda\r\n    const result = await this.app.models.Articulo.search({\r\n      from: (pagina - 1) * limite,\r\n      size: limite,\r\n      query,\r\n      aggs,\r\n      highlight: {\r\n        fields: {\r\n          titulo: {},\r\n          contenido: {\r\n            fragment_size: 150,\r\n            number_of_fragments: 3,\r\n            pre_tags: ['<strong>'],\r\n            post_tags: ['</strong>']\r\n          }\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Procesar resultados\r\n    const items = result.hits.hits.map(hit => ({\r\n      ...hit._source,\r\n      score: hit._score,\r\n      highlight: hit.highlight\r\n    }));\r\n    \r\n    // Procesar facets\r\n    const facetsResult = {};\r\n    \r\n    facets.forEach(facet => {\r\n      if (result.aggregations && result.aggregations[facet.nombre]) {\r\n        if (facet.tipo === 'terminos') {\r\n          facetsResult[facet.nombre] = {\r\n            tipo: 'terminos',\r\n            campo: facet.campo,\r\n            valores: result.aggregations[facet.nombre].buckets.map(bucket => ({\r\n              valor: bucket.key,\r\n              count: bucket.doc_count\r\n            }))\r\n          };\r\n        } else if (facet.tipo === 'rango') {\r\n          facetsResult[facet.nombre] = {\r\n            tipo: 'rango',\r\n            campo: facet.campo,\r\n            rangos: result.aggregations[facet.nombre].buckets.map(bucket => ({\r\n              desde: bucket.from,\r\n              hasta: bucket.to,\r\n              count: bucket.doc_count\r\n            }))\r\n          };\r\n        } else if (facet.tipo === 'estadisticas') {\r\n          facetsResult[facet.nombre] = {\r\n            tipo: 'estadisticas',\r\n            campo: facet.campo,\r\n            ...result.aggregations[facet.nombre]\r\n          };\r\n        }\r\n      }\r\n    });\r\n    \r\n    return {\r\n      items,\r\n      total: result.hits.total.value,\r\n      pagina,\r\n      limite,\r\n      totalPaginas: Math.ceil(result.hits.total.value / limite),\r\n      facets: facetsResult\r\n    };\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"transacciones",children:"Transacciones"}),"\n",(0,s.jsx)(n.h3,{id:"mongodb-3",children:"MongoDB"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// services/PedidoService.js\r\nmodule.exports = {\r\n  async crearPedido(datos) {\r\n    const { clienteId, items } = datos;\r\n    \r\n    // Iniciar sesi\xf3n de transacci\xf3n\r\n    const session = await this.app.datasources.mongodb.startSession();\r\n    \r\n    try {\r\n      // Iniciar transacci\xf3n\r\n      session.startTransaction();\r\n      \r\n      // Verificar stock y calcular total\r\n      let total = 0;\r\n      const itemsConDetalles = [];\r\n      \r\n      for (const item of items) {\r\n        const producto = await this.app.models.Producto.findById(item.productoId, { session });\r\n        \r\n        if (!producto) {\r\n          throw new Error(`Producto no encontrado: ${item.productoId}`);\r\n        }\r\n        \r\n        if (producto.stock < item.cantidad) {\r\n          throw new Error(`Stock insuficiente para ${producto.nombre}`);\r\n        }\r\n        \r\n        const subtotal = producto.precio * item.cantidad;\r\n        \r\n        itemsConDetalles.push({\r\n          productoId: producto._id,\r\n          nombre: producto.nombre,\r\n          precio: producto.precio,\r\n          cantidad: item.cantidad,\r\n          subtotal\r\n        });\r\n        \r\n        total += subtotal;\r\n        \r\n        // Actualizar stock\r\n        await this.app.models.Producto.updateById(\r\n          producto._id,\r\n          { $inc: { stock: -item.cantidad } },\r\n          { session }\r\n        );\r\n      }\r\n      \r\n      // Crear pedido\r\n      const pedido = await this.app.models.Pedido.create({\r\n        clienteId,\r\n        items: itemsConDetalles,\r\n        total\r\n      }, { session });\r\n\r\n      // Confirmar transacci\xf3n\r\n      await session.commitTransaction();\r\n\r\n      return pedido;\r\n    } catch (error) {\r\n      // Abortar transacci\xf3n en caso de error\r\n      await session.abortTransaction();\r\n\r\n      throw error;\r\n    } finally {\r\n      // Finalizar sesi\xf3n\r\n      session.endSession();\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Este c\xf3digo utiliza la biblioteca Mongoose para interactuar con la base de datos MongoDB. La funci\xf3n ",(0,s.jsx)(n.code,{children:"crearPedido"})," realiza las siguientes acciones:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Inicia una sesi\xf3n de transacci\xf3n."}),"\n",(0,s.jsx)(n.li,{children:"Inicia la transacci\xf3n."}),"\n",(0,s.jsx)(n.li,{children:"Verifica el stock de cada producto y calcula el total del pedido."}),"\n",(0,s.jsx)(n.li,{children:"Actualiza el stock de cada producto en la base de datos."}),"\n",(0,s.jsx)(n.li,{children:"Crea el pedido en la base de datos."}),"\n",(0,s.jsx)(n.li,{children:"Confirma la transacci\xf3n."}),"\n",(0,s.jsx)(n.li,{children:"Finaliza la sesi\xf3n de transacci\xf3n."}),"\n",(0,s.jsxs)(n.li,{children:["En caso de error, aborta la transacci\xf3n y lanza el error.\r\nLa funci\xf3n ",(0,s.jsx)(n.code,{children:"crearPedido"})," devuelve el pedido creado en la base de datos. Si hay alg\xfan error durante el proceso, se lanza una excepci\xf3n y la transacci\xf3n se aborta."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"dynamodb-3",children:"DynamoDB"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"// services/PedidoService.js\r\nmodule.exports = {\r\n  async crearPedido(datos) {\r\n    const { clienteId, items } = datos; \r\n  } \r\n};\n"})})]})}function u(r={}){const{wrapper:n}={...(0,t.R)(),...r.components};return n?(0,s.jsx)(n,{...r,children:(0,s.jsx)(l,{...r})}):l(r)}}}]);