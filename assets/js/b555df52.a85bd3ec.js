"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6541],{4290:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"business-logic/eventos","title":"Sistema de Eventos","description":"Implementaci\xf3n del sistema de eventos para comunicaci\xf3n entre componentes en NexusData","source":"@site/docs/business-logic/eventos.md","sourceDirName":"business-logic","slug":"/business-logic/eventos","permalink":"/nexusdata/docs/business-logic/eventos","draft":false,"unlisted":false,"editUrl":"https://github.com/mbescalante/nexusdata/edit/main/docs/business-logic/eventos.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Sistema de Eventos","description":"Implementaci\xf3n del sistema de eventos para comunicaci\xf3n entre componentes en NexusData"},"sidebar":"tutorialSidebar","previous":{"title":"Acciones Personalizadas","permalink":"/nexusdata/docs/business-logic/acciones"},"next":{"title":"Tareas en Segundo Plano","permalink":"/nexusdata/docs/business-logic/tareas"}}');var t=r(4848),s=r(8453);const a={sidebar_position:4,title:"Sistema de Eventos",description:"Implementaci\xf3n del sistema de eventos para comunicaci\xf3n entre componentes en NexusData"},o="Sistema de Eventos",d={},c=[{value:"Conceptos b\xe1sicos",id:"conceptos-b\xe1sicos",level:2},{value:"\xbfQu\xe9 son los eventos?",id:"qu\xe9-son-los-eventos",level:3},{value:"Tipos de eventos",id:"tipos-de-eventos",level:3},{value:"Emisi\xf3n de eventos",id:"emisi\xf3n-de-eventos",level:2},{value:"Emisi\xf3n desde servicios",id:"emisi\xf3n-desde-servicios",level:3},{value:"Emisi\xf3n desde acciones",id:"emisi\xf3n-desde-acciones",level:3},{value:"Escucha de eventos",id:"escucha-de-eventos",level:2},{value:"Suscripci\xf3n a eventos en servicios",id:"suscripci\xf3n-a-eventos-en-servicios",level:3},{value:"Suscripci\xf3n a eventos en hooks de modelo",id:"suscripci\xf3n-a-eventos-en-hooks-de-modelo",level:3},{value:"Eventos del sistema",id:"eventos-del-sistema",level:2},{value:"Eventos en tiempo real",id:"eventos-en-tiempo-real",level:2},{value:"Suscripci\xf3n en el cliente",id:"suscripci\xf3n-en-el-cliente",level:3},{value:"Eventos programados",id:"eventos-programados",level:2},{value:"Eventos as\xedncronos y colas",id:"eventos-as\xedncronos-y-colas",level:2},{value:"Mejores pr\xe1cticas",id:"mejores-pr\xe1cticas",level:2},{value:"Ejemplo completo: Sistema de notificaciones",id:"ejemplo-completo-sistema-de-notificaciones",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"sistema-de-eventos",children:"Sistema de Eventos"})}),"\n",(0,t.jsx)(n.p,{children:"El sistema de eventos de NexusData proporciona un mecanismo de comunicaci\xf3n entre diferentes partes de tu aplicaci\xf3n, permitiendo un acoplamiento d\xe9bil entre componentes y facilitando la implementaci\xf3n de arquitecturas orientadas a eventos."}),"\n",(0,t.jsx)(n.h2,{id:"conceptos-b\xe1sicos",children:"Conceptos b\xe1sicos"}),"\n",(0,t.jsx)(n.h3,{id:"qu\xe9-son-los-eventos",children:"\xbfQu\xe9 son los eventos?"}),"\n",(0,t.jsx)(n.p,{children:"Los eventos son mensajes que se emiten cuando ocurre algo significativo en tu aplicaci\xf3n. Otros componentes pueden escuchar estos eventos y reaccionar en consecuencia. Esto permite:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Desacoplamiento"}),": Los componentes no necesitan conocerse entre s\xed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Extensibilidad"}),": Puedes a\xf1adir nuevos comportamientos sin modificar el c\xf3digo existente"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reactividad"}),": Tu aplicaci\xf3n puede responder a cambios de estado de forma din\xe1mica"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"tipos-de-eventos",children:"Tipos de eventos"}),"\n",(0,t.jsx)(n.p,{children:"NexusData soporta varios tipos de eventos:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Eventos de modelo"}),": Se emiten autom\xe1ticamente cuando se crean, actualizan o eliminan registros"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Eventos personalizados"}),": Definidos por ti para casos de uso espec\xedficos"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Eventos del sistema"}),": Emitidos por el framework para notificar sobre cambios importantes"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"emisi\xf3n-de-eventos",children:"Emisi\xf3n de eventos"}),"\n",(0,t.jsx)(n.h3,{id:"emisi\xf3n-desde-servicios",children:"Emisi\xf3n desde servicios"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// src/services/OrderService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass OrderService extends Service {\r\n  async approveOrder(orderId, context) {\r\n    const order = await this.db.findOne('Order', { id: orderId });\r\n    \r\n    if (!order) {\r\n      throw new Error('Orden no encontrada');\r\n    }\r\n    \r\n    // Actualizar la orden\r\n    const updatedOrder = await this.db.update('Order', {\r\n      id: orderId,\r\n      status: 'approved',\r\n      approvedAt: new Date(),\r\n      approvedBy: context.user.id\r\n    });\r\n    \r\n    // Emitir evento personalizado\r\n    this.events.emit('order.approved', {\r\n      order: updatedOrder,\r\n      approvedBy: context.user.id,\r\n      timestamp: new Date()\r\n    });\r\n    \r\n    return updatedOrder;\r\n  }\r\n}\r\n\r\nexport default OrderService;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"emisi\xf3n-desde-acciones",children:"Emisi\xf3n desde acciones"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// src/models/Product.js\r\nimport { Model } from '@nexusdata/core';\r\n\r\nclass Product extends Model {\r\n  static config = {\r\n    actions: {\r\n      markAsFeatured: {\r\n        input: {\r\n          featured: 'Boolean!'\r\n        },\r\n        output: 'Product!',\r\n        resolver: async (product, { featured }, context) => {\r\n          // Actualizar el producto\r\n          const updatedProduct = await context.db.update('Product', {\r\n            id: product.id,\r\n            featured,\r\n            featuredAt: featured ? new Date() : null\r\n          });\r\n          \r\n          // Emitir evento personalizado\r\n          context.events.emit('product.featured.changed', {\r\n            product: updatedProduct,\r\n            featured,\r\n            changedBy: context.user.id,\r\n            timestamp: new Date()\r\n          });\r\n          \r\n          return updatedProduct;\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default Product;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"escucha-de-eventos",children:"Escucha de eventos"}),"\n",(0,t.jsx)(n.h3,{id:"suscripci\xf3n-a-eventos-en-servicios",children:"Suscripci\xf3n a eventos en servicios"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// src/services/NotificationService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass NotificationService extends Service {\r\n  initialize() {\r\n    // Suscribirse a eventos cuando se inicializa el servicio\r\n    \r\n    // Evento de modelo: cuando se crea un nuevo usuario\r\n    this.events.on('User.created', this.handleNewUser.bind(this));\r\n    \r\n    // Evento personalizado: cuando se aprueba una orden\r\n    this.events.on('order.approved', this.handleOrderApproved.bind(this));\r\n    \r\n    // Evento personalizado: cuando cambia el estado destacado de un producto\r\n    this.events.on('product.featured.changed', this.handleProductFeaturedChanged.bind(this));\r\n  }\r\n  \r\n  async handleNewUser(user) {\r\n    // Enviar correo de bienvenida\r\n    await this.emailService.sendWelcomeEmail(user.email, {\r\n      name: user.name\r\n    });\r\n    \r\n    // Crear notificaci\xf3n de bienvenida\r\n    await this.db.create('Notification', {\r\n      userId: user.id,\r\n      type: 'welcome',\r\n      title: '\xa1Bienvenido a nuestra plataforma!',\r\n      message: 'Gracias por registrarte. Explora todas nuestras funcionalidades.',\r\n      read: false,\r\n      createdAt: new Date()\r\n    });\r\n  }\r\n  \r\n  async handleOrderApproved({ order, approvedBy }) {\r\n    // Notificar al cliente\r\n    await this.db.create('Notification', {\r\n      userId: order.userId,\r\n      type: 'order_approved',\r\n      title: 'Pedido aprobado',\r\n      message: `Tu pedido #${order.id} ha sido aprobado y est\xe1 siendo procesado.`,\r\n      data: { orderId: order.id },\r\n      read: false,\r\n      createdAt: new Date()\r\n    });\r\n    \r\n    // Enviar correo de confirmaci\xf3n\r\n    await this.emailService.sendOrderApprovedEmail(order.id);\r\n  }\r\n  \r\n  async handleProductFeaturedChanged({ product, featured }) {\r\n    if (featured) {\r\n      // Notificar a los administradores\r\n      const admins = await this.db.findMany('User', { role: 'admin' });\r\n      \r\n      for (const admin of admins) {\r\n        await this.db.create('Notification', {\r\n          userId: admin.id,\r\n          type: 'product_featured',\r\n          title: 'Nuevo producto destacado',\r\n          message: `El producto \"${product.name}\" ha sido marcado como destacado.`,\r\n          data: { productId: product.id },\r\n          read: false,\r\n          createdAt: new Date()\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default NotificationService;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"suscripci\xf3n-a-eventos-en-hooks-de-modelo",children:"Suscripci\xf3n a eventos en hooks de modelo"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// src/models/Order.js\r\nimport { Model } from '@nexusdata/core';\r\n\r\nclass Order extends Model {\r\n  static config = {\r\n    hooks: {\r\n      afterCreate: async (order, context) => {\r\n        // Emitir evento personalizado cuando se crea una orden\r\n        context.events.emit('order.created', {\r\n          order,\r\n          createdBy: context.user?.id,\r\n          timestamp: new Date()\r\n        });\r\n        \r\n        return order;\r\n      },\r\n      \r\n      afterUpdate: async (updatedOrder, originalOrder, context) => {\r\n        // Emitir evento cuando cambia el estado de la orden\r\n        if (updatedOrder.status !== originalOrder.status) {\r\n          context.events.emit('order.status.changed', {\r\n            order: updatedOrder,\r\n            previousStatus: originalOrder.status,\r\n            newStatus: updatedOrder.status,\r\n            changedBy: context.user?.id,\r\n            timestamp: new Date()\r\n          });\r\n        }\r\n        \r\n        return updatedOrder;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport default Order;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"eventos-del-sistema",children:"Eventos del sistema"}),"\n",(0,t.jsx)(n.p,{children:"NexusData emite autom\xe1ticamente eventos para operaciones CRUD en todos los modelos:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Evento"}),(0,t.jsx)(n.th,{children:"Descripci\xf3n"}),(0,t.jsx)(n.th,{children:"Datos"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.created"})}),(0,t.jsx)(n.td,{children:"Se emite cuando se crea un nuevo registro"}),(0,t.jsx)(n.td,{children:"El registro creado"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.updated"})}),(0,t.jsx)(n.td,{children:"Se emite cuando se actualiza un registro"}),(0,t.jsx)(n.td,{children:"El registro actualizado y el original"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Model.deleted"})}),(0,t.jsx)(n.td,{children:"Se emite cuando se elimina un registro"}),(0,t.jsx)(n.td,{children:"El registro eliminado"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["Donde ",(0,t.jsx)(n.code,{children:"Model"})," es el nombre de tu modelo (por ejemplo, ",(0,t.jsx)(n.code,{children:"User.created"}),", ",(0,t.jsx)(n.code,{children:"Product.updated"}),", etc.)."]}),"\n",(0,t.jsx)(n.h2,{id:"eventos-en-tiempo-real",children:"Eventos en tiempo real"}),"\n",(0,t.jsx)(n.p,{children:"NexusData permite transmitir eventos a los clientes en tiempo real a trav\xe9s de WebSockets:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  realtime: {\r\n    enabled: true,\r\n    events: [\r\n      // Eventos de modelo que se transmitir\xe1n en tiempo real\r\n      'User.created',\r\n      'Product.updated',\r\n      'Order.updated',\r\n      \r\n      // Eventos personalizados\r\n      'order.approved',\r\n      'product.featured.changed',\r\n      'notification.created'\r\n    ],\r\n    // Funci\xf3n para determinar qu\xe9 clientes reciben qu\xe9 eventos\r\n    authorize: (event, payload, client) => {\r\n      // Ejemplo: solo enviar actualizaciones de \xf3rdenes al usuario propietario\r\n      if (event.startsWith('Order.') || event === 'order.approved') {\r\n        return client.user?.id === payload.order.userId;\r\n      }\r\n      \r\n      // Ejemplo: solo enviar notificaciones al usuario destinatario\r\n      if (event === 'notification.created') {\r\n        return client.user?.id === payload.userId;\r\n      }\r\n      \r\n      // Por defecto, permitir todos los eventos para usuarios autenticados\r\n      return !!client.user;\r\n    }\r\n  }\r\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"suscripci\xf3n-en-el-cliente",children:"Suscripci\xf3n en el cliente"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Cliente JavaScript\r\nimport { createClient } from '@nexusdata/client';\r\n\r\nconst client = createClient({\r\n  url: 'https://api.example.com',\r\n  token: 'user-auth-token'\r\n});\r\n\r\n// Suscribirse a eventos en tiempo real\r\nclient.realtime.subscribe('Order.updated', (order) => {\r\n  console.log('Orden actualizada:', order);\r\n  // Actualizar la UI\r\n});\r\n\r\nclient.realtime.subscribe('notification.created', (notification) => {\r\n  console.log('Nueva notificaci\xf3n:', notification);\r\n  // Mostrar notificaci\xf3n en la UI\r\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"eventos-programados",children:"Eventos programados"}),"\n",(0,t.jsx)(n.p,{children:"Puedes programar eventos para que se emitan en momentos espec\xedficos:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// src/services/ReminderService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass ReminderService extends Service {\r\n  initialize() {\r\n    // Programar evento diario a las 9:00 AM\r\n    this.events.schedule('daily-reminders', '0 9 * * *', this.sendDailyReminders.bind(this));\r\n    \r\n    // Programar evento para ejecutarse cada hora\r\n    this.events.schedule('hourly-check', '0 * * * *', this.hourlyCheck.bind(this));\r\n  }\r\n  \r\n  async sendDailyReminders() {\r\n    // Buscar usuarios con tareas pendientes\r\n    const usersWithTasks = await this.db.findMany('User', {\r\n      where: {\r\n        tasks: {\r\n          some: {\r\n            status: 'pending',\r\n            dueDate: { lte: new Date(Date.now() + 24 * 60 * 60 * 1000) } // Pr\xf3ximas 24 horas\r\n          }\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Enviar recordatorios\r\n    for (const user of usersWithTasks) {\r\n      await this.notificationService.notify(user.id, {\r\n        title: 'Recordatorio de tareas',\r\n        message: 'Tienes tareas pendientes que vencen pronto.',\r\n        type: 'reminder'\r\n      });\r\n    }\r\n  }\r\n  \r\n  async hourlyCheck() {\r\n    // Verificar \xf3rdenes abandonadas\r\n    const abandonedCarts = await this.db.findMany('Cart', {\r\n      where: {\r\n        status: 'active',\r\n        updatedAt: { lte: new Date(Date.now() - 4 * 60 * 60 * 1000) } // No actualizadas en 4 horas\r\n      }\r\n    });\r\n    \r\n    // Enviar recordatorios\r\n    for (const cart of abandonedCarts) {\r\n      // Emitir evento\r\n      this.events.emit('cart.abandoned', {\r\n        cart,\r\n        timestamp: new Date()\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default ReminderService;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"eventos-as\xedncronos-y-colas",children:"Eventos as\xedncronos y colas"}),"\n",(0,t.jsx)(n.p,{children:"Para eventos que requieren procesamiento pesado, puedes utilizar colas as\xedncronas:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// nexusdata.config.js\r\nmodule.exports = {\r\n  // ... otras configuraciones\r\n  queues: {\r\n    enabled: true,\r\n    connections: {\r\n      default: {\r\n        driver: 'redis',\r\n        config: {\r\n          host: process.env.REDIS_HOST || 'localhost',\r\n          port: process.env.REDIS_PORT || 6379\r\n        }\r\n      }\r\n    },\r\n    queues: [\r\n      {\r\n        name: 'emails',\r\n        connection: 'default',\r\n        attempts: 3,\r\n        backoff: 60 // segundos\r\n      },\r\n      {\r\n        name: 'notifications',\r\n        connection: 'default',\r\n        attempts: 2,\r\n        backoff: 30 // segundos\r\n      },\r\n      {\r\n        name: 'reports',\r\n        connection: 'default',\r\n        attempts: 1\r\n      }\r\n    ]\r\n  }\r\n};\r\n\r\n// src/services/EmailService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass EmailService extends Service {\r\n  initialize() {\r\n    // Suscribirse a eventos y procesarlos de forma as\xedncrona\r\n    this.events.onAsync('order.created', 'emails', this.sendOrderConfirmation.bind(this));\r\n    this.events.onAsync('user.created', 'emails', this.sendWelcomeEmail.bind(this));\r\n    this.events.onAsync('password.reset.requested', 'emails', this.sendPasswordResetEmail.bind(this));\r\n  }\r\n  \r\n  async sendOrderConfirmation({ order }) {\r\n    // L\xf3gica para enviar correo de confirmaci\xf3n de orden\r\n    // ...\r\n    console.log(`Enviando correo de confirmaci\xf3n para orden ${order.id}`);\r\n  }\r\n  \r\n  async sendWelcomeEmail(user) {\r\n    // L\xf3gica para enviar correo de bienvenida\r\n    // ...\r\n    console.log(`Enviando correo de bienvenida a ${user.email}`);\r\n  }\r\n  \r\n  async sendPasswordResetEmail({ user, token }) {\r\n    // L\xf3gica para enviar correo de restablecimiento de contrase\xf1a\r\n    // ...\r\n    console.log(`Enviando correo de restablecimiento de contrase\xf1a a ${user.email}`);\r\n  }\r\n}\r\n\r\nexport default EmailService;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"mejores-pr\xe1cticas",children:"Mejores pr\xe1cticas"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Nombres descriptivos"}),": Usa nombres de eventos que describan claramente lo que ha ocurrido."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Estructura consistente"}),": Mant\xe9n una estructura consistente para los datos de eventos."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentaci\xf3n"}),": Documenta todos los eventos que emite tu aplicaci\xf3n."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Idempotencia"}),": Dise\xf1a manejadores de eventos para ser idempotentes (pueden procesar el mismo evento m\xfaltiples veces sin efectos secundarios)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Manejo de errores"}),": Implementa manejo de errores robusto en tus manejadores de eventos."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitoreo"}),": Monitorea la emisi\xf3n y procesamiento de eventos para detectar problemas."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Seguridad"}),": Aseg\xfarate de que los eventos no contengan informaci\xf3n sensible que no deber\xeda ser accesible para todos los suscriptores."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rendimiento"}),": Para eventos de alto volumen, considera usar colas as\xedncronas."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"ejemplo-completo-sistema-de-notificaciones",children:"Ejemplo completo: Sistema de notificaciones"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// src/services/NotificationService.js\r\nimport { Service } from '@nexusdata/core';\r\n\r\nclass NotificationService extends Service {\r\n  initialize() {\r\n    // Suscribirse a eventos del sistema\r\n    this.events.on('User.created', this.handleUserCreated.bind(this));\r\n    this.events.on('Order.updated', this.handleOrderUpdated.bind(this));\r\n    \r\n    // Suscribirse a eventos personalizados\r\n    this.events.on('order.approved', this.handleOrderApproved.bind(this));\r\n    this.events.on('order.shipped', this.handleOrderShipped.bind(this));\r\n    this.events.on('product.stock.low', this.handleProductStockLow.bind(this));\r\n    \r\n    // Suscribirse a eventos as\xedncronos\r\n    this.events.onAsync('notification.send', 'notifications', this.processNotification.bind(this));\r\n  }\r\n  \r\n  async handleUserCreated(user) {\r\n    await this.createNotification({\r\n      userId: user.id,\r\n      type: 'welcome',\r\n      title: '\xa1Bienvenido!',\r\n      message: 'Gracias por registrarte en nuestra plataforma.'\r\n    });\r\n  }\r\n  \r\n  async handleOrderUpdated(order, previousOrder) {\r\n    if (order.status !== previousOrder.status) {\r\n      await this.createNotification({\r\n        userId: order.userId,\r\n        type: 'order_status',\r\n        title: 'Estado de pedido actualizado',\r\n        message: `Tu pedido #${order.id} ahora est\xe1 en estado: ${order.status}`,\r\n        data: { orderId: order.id, status: order.status }\r\n      });\r\n    }\r\n  }\r\n  \r\n  async handleOrderApproved({ order }) {\r\n    await this.createNotification({\r\n      userId: order.userId,\r\n      type: 'order_approved',\r\n      title: 'Pedido aprobado',\r\n      message: `Tu pedido #${order.id} ha sido aprobado y est\xe1 siendo procesado.`,\r\n      data: { orderId: order.id }\r\n    });\r\n  }\r\n  \r\n  async handleOrderShipped({ order, tracking }) {\r\n    await this.createNotification({\r\n      userId: order.userId,\r\n      type: 'order_shipped',\r\n      title: 'Pedido enviado',\r\n      message: `Tu pedido #${order.id} ha sido enviado. N\xfamero de seguimiento: ${tracking.number}`,\r\n      data: { orderId: order.id, tracking }\r\n    });\r\n  }\r\n  \r\n  async handleProductStockLow({ product, currentStock, threshold }) {\r\n    // Notificar a los administradores\r\n    const admins = await this.db.findMany('User', { role: 'admin' });\r\n    \r\n    for (const admin of admins) {\r\n      await this.createNotification({\r\n        userId: admin.id,\r\n        type: 'stock_alert',\r\n        title: 'Alerta de stock bajo',\r\n        message: `El producto \"${product.name}\" tiene stock bajo (${currentStock} unidades).`,\r\n        data: { productId: product.id, currentStock, threshold }\r\n      });\r\n    }\r\n  }\r\n  \r\n  async createNotification(data) {\r\n    // Crear notificaci\xf3n en la base de datos\r\n    const notification = await this.db.create('Notification', {\r\n      ...data,\r\n      read: false,\r\n      createdAt: new Date()\r\n    });\r\n    \r\n    // Emitir evento para notificaciones en tiempo real\r\n    this.events.emit('notification.created', notification);\r\n    \r\n    // Encolar para procesamiento adicional (push notifications, emails, etc.)\r\n    this.events.emitAsync('notification.send', notification);\r\n    \r\n    return notification;\r\n  }\r\n  \r\n  async processNotification(notification) {\r\n    // Obtener usuario\r\n    const user = await this.db.findOne('User', { id: notification.userId });\r\n    \r\n    // Enviar push notification si est\xe1 habilitado\r\n    if (user.pushEnabled && user.pushToken) {\r\n      try {\r\n        await this.pushService.send({\r\n          token: user.pushToken,\r\n          title: notification.title,\r\n          body: notification.message,\r\n          data: notification.data\r\n        });\r\n        \r\n        // Actualizar estado de env\xedo\r\n        await this.db.update('Notification', {\r\n          id: notification.id,\r\n          pushSent: true,\r\n          pushSentAt: new Date()\r\n        });\r\n      } catch (error) {\r\n        console.error('Error al enviar push notification:', error);\r\n        \r\n        // Registrar error\r\n        await this.db.create('NotificationError', {\r\n          notificationId: notification.id,\r\n          type: 'push',\r\n          error: error.message,\r\n          data: JSON.stringify(error),\r\n          createdAt: new Date()\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Enviar email para ciertos tipos de notificaciones\r\n    const emailTypes = ['welcome', 'order_shipped', 'password_reset'];\r\n    \r\n    if (emailTypes.includes(notification.type)) {\r\n      try {\r\n        await this.emailService.sendNotificationEmail(user.email, notification);\r\n        \r\n        // Actualizar estado de env\xedo\r\n        await this.db.update('Notification', {\r\n          id: notification.id,\r\n          emailSent: true,\r\n          emailSentAt: new Date()\r\n        });\r\n      } catch (error) {\r\n        console.error('Error al enviar email de notificaci\xf3n:', error);\r\n        \r\n        // Registrar error\r\n        await this.db.create('NotificationError', {\r\n          notificationId: notification.id,\r\n          type: 'email',\r\n          error: error.message,\r\n          data: JSON.stringify(error),\r\n          createdAt: new Date()\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  async markAsRead(notificationId, userId) {\r\n    const notification = await this.db.findOne('Notification', { id: notificationId });\r\n    \r\n    if (!notification) {\r\n      throw new Error('Notificaci\xf3n no encontrada');\r\n    }\r\n    \r\n    if (notification.userId !== userId) {\r\n      throw new Error('No tienes permiso para marcar esta notificaci\xf3n como le\xedda');\r\n    }\r\n    \r\n    return this.db.update('Notification', {\r\n      id: notificationId,\r\n      read: true,\r\n      readAt: new Date()\r\n    });\r\n  }\r\n  \r\n  async getUnreadCount(userId) {\r\n    return this.db.count('Notification', {\r\n      userId,\r\n      read: false\r\n    });\r\n  }\r\n}\r\n\r\nexport default NotificationService;\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var i=r(6540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);